
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080047e8  080047e8  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047e8  080047e8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000fc  080048ec  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080048ec  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e39  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013fb  00000000  00000000  00025f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004f8  00000000  00000000  00027360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000420  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000028ad  00000000  00000000  00027c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000055f3  00000000  00000000  0002a525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ce53  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003c96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  0003c9e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000fc 	.word	0x200000fc
 800014c:	00000000 	.word	0x00000000
 8000150:	08004480 	.word	0x08004480

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000100 	.word	0x20000100
 800016c:	08004480 	.word	0x08004480

08000170 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000178:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <_sbrk+0x50>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d102      	bne.n	8000186 <_sbrk+0x16>
		heap_end = &end;
 8000180:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <_sbrk+0x50>)
 8000182:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <_sbrk+0x54>)
 8000184:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <_sbrk+0x50>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <_sbrk+0x50>)
 800018e:	681a      	ldr	r2, [r3, #0]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	466a      	mov	r2, sp
 8000196:	4293      	cmp	r3, r2
 8000198:	d907      	bls.n	80001aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800019a:	f003 fd35 	bl	8003c08 <__errno>
 800019e:	4602      	mov	r2, r0
 80001a0:	230c      	movs	r3, #12
 80001a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80001a4:	f04f 33ff 	mov.w	r3, #4294967295
 80001a8:	e006      	b.n	80001b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <_sbrk+0x50>)
 80001ac:	681a      	ldr	r2, [r3, #0]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	4a03      	ldr	r2, [pc, #12]	; (80001c0 <_sbrk+0x50>)
 80001b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80001b6:	68fb      	ldr	r3, [r7, #12]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000118 	.word	0x20000118
 80001c4:	20000230 	.word	0x20000230

080001c8 <main>:
void I2C1_Inits(void);
void USART_Inits(void);
void USART_GPIOInits(void);

int main(void)
{
 80001c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ca:	b08f      	sub	sp, #60	; 0x3c
 80001cc:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t FingerResult;
	// Calculate the time of function
	uint8_t Temp[1];
	uchar rc_status1,rc_status2 = MI_ERR;
 80001ce:	2302      	movs	r3, #2
 80001d0:	713b      	strb	r3, [r7, #4]
	uint8_t count = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71bb      	strb	r3, [r7, #6]
	uint8_t numberOfError = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	70fb      	strb	r3, [r7, #3]
	char key;

	SysTickInit();
 80001da:	f002 fadf 	bl	800279c <SysTickInit>
	DelayInit();
 80001de:	f001 fd83 	bl	8001ce8 <DelayInit>
	//
	USART_GPIOInits();
 80001e2:	f000 fad1 	bl	8000788 <USART_GPIOInits>
	USART_Inits();
 80001e6:	f000 faff 	bl	80007e8 <USART_Inits>
	KEYPAD_Inits();
 80001ea:	f001 f827 	bl	800123c <KEYPAD_Inits>
	//
	I2C1_GPIOInits();
 80001ee:	f000 fa93 	bl	8000718 <I2C1_GPIOInits>
	I2C1_Inits();
 80001f2:	f000 faad 	bl	8000750 <I2C1_Inits>
	I2C_LCD_init(&LCD, &I2C1Handle, LCD_ADDR);
 80001f6:	2227      	movs	r2, #39	; 0x27
 80001f8:	49b3      	ldr	r1, [pc, #716]	; (80004c8 <main+0x300>)
 80001fa:	48b4      	ldr	r0, [pc, #720]	; (80004cc <main+0x304>)
 80001fc:	f001 fe5d 	bl	8001eba <I2C_LCD_init>
	//

	//
	MFRC522_Init();
 8000200:	f002 f866 	bl	80022d0 <MFRC522_Init>
	// Receive data from Winform
	USART_ReceiveDataIT(&Usart2, &data_winform, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	49b2      	ldr	r1, [pc, #712]	; (80004d0 <main+0x308>)
 8000208:	48b2      	ldr	r0, [pc, #712]	; (80004d4 <main+0x30c>)
 800020a:	f002 fdf1 	bl	8002df0 <USART_ReceiveDataIT>

	I2C_LCD_display_clear(&LCD);
 800020e:	48af      	ldr	r0, [pc, #700]	; (80004cc <main+0x304>)
 8000210:	f001 fecc 	bl	8001fac <I2C_LCD_display_clear>
	I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8000214:	49b0      	ldr	r1, [pc, #704]	; (80004d8 <main+0x310>)
 8000216:	48ad      	ldr	r0, [pc, #692]	; (80004cc <main+0x304>)
 8000218:	f001 fed5 	bl	8001fc6 <I2C_LCD_print_string>
	I2C_LCD_set_cursor(&LCD, 1, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	48aa      	ldr	r0, [pc, #680]	; (80004cc <main+0x304>)
 8000222:	f001 fee7 	bl	8001ff4 <I2C_LCD_set_cursor>
	I2C_LCD_print_string(&LCD, "A: FP");
 8000226:	49ad      	ldr	r1, [pc, #692]	; (80004dc <main+0x314>)
 8000228:	48a8      	ldr	r0, [pc, #672]	; (80004cc <main+0x304>)
 800022a:	f001 fecc 	bl	8001fc6 <I2C_LCD_print_string>
	I2C_LCD_set_cursor(&LCD, 1, 8);
 800022e:	2208      	movs	r2, #8
 8000230:	2101      	movs	r1, #1
 8000232:	48a6      	ldr	r0, [pc, #664]	; (80004cc <main+0x304>)
 8000234:	f001 fede 	bl	8001ff4 <I2C_LCD_set_cursor>
	I2C_LCD_print_string(&LCD, "B: RFID");
 8000238:	49a9      	ldr	r1, [pc, #676]	; (80004e0 <main+0x318>)
 800023a:	48a4      	ldr	r0, [pc, #656]	; (80004cc <main+0x304>)
 800023c:	f001 fec3 	bl	8001fc6 <I2C_LCD_print_string>

	while(1)
	{
			key = getChar();
 8000240:	f001 f85a 	bl	80012f8 <getChar>
 8000244:	4603      	mov	r3, r0
 8000246:	70bb      	strb	r3, [r7, #2]

			if(key != '*' && key != '#' && key != 'D' && key != 0 && key != 0x01 && key !='A' && key != 'B')
 8000248:	78bb      	ldrb	r3, [r7, #2]
 800024a:	2b2a      	cmp	r3, #42	; 0x2a
 800024c:	f000 80ad 	beq.w	80003aa <main+0x1e2>
 8000250:	78bb      	ldrb	r3, [r7, #2]
 8000252:	2b23      	cmp	r3, #35	; 0x23
 8000254:	f000 80a9 	beq.w	80003aa <main+0x1e2>
 8000258:	78bb      	ldrb	r3, [r7, #2]
 800025a:	2b44      	cmp	r3, #68	; 0x44
 800025c:	f000 80a5 	beq.w	80003aa <main+0x1e2>
 8000260:	78bb      	ldrb	r3, [r7, #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	f000 80a1 	beq.w	80003aa <main+0x1e2>
 8000268:	78bb      	ldrb	r3, [r7, #2]
 800026a:	2b01      	cmp	r3, #1
 800026c:	f000 809d 	beq.w	80003aa <main+0x1e2>
 8000270:	78bb      	ldrb	r3, [r7, #2]
 8000272:	2b41      	cmp	r3, #65	; 0x41
 8000274:	f000 8099 	beq.w	80003aa <main+0x1e2>
 8000278:	78bb      	ldrb	r3, [r7, #2]
 800027a:	2b42      	cmp	r3, #66	; 0x42
 800027c:	f000 8095 	beq.w	80003aa <main+0x1e2>
			{
						I2C_LCD_display_clear(&LCD);
 8000280:	4892      	ldr	r0, [pc, #584]	; (80004cc <main+0x304>)
 8000282:	f001 fe93 	bl	8001fac <I2C_LCD_display_clear>
						I2C_LCD_print_string(&LCD, "Press Ur Pass!");
 8000286:	4997      	ldr	r1, [pc, #604]	; (80004e4 <main+0x31c>)
 8000288:	4890      	ldr	r0, [pc, #576]	; (80004cc <main+0x304>)
 800028a:	f001 fe9c 	bl	8001fc6 <I2C_LCD_print_string>
						getPassword[count] = key;
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	4995      	ldr	r1, [pc, #596]	; (80004e8 <main+0x320>)
 8000292:	78ba      	ldrb	r2, [r7, #2]
 8000294:	54ca      	strb	r2, [r1, r3]
						Delayms(100);
 8000296:	2064      	movs	r0, #100	; 0x64
 8000298:	f001 fd5a 	bl	8001d50 <Delayms>
						for(uint8_t i = 0 ; i <= count; i++)
 800029c:	2300      	movs	r3, #0
 800029e:	717b      	strb	r3, [r7, #5]
 80002a0:	e00c      	b.n	80002bc <main+0xf4>
						{
							I2C_LCD_set_cursor(&LCD, 1, i);
 80002a2:	797b      	ldrb	r3, [r7, #5]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2101      	movs	r1, #1
 80002a8:	4888      	ldr	r0, [pc, #544]	; (80004cc <main+0x304>)
 80002aa:	f001 fea3 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_char(&LCD, '*');
 80002ae:	212a      	movs	r1, #42	; 0x2a
 80002b0:	4886      	ldr	r0, [pc, #536]	; (80004cc <main+0x304>)
 80002b2:	f001 fe6b 	bl	8001f8c <I2C_LCD_print_char>
						for(uint8_t i = 0 ; i <= count; i++)
 80002b6:	797b      	ldrb	r3, [r7, #5]
 80002b8:	3301      	adds	r3, #1
 80002ba:	717b      	strb	r3, [r7, #5]
 80002bc:	797a      	ldrb	r2, [r7, #5]
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d9ee      	bls.n	80002a2 <main+0xda>
						}
						count++;
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	3301      	adds	r3, #1
 80002c8:	71bb      	strb	r3, [r7, #6]
						//cusor++;
						if(count == 4)
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	f040 820a 	bne.w	80006e6 <main+0x51e>
						{
							if(getPassword[0] == password[0] && getPassword[1] == password[1] &&
 80002d2:	4b85      	ldr	r3, [pc, #532]	; (80004e8 <main+0x320>)
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	4b85      	ldr	r3, [pc, #532]	; (80004ec <main+0x324>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d12d      	bne.n	800033a <main+0x172>
 80002de:	4b82      	ldr	r3, [pc, #520]	; (80004e8 <main+0x320>)
 80002e0:	785a      	ldrb	r2, [r3, #1]
 80002e2:	4b82      	ldr	r3, [pc, #520]	; (80004ec <main+0x324>)
 80002e4:	785b      	ldrb	r3, [r3, #1]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d127      	bne.n	800033a <main+0x172>
								getPassword[2] == password[2] && getPassword[3] == password[3])
 80002ea:	4b7f      	ldr	r3, [pc, #508]	; (80004e8 <main+0x320>)
 80002ec:	789a      	ldrb	r2, [r3, #2]
 80002ee:	4b7f      	ldr	r3, [pc, #508]	; (80004ec <main+0x324>)
 80002f0:	789b      	ldrb	r3, [r3, #2]
							if(getPassword[0] == password[0] && getPassword[1] == password[1] &&
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d121      	bne.n	800033a <main+0x172>
								getPassword[2] == password[2] && getPassword[3] == password[3])
 80002f6:	4b7c      	ldr	r3, [pc, #496]	; (80004e8 <main+0x320>)
 80002f8:	78da      	ldrb	r2, [r3, #3]
 80002fa:	4b7c      	ldr	r3, [pc, #496]	; (80004ec <main+0x324>)
 80002fc:	78db      	ldrb	r3, [r3, #3]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d11b      	bne.n	800033a <main+0x172>
							{
								I2C_LCD_display_clear(&LCD);
 8000302:	4872      	ldr	r0, [pc, #456]	; (80004cc <main+0x304>)
 8000304:	f001 fe52 	bl	8001fac <I2C_LCD_display_clear>
								I2C_LCD_set_cursor(&LCD, 0, 4);
 8000308:	2204      	movs	r2, #4
 800030a:	2100      	movs	r1, #0
 800030c:	486f      	ldr	r0, [pc, #444]	; (80004cc <main+0x304>)
 800030e:	f001 fe71 	bl	8001ff4 <I2C_LCD_set_cursor>
								I2C_LCD_print_string(&LCD, "WELCOME!!");
 8000312:	4977      	ldr	r1, [pc, #476]	; (80004f0 <main+0x328>)
 8000314:	486d      	ldr	r0, [pc, #436]	; (80004cc <main+0x304>)
 8000316:	f001 fe56 	bl	8001fc6 <I2C_LCD_print_string>
								I2C_LCD_set_cursor(&LCD, 1, 4);
 800031a:	2204      	movs	r2, #4
 800031c:	2101      	movs	r1, #1
 800031e:	486b      	ldr	r0, [pc, #428]	; (80004cc <main+0x304>)
 8000320:	f001 fe68 	bl	8001ff4 <I2C_LCD_set_cursor>
								I2C_LCD_print_string(&LCD, "WELCOME!!");
 8000324:	4972      	ldr	r1, [pc, #456]	; (80004f0 <main+0x328>)
 8000326:	4869      	ldr	r0, [pc, #420]	; (80004cc <main+0x304>)
 8000328:	f001 fe4d 	bl	8001fc6 <I2C_LCD_print_string>
								Delayms(2000);
 800032c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000330:	f001 fd0e 	bl	8001d50 <Delayms>
								count = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e01d      	b.n	8000376 <main+0x1ae>
							}
							else
							{
								I2C_LCD_display_clear(&LCD);
 800033a:	4864      	ldr	r0, [pc, #400]	; (80004cc <main+0x304>)
 800033c:	f001 fe36 	bl	8001fac <I2C_LCD_display_clear>
								I2C_LCD_set_cursor(&LCD, 0, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2100      	movs	r1, #0
 8000344:	4861      	ldr	r0, [pc, #388]	; (80004cc <main+0x304>)
 8000346:	f001 fe55 	bl	8001ff4 <I2C_LCD_set_cursor>
								I2C_LCD_print_string(&LCD, "Wrong Password");
 800034a:	496a      	ldr	r1, [pc, #424]	; (80004f4 <main+0x32c>)
 800034c:	485f      	ldr	r0, [pc, #380]	; (80004cc <main+0x304>)
 800034e:	f001 fe3a 	bl	8001fc6 <I2C_LCD_print_string>
								I2C_LCD_set_cursor(&LCD, 1, 1);
 8000352:	2201      	movs	r2, #1
 8000354:	2101      	movs	r1, #1
 8000356:	485d      	ldr	r0, [pc, #372]	; (80004cc <main+0x304>)
 8000358:	f001 fe4c 	bl	8001ff4 <I2C_LCD_set_cursor>
								I2C_LCD_print_string(&LCD, "Wrong Password");
 800035c:	4965      	ldr	r1, [pc, #404]	; (80004f4 <main+0x32c>)
 800035e:	485b      	ldr	r0, [pc, #364]	; (80004cc <main+0x304>)
 8000360:	f001 fe31 	bl	8001fc6 <I2C_LCD_print_string>
								Delayms(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f001 fcf2 	bl	8001d50 <Delayms>
								I2C_LCD_display_clear(&LCD);
 800036c:	4857      	ldr	r0, [pc, #348]	; (80004cc <main+0x304>)
 800036e:	f001 fe1d 	bl	8001fac <I2C_LCD_display_clear>
								count = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	71bb      	strb	r3, [r7, #6]
							}
							I2C_LCD_display_clear(&LCD);
 8000376:	4855      	ldr	r0, [pc, #340]	; (80004cc <main+0x304>)
 8000378:	f001 fe18 	bl	8001fac <I2C_LCD_display_clear>
							I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 800037c:	4956      	ldr	r1, [pc, #344]	; (80004d8 <main+0x310>)
 800037e:	4853      	ldr	r0, [pc, #332]	; (80004cc <main+0x304>)
 8000380:	f001 fe21 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4850      	ldr	r0, [pc, #320]	; (80004cc <main+0x304>)
 800038a:	f001 fe33 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "A: FP");
 800038e:	4953      	ldr	r1, [pc, #332]	; (80004dc <main+0x314>)
 8000390:	484e      	ldr	r0, [pc, #312]	; (80004cc <main+0x304>)
 8000392:	f001 fe18 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 8);
 8000396:	2208      	movs	r2, #8
 8000398:	2101      	movs	r1, #1
 800039a:	484c      	ldr	r0, [pc, #304]	; (80004cc <main+0x304>)
 800039c:	f001 fe2a 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "B: RFID");
 80003a0:	494f      	ldr	r1, [pc, #316]	; (80004e0 <main+0x318>)
 80003a2:	484a      	ldr	r0, [pc, #296]	; (80004cc <main+0x304>)
 80003a4:	f001 fe0f 	bl	8001fc6 <I2C_LCD_print_string>
						if(count == 4)
 80003a8:	e19d      	b.n	80006e6 <main+0x51e>
						}
			}
			else if (key == 'A')
 80003aa:	78bb      	ldrb	r3, [r7, #2]
 80003ac:	2b41      	cmp	r3, #65	; 0x41
 80003ae:	f040 80a9 	bne.w	8000504 <main+0x33c>
			{
				// check the fingerprint
				I2C_LCD_display_clear(&LCD);
 80003b2:	4846      	ldr	r0, [pc, #280]	; (80004cc <main+0x304>)
 80003b4:	f001 fdfa 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_set_cursor(&LCD, 0, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2100      	movs	r1, #0
 80003bc:	4843      	ldr	r0, [pc, #268]	; (80004cc <main+0x304>)
 80003be:	f001 fe19 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "Checking Finger");
 80003c2:	494d      	ldr	r1, [pc, #308]	; (80004f8 <main+0x330>)
 80003c4:	4841      	ldr	r0, [pc, #260]	; (80004cc <main+0x304>)
 80003c6:	f001 fdfe 	bl	8001fc6 <I2C_LCD_print_string>
				FingerResult = CheckFinger(Usart1, LCD);
 80003ca:	4e4c      	ldr	r6, [pc, #304]	; (80004fc <main+0x334>)
 80003cc:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <main+0x304>)
 80003ce:	ab09      	add	r3, sp, #36	; 0x24
 80003d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80003d6:	466d      	mov	r5, sp
 80003d8:	f106 0410 	add.w	r4, r6, #16
 80003dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e4:	6823      	ldr	r3, [r4, #0]
 80003e6:	602b      	str	r3, [r5, #0]
 80003e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003ec:	f003 fb0e 	bl	8003a0c <CheckFinger>
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
				while(FingerResult == FP_NOFINGER)
 80003f4:	e014      	b.n	8000420 <main+0x258>
				{
					FingerResult = CheckFinger(Usart1, LCD);
 80003f6:	4e41      	ldr	r6, [pc, #260]	; (80004fc <main+0x334>)
 80003f8:	4a34      	ldr	r2, [pc, #208]	; (80004cc <main+0x304>)
 80003fa:	ab09      	add	r3, sp, #36	; 0x24
 80003fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80003fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000402:	466d      	mov	r5, sp
 8000404:	f106 0410 	add.w	r4, r6, #16
 8000408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800040a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800040c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800040e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000410:	6823      	ldr	r3, [r4, #0]
 8000412:	602b      	str	r3, [r5, #0]
 8000414:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000418:	f003 faf8 	bl	8003a0c <CheckFinger>
 800041c:	4603      	mov	r3, r0
 800041e:	71fb      	strb	r3, [r7, #7]
				while(FingerResult == FP_NOFINGER)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d0e7      	beq.n	80003f6 <main+0x22e>

				}
				if(FingerResult == FP_OK)
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d119      	bne.n	8000460 <main+0x298>
				{
					I2C_LCD_display_clear(&LCD);
 800042c:	4827      	ldr	r0, [pc, #156]	; (80004cc <main+0x304>)
 800042e:	f001 fdbd 	bl	8001fac <I2C_LCD_display_clear>
					I2C_LCD_set_cursor(&LCD, 0, 4);
 8000432:	2204      	movs	r2, #4
 8000434:	2100      	movs	r1, #0
 8000436:	4825      	ldr	r0, [pc, #148]	; (80004cc <main+0x304>)
 8000438:	f001 fddc 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "WELCOME!!");
 800043c:	492c      	ldr	r1, [pc, #176]	; (80004f0 <main+0x328>)
 800043e:	4823      	ldr	r0, [pc, #140]	; (80004cc <main+0x304>)
 8000440:	f001 fdc1 	bl	8001fc6 <I2C_LCD_print_string>
					I2C_LCD_set_cursor(&LCD, 1, 4);
 8000444:	2204      	movs	r2, #4
 8000446:	2101      	movs	r1, #1
 8000448:	4820      	ldr	r0, [pc, #128]	; (80004cc <main+0x304>)
 800044a:	f001 fdd3 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "WELCOME!!");
 800044e:	4928      	ldr	r1, [pc, #160]	; (80004f0 <main+0x328>)
 8000450:	481e      	ldr	r0, [pc, #120]	; (80004cc <main+0x304>)
 8000452:	f001 fdb8 	bl	8001fc6 <I2C_LCD_print_string>
					Delayms(2000);
 8000456:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800045a:	f001 fc79 	bl	8001d50 <Delayms>
 800045e:	e018      	b.n	8000492 <main+0x2ca>
				}
				else
				{
					I2C_LCD_display_clear(&LCD);
 8000460:	481a      	ldr	r0, [pc, #104]	; (80004cc <main+0x304>)
 8000462:	f001 fda3 	bl	8001fac <I2C_LCD_display_clear>
					I2C_LCD_set_cursor(&LCD, 0, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2100      	movs	r1, #0
 800046a:	4818      	ldr	r0, [pc, #96]	; (80004cc <main+0x304>)
 800046c:	f001 fdc2 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "Finger Error!!");
 8000470:	4923      	ldr	r1, [pc, #140]	; (8000500 <main+0x338>)
 8000472:	4816      	ldr	r0, [pc, #88]	; (80004cc <main+0x304>)
 8000474:	f001 fda7 	bl	8001fc6 <I2C_LCD_print_string>
					I2C_LCD_set_cursor(&LCD, 1, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	4813      	ldr	r0, [pc, #76]	; (80004cc <main+0x304>)
 800047e:	f001 fdb9 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "Finger Error!!");
 8000482:	491f      	ldr	r1, [pc, #124]	; (8000500 <main+0x338>)
 8000484:	4811      	ldr	r0, [pc, #68]	; (80004cc <main+0x304>)
 8000486:	f001 fd9e 	bl	8001fc6 <I2C_LCD_print_string>
					Delayms(2000);
 800048a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800048e:	f001 fc5f 	bl	8001d50 <Delayms>

				}
				I2C_LCD_display_clear(&LCD);
 8000492:	480e      	ldr	r0, [pc, #56]	; (80004cc <main+0x304>)
 8000494:	f001 fd8a 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8000498:	490f      	ldr	r1, [pc, #60]	; (80004d8 <main+0x310>)
 800049a:	480c      	ldr	r0, [pc, #48]	; (80004cc <main+0x304>)
 800049c:	f001 fd93 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <main+0x304>)
 80004a6:	f001 fda5 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "A: FP");
 80004aa:	490c      	ldr	r1, [pc, #48]	; (80004dc <main+0x314>)
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <main+0x304>)
 80004ae:	f001 fd8a 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 8);
 80004b2:	2208      	movs	r2, #8
 80004b4:	2101      	movs	r1, #1
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <main+0x304>)
 80004b8:	f001 fd9c 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "B: RFID");
 80004bc:	4908      	ldr	r1, [pc, #32]	; (80004e0 <main+0x318>)
 80004be:	4803      	ldr	r0, [pc, #12]	; (80004cc <main+0x304>)
 80004c0:	f001 fd81 	bl	8001fc6 <I2C_LCD_print_string>
 80004c4:	e6bc      	b.n	8000240 <main+0x78>
 80004c6:	bf00      	nop
 80004c8:	2000016c 	.word	0x2000016c
 80004cc:	20000218 	.word	0x20000218
 80004d0:	2000011c 	.word	0x2000011c
 80004d4:	20000178 	.word	0x20000178
 80004d8:	08004498 	.word	0x08004498
 80004dc:	080044ac 	.word	0x080044ac
 80004e0:	080044b4 	.word	0x080044b4
 80004e4:	080044bc 	.word	0x080044bc
 80004e8:	200001b0 	.word	0x200001b0
 80004ec:	20000010 	.word	0x20000010
 80004f0:	080044cc 	.word	0x080044cc
 80004f4:	080044d8 	.word	0x080044d8
 80004f8:	080044e8 	.word	0x080044e8
 80004fc:	200001b4 	.word	0x200001b4
 8000500:	080044f8 	.word	0x080044f8
			}
			else if( key == 'B')
 8000504:	78bb      	ldrb	r3, [r7, #2]
 8000506:	2b42      	cmp	r3, #66	; 0x42
 8000508:	f47f ae9a 	bne.w	8000240 <main+0x78>
			{
				// check RFID
				I2C_LCD_display_clear(&LCD);
 800050c:	4876      	ldr	r0, [pc, #472]	; (80006e8 <main+0x520>)
 800050e:	f001 fd4d 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_set_cursor(&LCD, 0, 2);
 8000512:	2202      	movs	r2, #2
 8000514:	2100      	movs	r1, #0
 8000516:	4874      	ldr	r0, [pc, #464]	; (80006e8 <main+0x520>)
 8000518:	f001 fd6c 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "Put Your Card");
 800051c:	4973      	ldr	r1, [pc, #460]	; (80006ec <main+0x524>)
 800051e:	4872      	ldr	r0, [pc, #456]	; (80006e8 <main+0x520>)
 8000520:	f001 fd51 	bl	8001fc6 <I2C_LCD_print_string>
				status = MFRC522_Request(PICC_REQIDL, str);
 8000524:	4972      	ldr	r1, [pc, #456]	; (80006f0 <main+0x528>)
 8000526:	2026      	movs	r0, #38	; 0x26
 8000528:	f001 ffef 	bl	800250a <MFRC522_Request>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b70      	ldr	r3, [pc, #448]	; (80006f4 <main+0x52c>)
 8000532:	701a      	strb	r2, [r3, #0]
				while(status != MI_OK)
 8000534:	e007      	b.n	8000546 <main+0x37e>
				{
					status = MFRC522_Request(PICC_REQIDL, str);
 8000536:	496e      	ldr	r1, [pc, #440]	; (80006f0 <main+0x528>)
 8000538:	2026      	movs	r0, #38	; 0x26
 800053a:	f001 ffe6 	bl	800250a <MFRC522_Request>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	4b6c      	ldr	r3, [pc, #432]	; (80006f4 <main+0x52c>)
 8000544:	701a      	strb	r2, [r3, #0]
				while(status != MI_OK)
 8000546:	4b6b      	ldr	r3, [pc, #428]	; (80006f4 <main+0x52c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f3      	bne.n	8000536 <main+0x36e>
				}

					status = MFRC522_Anticoll(str);
 800054e:	4868      	ldr	r0, [pc, #416]	; (80006f0 <main+0x528>)
 8000550:	f002 f800 	bl	8002554 <MFRC522_Anticoll>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b66      	ldr	r3, [pc, #408]	; (80006f4 <main+0x52c>)
 800055a:	701a      	strb	r2, [r3, #0]
					if(status == MI_OK)
 800055c:	4b65      	ldr	r3, [pc, #404]	; (80006f4 <main+0x52c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 808e 	bne.w	8000682 <main+0x4ba>
					{
						if((UID_1[0] == str[0]&&UID_1[1] == str[1]&&UID_1[2] == str[2]&&UID_1[3] == str[3]&&UID_1[4] == str[4])||
 8000566:	4b64      	ldr	r3, [pc, #400]	; (80006f8 <main+0x530>)
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	4b61      	ldr	r3, [pc, #388]	; (80006f0 <main+0x528>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d117      	bne.n	80005a2 <main+0x3da>
 8000572:	4b61      	ldr	r3, [pc, #388]	; (80006f8 <main+0x530>)
 8000574:	785a      	ldrb	r2, [r3, #1]
 8000576:	4b5e      	ldr	r3, [pc, #376]	; (80006f0 <main+0x528>)
 8000578:	785b      	ldrb	r3, [r3, #1]
 800057a:	429a      	cmp	r2, r3
 800057c:	d111      	bne.n	80005a2 <main+0x3da>
 800057e:	4b5e      	ldr	r3, [pc, #376]	; (80006f8 <main+0x530>)
 8000580:	789a      	ldrb	r2, [r3, #2]
 8000582:	4b5b      	ldr	r3, [pc, #364]	; (80006f0 <main+0x528>)
 8000584:	789b      	ldrb	r3, [r3, #2]
 8000586:	429a      	cmp	r2, r3
 8000588:	d10b      	bne.n	80005a2 <main+0x3da>
 800058a:	4b5b      	ldr	r3, [pc, #364]	; (80006f8 <main+0x530>)
 800058c:	78da      	ldrb	r2, [r3, #3]
 800058e:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <main+0x528>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	429a      	cmp	r2, r3
 8000594:	d105      	bne.n	80005a2 <main+0x3da>
 8000596:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <main+0x530>)
 8000598:	791a      	ldrb	r2, [r3, #4]
 800059a:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <main+0x528>)
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d03b      	beq.n	800061a <main+0x452>
								(UID_2[0] == str[0]&&UID_2[1] == str[1]&&UID_2[2] == str[2]&&UID_2[3] == str[3]&&UID_2[4] == str[4])||
 80005a2:	4b56      	ldr	r3, [pc, #344]	; (80006fc <main+0x534>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <main+0x528>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
						if((UID_1[0] == str[0]&&UID_1[1] == str[1]&&UID_1[2] == str[2]&&UID_1[3] == str[3]&&UID_1[4] == str[4])||
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d117      	bne.n	80005de <main+0x416>
								(UID_2[0] == str[0]&&UID_2[1] == str[1]&&UID_2[2] == str[2]&&UID_2[3] == str[3]&&UID_2[4] == str[4])||
 80005ae:	4b53      	ldr	r3, [pc, #332]	; (80006fc <main+0x534>)
 80005b0:	785a      	ldrb	r2, [r3, #1]
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <main+0x528>)
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d111      	bne.n	80005de <main+0x416>
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <main+0x534>)
 80005bc:	789a      	ldrb	r2, [r3, #2]
 80005be:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <main+0x528>)
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d10b      	bne.n	80005de <main+0x416>
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <main+0x534>)
 80005c8:	78da      	ldrb	r2, [r3, #3]
 80005ca:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <main+0x528>)
 80005cc:	78db      	ldrb	r3, [r3, #3]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d105      	bne.n	80005de <main+0x416>
 80005d2:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <main+0x534>)
 80005d4:	791a      	ldrb	r2, [r3, #4]
 80005d6:	4b46      	ldr	r3, [pc, #280]	; (80006f0 <main+0x528>)
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d01d      	beq.n	800061a <main+0x452>
								(UID_3[0] == str[0]&&UID_3[1] == str[1]&&UID_3[2] == str[2]&&UID_3[3] == str[3]&&UID_3[4] == str[4]))
 80005de:	4b48      	ldr	r3, [pc, #288]	; (8000700 <main+0x538>)
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <main+0x528>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
								(UID_2[0] == str[0]&&UID_2[1] == str[1]&&UID_2[2] == str[2]&&UID_2[3] == str[3]&&UID_2[4] == str[4])||
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d131      	bne.n	800064e <main+0x486>
								(UID_3[0] == str[0]&&UID_3[1] == str[1]&&UID_3[2] == str[2]&&UID_3[3] == str[3]&&UID_3[4] == str[4]))
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <main+0x538>)
 80005ec:	785a      	ldrb	r2, [r3, #1]
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <main+0x528>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d12b      	bne.n	800064e <main+0x486>
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <main+0x538>)
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <main+0x528>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d125      	bne.n	800064e <main+0x486>
 8000602:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <main+0x538>)
 8000604:	78da      	ldrb	r2, [r3, #3]
 8000606:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <main+0x528>)
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	429a      	cmp	r2, r3
 800060c:	d11f      	bne.n	800064e <main+0x486>
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <main+0x538>)
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <main+0x528>)
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d119      	bne.n	800064e <main+0x486>
						{
							I2C_LCD_display_clear(&LCD);
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <main+0x520>)
 800061c:	f001 fcc6 	bl	8001fac <I2C_LCD_display_clear>
							I2C_LCD_set_cursor(&LCD, 0, 4);
 8000620:	2204      	movs	r2, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4830      	ldr	r0, [pc, #192]	; (80006e8 <main+0x520>)
 8000626:	f001 fce5 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "WELCOME!!");
 800062a:	4936      	ldr	r1, [pc, #216]	; (8000704 <main+0x53c>)
 800062c:	482e      	ldr	r0, [pc, #184]	; (80006e8 <main+0x520>)
 800062e:	f001 fcca 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 4);
 8000632:	2204      	movs	r2, #4
 8000634:	2101      	movs	r1, #1
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <main+0x520>)
 8000638:	f001 fcdc 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "WELCOME!!");
 800063c:	4931      	ldr	r1, [pc, #196]	; (8000704 <main+0x53c>)
 800063e:	482a      	ldr	r0, [pc, #168]	; (80006e8 <main+0x520>)
 8000640:	f001 fcc1 	bl	8001fc6 <I2C_LCD_print_string>
							Delayms(2000);
 8000644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000648:	f001 fb82 	bl	8001d50 <Delayms>
 800064c:	e032      	b.n	80006b4 <main+0x4ec>
						}
						else
						{
							I2C_LCD_display_clear(&LCD);
 800064e:	4826      	ldr	r0, [pc, #152]	; (80006e8 <main+0x520>)
 8000650:	f001 fcac 	bl	8001fac <I2C_LCD_display_clear>
							I2C_LCD_set_cursor(&LCD, 0, 3);
 8000654:	2203      	movs	r2, #3
 8000656:	2100      	movs	r1, #0
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <main+0x520>)
 800065a:	f001 fccb 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "RFID Error!!");
 800065e:	492a      	ldr	r1, [pc, #168]	; (8000708 <main+0x540>)
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <main+0x520>)
 8000662:	f001 fcb0 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 3);
 8000666:	2203      	movs	r2, #3
 8000668:	2101      	movs	r1, #1
 800066a:	481f      	ldr	r0, [pc, #124]	; (80006e8 <main+0x520>)
 800066c:	f001 fcc2 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "RFID Error!!");
 8000670:	4925      	ldr	r1, [pc, #148]	; (8000708 <main+0x540>)
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <main+0x520>)
 8000674:	f001 fca7 	bl	8001fc6 <I2C_LCD_print_string>
							Delayms(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f001 fb68 	bl	8001d50 <Delayms>
 8000680:	e018      	b.n	80006b4 <main+0x4ec>
						}

					}
					else
					{
						I2C_LCD_display_clear(&LCD);
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x520>)
 8000684:	f001 fc92 	bl	8001fac <I2C_LCD_display_clear>
						I2C_LCD_set_cursor(&LCD, 0, 3);
 8000688:	2203      	movs	r2, #3
 800068a:	2100      	movs	r1, #0
 800068c:	4816      	ldr	r0, [pc, #88]	; (80006e8 <main+0x520>)
 800068e:	f001 fcb1 	bl	8001ff4 <I2C_LCD_set_cursor>
						I2C_LCD_print_string(&LCD, "RFID Error!!");
 8000692:	491d      	ldr	r1, [pc, #116]	; (8000708 <main+0x540>)
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <main+0x520>)
 8000696:	f001 fc96 	bl	8001fc6 <I2C_LCD_print_string>
						I2C_LCD_set_cursor(&LCD, 1, 3);
 800069a:	2203      	movs	r2, #3
 800069c:	2101      	movs	r1, #1
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x520>)
 80006a0:	f001 fca8 	bl	8001ff4 <I2C_LCD_set_cursor>
						I2C_LCD_print_string(&LCD, "RFID Error!!");
 80006a4:	4918      	ldr	r1, [pc, #96]	; (8000708 <main+0x540>)
 80006a6:	4810      	ldr	r0, [pc, #64]	; (80006e8 <main+0x520>)
 80006a8:	f001 fc8d 	bl	8001fc6 <I2C_LCD_print_string>
						Delayms(1000);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f001 fb4e 	bl	8001d50 <Delayms>
					}
				I2C_LCD_display_clear(&LCD);
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <main+0x520>)
 80006b6:	f001 fc79 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 80006ba:	4914      	ldr	r1, [pc, #80]	; (800070c <main+0x544>)
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x520>)
 80006be:	f001 fc82 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <main+0x520>)
 80006c8:	f001 fc94 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "A: FP");
 80006cc:	4910      	ldr	r1, [pc, #64]	; (8000710 <main+0x548>)
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <main+0x520>)
 80006d0:	f001 fc79 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 8);
 80006d4:	2208      	movs	r2, #8
 80006d6:	2101      	movs	r1, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <main+0x520>)
 80006da:	f001 fc8b 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "B: RFID");
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <main+0x54c>)
 80006e0:	4801      	ldr	r0, [pc, #4]	; (80006e8 <main+0x520>)
 80006e2:	f001 fc70 	bl	8001fc6 <I2C_LCD_print_string>
			key = getChar();
 80006e6:	e5ab      	b.n	8000240 <main+0x78>
 80006e8:	20000218 	.word	0x20000218
 80006ec:	08004508 	.word	0x08004508
 80006f0:	20000208 	.word	0x20000208
 80006f4:	20000224 	.word	0x20000224
 80006f8:	20000164 	.word	0x20000164
 80006fc:	200001ec 	.word	0x200001ec
 8000700:	200001f8 	.word	0x200001f8
 8000704:	080044cc 	.word	0x080044cc
 8000708:	08004518 	.word	0x08004518
 800070c:	08004498 	.word	0x08004498
 8000710:	080044ac 	.word	0x080044ac
 8000714:	080044b4 	.word	0x080044b4

08000718 <I2C1_GPIOInits>:

}



void I2C1_GPIOInits(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <I2C1_GPIOInits+0x34>)
 8000720:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_ALOUT_OD;
 8000722:	2303      	movs	r3, #3
 8000724:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_10MHZ;
 8000726:	2301      	movs	r3, #1
 8000728:	727b      	strb	r3, [r7, #9]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800072a:	2306      	movs	r3, #6
 800072c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f8a3 	bl	800187c <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000736:	2307      	movs	r3, #7
 8000738:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f89d 	bl	800187c <GPIO_Init>
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40010c00 	.word	0x40010c00

08000750 <I2C1_Inits>:

void I2C1_Inits(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <I2C1_Inits+0x2c>)
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <I2C1_Inits+0x30>)
 8000758:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <I2C1_Inits+0x2c>)
 800075c:	2201      	movs	r2, #1
 800075e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x0;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <I2C1_Inits+0x2c>)
 8000762:	2200      	movs	r2, #0
 8000764:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <I2C1_Inits+0x2c>)
 8000768:	2200      	movs	r2, #0
 800076a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SPEED_SM;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <I2C1_Inits+0x2c>)
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <I2C1_Inits+0x34>)
 8000770:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <I2C1_Inits+0x2c>)
 8000774:	f000 fec4 	bl	8001500 <I2C_Init>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000016c 	.word	0x2000016c
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <USART_GPIOInits>:
void USART_GPIOInits(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	GPIO_Handle_t USARTPins;
	USARTPins.pGPIOx = GPIOA;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <USART_GPIOInits+0x5c>)
 8000790:	607b      	str	r3, [r7, #4]
	USARTPins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_ALOUT_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	72fb      	strb	r3, [r7, #11]
	USARTPins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_50MHZ;
 8000796:	2303      	movs	r3, #3
 8000798:	727b      	strb	r3, [r7, #9]
	// TX
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800079a:	2309      	movs	r3, #9
 800079c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 f86b 	bl	800187c <GPIO_Init>
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f865 	bl	800187c <GPIO_Init>

	//  RX
	USARTPins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_IN;
 80007b2:	2300      	movs	r3, #0
 80007b4:	727b      	strb	r3, [r7, #9]
	USARTPins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_IN_FLOAT;
 80007b6:	2301      	movs	r3, #1
 80007b8:	72fb      	strb	r3, [r7, #11]


	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80007ba:	230a      	movs	r3, #10
 80007bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f85b 	bl	800187c <GPIO_Init>
	USARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80007c6:	2303      	movs	r3, #3
 80007c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTPins);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f855 	bl	800187c <GPIO_Init>

	USART_IRQConfig(IRQ_NO_USART2, ENABLE);
 80007d2:	2101      	movs	r1, #1
 80007d4:	2026      	movs	r0, #38	; 0x26
 80007d6:	f002 fb35 	bl	8002e44 <USART_IRQConfig>

}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800

080007e8 <USART_Inits>:
void USART_Inits(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0


	Usart1.pUSARTx = USART1;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <USART_Inits+0x80>)
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <USART_Inits+0x84>)
 80007f0:	601a      	str	r2, [r3, #0]
	Usart1.USARTConfig.Mode = USART_MODE_TXRX;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <USART_Inits+0x80>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	711a      	strb	r2, [r3, #4]
	Usart1.USARTConfig.WordLength = USART_WORD_LENGTH_8;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <USART_Inits+0x80>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	735a      	strb	r2, [r3, #13]
	Usart1.USARTConfig.NuOfStopBits = USART_STOPBITS_1;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <USART_Inits+0x80>)
 8000800:	2200      	movs	r2, #0
 8000802:	731a      	strb	r2, [r3, #12]
	Usart1.USARTConfig.Baudrate = USART_STD_BAUD_57600;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <USART_Inits+0x80>)
 8000806:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800080a:	609a      	str	r2, [r3, #8]
	Usart1.USARTConfig.ParityControl = USART_PARITY_DI;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <USART_Inits+0x80>)
 800080e:	2202      	movs	r2, #2
 8000810:	739a      	strb	r2, [r3, #14]

	USART_Init(&Usart1);
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <USART_Inits+0x80>)
 8000814:	f002 fa5d 	bl	8002cd2 <USART_Init>

	Usart2.pUSARTx = USART2;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <USART_Inits+0x88>)
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <USART_Inits+0x8c>)
 800081c:	601a      	str	r2, [r3, #0]
	Usart2.USARTConfig.Mode = USART_MODE_TXRX;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <USART_Inits+0x88>)
 8000820:	2202      	movs	r2, #2
 8000822:	711a      	strb	r2, [r3, #4]
	Usart2.USARTConfig.WordLength = USART_WORD_LENGTH_8;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <USART_Inits+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	735a      	strb	r2, [r3, #13]
	Usart2.USARTConfig.NuOfStopBits = USART_STOPBITS_1;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <USART_Inits+0x88>)
 800082c:	2200      	movs	r2, #0
 800082e:	731a      	strb	r2, [r3, #12]
	Usart2.USARTConfig.Baudrate = USART_STD_BAUD_57600;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <USART_Inits+0x88>)
 8000832:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000836:	609a      	str	r2, [r3, #8]
	Usart2.USARTConfig.ParityControl = USART_PARITY_DI;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <USART_Inits+0x88>)
 800083a:	2202      	movs	r2, #2
 800083c:	739a      	strb	r2, [r3, #14]

	USART_Init(&Usart2);
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <USART_Inits+0x88>)
 8000840:	f002 fa47 	bl	8002cd2 <USART_Init>

	USART_IRQConfig(IRQ_NO_USART2, ENABLE);
 8000844:	2101      	movs	r1, #1
 8000846:	2026      	movs	r0, #38	; 0x26
 8000848:	f002 fafc 	bl	8002e44 <USART_IRQConfig>

	Delayms(200);
 800084c:	20c8      	movs	r0, #200	; 0xc8
 800084e:	f001 fa7f 	bl	8001d50 <Delayms>
	USART_PeriControl(USART1, ENABLE);
 8000852:	2101      	movs	r1, #1
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <USART_Inits+0x84>)
 8000856:	f002 fa21 	bl	8002c9c <USART_PeriControl>
	USART_PeriControl(USART2, ENABLE);
 800085a:	2101      	movs	r1, #1
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <USART_Inits+0x8c>)
 800085e:	f002 fa1d 	bl	8002c9c <USART_PeriControl>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200001b4 	.word	0x200001b4
 800086c:	40013800 	.word	0x40013800
 8000870:	20000178 	.word	0x20000178
 8000874:	40004400 	.word	0x40004400

08000878 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&Usart2);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f002 fb19 	bl	8002eb4 <USART_IRQHandling>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000178 	.word	0x20000178

0800088c <USART_ApplicationEventCallback>:
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	b093      	sub	sp, #76	; 0x4c
 8000890:	af0e      	add	r7, sp, #56	; 0x38
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	if(data_winform == 'A')
 8000898:	4bad      	ldr	r3, [pc, #692]	; (8000b50 <USART_ApplicationEventCallback+0x2c4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b41      	cmp	r3, #65	; 0x41
 800089e:	f040 80a9 	bne.w	80009f4 <USART_ApplicationEventCallback+0x168>
	{
		//FINGERPRINT
		I2C_LCD_display_clear(&LCD);
 80008a2:	48ac      	ldr	r0, [pc, #688]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80008a4:	f001 fb82 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Register Finger");
 80008a8:	49ab      	ldr	r1, [pc, #684]	; (8000b58 <USART_ApplicationEventCallback+0x2cc>)
 80008aa:	48aa      	ldr	r0, [pc, #680]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80008ac:	f001 fb8b 	bl	8001fc6 <I2C_LCD_print_string>
		CurrentNumberFinger = GetNumberOfFinger(Usart1);
 80008b0:	4eaa      	ldr	r6, [pc, #680]	; (8000b5c <USART_ApplicationEventCallback+0x2d0>)
 80008b2:	466d      	mov	r5, sp
 80008b4:	f106 0410 	add.w	r4, r6, #16
 80008b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	602b      	str	r3, [r5, #0]
 80008c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008c8:	f002 fed2 	bl	8003670 <GetNumberOfFinger>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4ba3      	ldr	r3, [pc, #652]	; (8000b60 <USART_ApplicationEventCallback+0x2d4>)
 80008d2:	701a      	strb	r2, [r3, #0]
		if(CurrentNumberFinger > 255)
		{
			CurrentNumberFinger = 1;
		}
		I2C_LCD_set_cursor(&LCD, 1, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	489e      	ldr	r0, [pc, #632]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80008da:	f001 fb8b 	bl	8001ff4 <I2C_LCD_set_cursor>
		sprintf(fp_str,"Number ID: %d", CurrentNumberFinger);
 80008de:	4ba0      	ldr	r3, [pc, #640]	; (8000b60 <USART_ApplicationEventCallback+0x2d4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	499f      	ldr	r1, [pc, #636]	; (8000b64 <USART_ApplicationEventCallback+0x2d8>)
 80008e6:	48a0      	ldr	r0, [pc, #640]	; (8000b68 <USART_ApplicationEventCallback+0x2dc>)
 80008e8:	f003 f9b8 	bl	8003c5c <siprintf>
		I2C_LCD_print_string(&LCD, fp_str);
 80008ec:	499e      	ldr	r1, [pc, #632]	; (8000b68 <USART_ApplicationEventCallback+0x2dc>)
 80008ee:	4899      	ldr	r0, [pc, #612]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80008f0:	f001 fb69 	bl	8001fc6 <I2C_LCD_print_string>
		register_FingerResult =  RegistryNewFinger(Usart1, CurrentNumberFinger + 1, LCD);
 80008f4:	4b9a      	ldr	r3, [pc, #616]	; (8000b60 <USART_ApplicationEventCallback+0x2d4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3301      	adds	r3, #1
 80008fc:	b29c      	uxth	r4, r3
 80008fe:	4e97      	ldr	r6, [pc, #604]	; (8000b5c <USART_ApplicationEventCallback+0x2d0>)
 8000900:	4a94      	ldr	r2, [pc, #592]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000902:	ab0a      	add	r3, sp, #40	; 0x28
 8000904:	ca07      	ldmia	r2, {r0, r1, r2}
 8000906:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800090a:	9409      	str	r4, [sp, #36]	; 0x24
 800090c:	466d      	mov	r5, sp
 800090e:	f106 0410 	add.w	r4, r6, #16
 8000912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	602b      	str	r3, [r5, #0]
 800091e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000922:	f002 feeb 	bl	80036fc <RegistryNewFinger>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b90      	ldr	r3, [pc, #576]	; (8000b6c <USART_ApplicationEventCallback+0x2e0>)
 800092c:	701a      	strb	r2, [r3, #0]

		if(register_FingerResult == FP_NOFINGER)
 800092e:	4b8f      	ldr	r3, [pc, #572]	; (8000b6c <USART_ApplicationEventCallback+0x2e0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d10b      	bne.n	800094e <USART_ApplicationEventCallback+0xc2>
		{
			I2C_LCD_display_clear(&LCD);
 8000936:	4887      	ldr	r0, [pc, #540]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000938:	f001 fb38 	bl	8001fac <I2C_LCD_display_clear>
			I2C_LCD_print_string(&LCD, "Finger Not Found");
 800093c:	498c      	ldr	r1, [pc, #560]	; (8000b70 <USART_ApplicationEventCallback+0x2e4>)
 800093e:	4885      	ldr	r0, [pc, #532]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000940:	f001 fb41 	bl	8001fc6 <I2C_LCD_print_string>
			Delayms(500);
 8000944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000948:	f001 fa02 	bl	8001d50 <Delayms>
 800094c:	e031      	b.n	80009b2 <USART_ApplicationEventCallback+0x126>
		}
		else if (register_FingerResult == FP_OK)
 800094e:	4b87      	ldr	r3, [pc, #540]	; (8000b6c <USART_ApplicationEventCallback+0x2e0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d114      	bne.n	8000980 <USART_ApplicationEventCallback+0xf4>
		{
			I2C_LCD_display_clear(&LCD);
 8000956:	487f      	ldr	r0, [pc, #508]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000958:	f001 fb28 	bl	8001fac <I2C_LCD_display_clear>
			I2C_LCD_print_string(&LCD, "Registry Finger");
 800095c:	4985      	ldr	r1, [pc, #532]	; (8000b74 <USART_ApplicationEventCallback+0x2e8>)
 800095e:	487d      	ldr	r0, [pc, #500]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000960:	f001 fb31 	bl	8001fc6 <I2C_LCD_print_string>
			I2C_LCD_set_cursor(&LCD, 1, 5);
 8000964:	2205      	movs	r2, #5
 8000966:	2101      	movs	r1, #1
 8000968:	487a      	ldr	r0, [pc, #488]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 800096a:	f001 fb43 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD, "DONE :>");
 800096e:	4982      	ldr	r1, [pc, #520]	; (8000b78 <USART_ApplicationEventCallback+0x2ec>)
 8000970:	4878      	ldr	r0, [pc, #480]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000972:	f001 fb28 	bl	8001fc6 <I2C_LCD_print_string>
			Delayms(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f001 f9e9 	bl	8001d50 <Delayms>
 800097e:	e018      	b.n	80009b2 <USART_ApplicationEventCallback+0x126>
		}
		else
		{
			I2C_LCD_display_clear(&LCD);
 8000980:	4874      	ldr	r0, [pc, #464]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000982:	f001 fb13 	bl	8001fac <I2C_LCD_display_clear>
			I2C_LCD_set_cursor(&LCD, 0, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2100      	movs	r1, #0
 800098a:	4872      	ldr	r0, [pc, #456]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 800098c:	f001 fb32 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD, "Finger Error!!");
 8000990:	497a      	ldr	r1, [pc, #488]	; (8000b7c <USART_ApplicationEventCallback+0x2f0>)
 8000992:	4870      	ldr	r0, [pc, #448]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000994:	f001 fb17 	bl	8001fc6 <I2C_LCD_print_string>
			I2C_LCD_set_cursor(&LCD, 1, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	486d      	ldr	r0, [pc, #436]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 800099e:	f001 fb29 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD, "Finger Error!!");
 80009a2:	4976      	ldr	r1, [pc, #472]	; (8000b7c <USART_ApplicationEventCallback+0x2f0>)
 80009a4:	486b      	ldr	r0, [pc, #428]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009a6:	f001 fb0e 	bl	8001fc6 <I2C_LCD_print_string>
			Delayms(500);
 80009aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ae:	f001 f9cf 	bl	8001d50 <Delayms>
		}
		I2C_LCD_display_clear(&LCD);
 80009b2:	4868      	ldr	r0, [pc, #416]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009b4:	f001 fafa 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 80009b8:	4971      	ldr	r1, [pc, #452]	; (8000b80 <USART_ApplicationEventCallback+0x2f4>)
 80009ba:	4866      	ldr	r0, [pc, #408]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009bc:	f001 fb03 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4863      	ldr	r0, [pc, #396]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009c6:	f001 fb15 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "A: FP");
 80009ca:	496e      	ldr	r1, [pc, #440]	; (8000b84 <USART_ApplicationEventCallback+0x2f8>)
 80009cc:	4861      	ldr	r0, [pc, #388]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009ce:	f001 fafa 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 8);
 80009d2:	2208      	movs	r2, #8
 80009d4:	2101      	movs	r1, #1
 80009d6:	485f      	ldr	r0, [pc, #380]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009d8:	f001 fb0c 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "B: RFID");
 80009dc:	496a      	ldr	r1, [pc, #424]	; (8000b88 <USART_ApplicationEventCallback+0x2fc>)
 80009de:	485d      	ldr	r0, [pc, #372]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 80009e0:	f001 faf1 	bl	8001fc6 <I2C_LCD_print_string>
		HAL_UART_Transmit(&Usart2, ack_fp, 1, 1000);
 80009e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e8:	2201      	movs	r2, #1
 80009ea:	4968      	ldr	r1, [pc, #416]	; (8000b8c <USART_ApplicationEventCallback+0x300>)
 80009ec:	4868      	ldr	r0, [pc, #416]	; (8000b90 <USART_ApplicationEventCallback+0x304>)
 80009ee:	f002 fb83 	bl	80030f8 <HAL_UART_Transmit>
 80009f2:	e3c3      	b.n	800117c <USART_ApplicationEventCallback+0x8f0>

	}
	else if (data_winform == 'B')
 80009f4:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <USART_ApplicationEventCallback+0x2c4>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b42      	cmp	r3, #66	; 0x42
 80009fa:	f040 8158 	bne.w	8000cae <USART_ApplicationEventCallback+0x422>
	{
		uint8_t r_counter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
		char rc_key = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	723b      	strb	r3, [r7, #8]
		//RFID
		I2C_LCD_display_clear(&LCD);
 8000a06:	4853      	ldr	r0, [pc, #332]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a08:	f001 fad0 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_set_cursor(&LCD, 0, 4);
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4850      	ldr	r0, [pc, #320]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a12:	f001 faef 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "ADD RFID");
 8000a16:	495f      	ldr	r1, [pc, #380]	; (8000b94 <USART_ApplicationEventCallback+0x308>)
 8000a18:	484e      	ldr	r0, [pc, #312]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a1a:	f001 fad4 	bl	8001fc6 <I2C_LCD_print_string>
		Delayms(700);
 8000a1e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000a22:	f001 f995 	bl	8001d50 <Delayms>
		I2C_LCD_display_clear(&LCD);
 8000a26:	484b      	ldr	r0, [pc, #300]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a28:	f001 fac0 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Choose The Card");
 8000a2c:	495a      	ldr	r1, [pc, #360]	; (8000b98 <USART_ApplicationEventCallback+0x30c>)
 8000a2e:	4849      	ldr	r0, [pc, #292]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a30:	f001 fac9 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4846      	ldr	r0, [pc, #280]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a3a:	f001 fadb 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "To Replace:1,2,3");
 8000a3e:	4957      	ldr	r1, [pc, #348]	; (8000b9c <USART_ApplicationEventCallback+0x310>)
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a42:	f001 fac0 	bl	8001fc6 <I2C_LCD_print_string>
		do
		{
			while((rc_key = getChar()) == 0 );
 8000a46:	bf00      	nop
 8000a48:	f000 fc56 	bl	80012f8 <getChar>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	723b      	strb	r3, [r7, #8]
 8000a50:	7a3b      	ldrb	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f8      	beq.n	8000a48 <USART_ApplicationEventCallback+0x1bc>
			if(rc_key == '1' ||rc_key == '2' ||rc_key == '3')
 8000a56:	7a3b      	ldrb	r3, [r7, #8]
 8000a58:	2b31      	cmp	r3, #49	; 0x31
 8000a5a:	d005      	beq.n	8000a68 <USART_ApplicationEventCallback+0x1dc>
 8000a5c:	7a3b      	ldrb	r3, [r7, #8]
 8000a5e:	2b32      	cmp	r3, #50	; 0x32
 8000a60:	d002      	beq.n	8000a68 <USART_ApplicationEventCallback+0x1dc>
 8000a62:	7a3b      	ldrb	r3, [r7, #8]
 8000a64:	2b33      	cmp	r3, #51	; 0x33
 8000a66:	d102      	bne.n	8000a6e <USART_ApplicationEventCallback+0x1e2>
			{
				r_counter++;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
			}

		}while(r_counter < 1);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0e9      	beq.n	8000a48 <USART_ApplicationEventCallback+0x1bc>
		r_counter = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
		sprintf(str_it,"Your number: %x",rc_key);
 8000a78:	7a3b      	ldrb	r3, [r7, #8]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4948      	ldr	r1, [pc, #288]	; (8000ba0 <USART_ApplicationEventCallback+0x314>)
 8000a7e:	4849      	ldr	r0, [pc, #292]	; (8000ba4 <USART_ApplicationEventCallback+0x318>)
 8000a80:	f003 f8ec 	bl	8003c5c <siprintf>
		I2C_LCD_display_clear(&LCD);
 8000a84:	4833      	ldr	r0, [pc, #204]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a86:	f001 fa91 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, str_it);
 8000a8a:	4946      	ldr	r1, [pc, #280]	; (8000ba4 <USART_ApplicationEventCallback+0x318>)
 8000a8c:	4831      	ldr	r0, [pc, #196]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a8e:	f001 fa9a 	bl	8001fc6 <I2C_LCD_print_string>
		Delayms(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a96:	f001 f95b 	bl	8001d50 <Delayms>

		I2C_LCD_display_clear(&LCD);
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000a9c:	f001 fa86 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_set_cursor(&LCD, 0, 2);
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	482b      	ldr	r0, [pc, #172]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000aa6:	f001 faa5 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "Put Ur Card!!");
 8000aaa:	493f      	ldr	r1, [pc, #252]	; (8000ba8 <USART_ApplicationEventCallback+0x31c>)
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000aae:	f001 fa8a 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 2);
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4827      	ldr	r0, [pc, #156]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000ab8:	f001 fa9c 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "Put Ur Card!!");
 8000abc:	493a      	ldr	r1, [pc, #232]	; (8000ba8 <USART_ApplicationEventCallback+0x31c>)
 8000abe:	4825      	ldr	r0, [pc, #148]	; (8000b54 <USART_ApplicationEventCallback+0x2c8>)
 8000ac0:	f001 fa81 	bl	8001fc6 <I2C_LCD_print_string>
		while((status = MFRC522_Request(PICC_REQIDL, str)) != MI_OK){}
 8000ac4:	bf00      	nop
 8000ac6:	4939      	ldr	r1, [pc, #228]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f001 fd1e 	bl	800250a <MFRC522_Request>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <USART_ApplicationEventCallback+0x324>)
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <USART_ApplicationEventCallback+0x324>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f3      	bne.n	8000ac6 <USART_ApplicationEventCallback+0x23a>
			status = MFRC522_Anticoll(str);
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000ae0:	f001 fd38 	bl	8002554 <MFRC522_Anticoll>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <USART_ApplicationEventCallback+0x324>)
 8000aea:	701a      	strb	r2, [r3, #0]
			  if(status == MI_OK)
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <USART_ApplicationEventCallback+0x324>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f040 80a2 	bne.w	8000c3a <USART_ApplicationEventCallback+0x3ae>
			  {
				  sprintf(str2,"UID_%x: %x,%x,%x,%x", rc_key,str[0], str[1], str[2],str[3]);
 8000af6:	7a3a      	ldrb	r2, [r7, #8]
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461c      	mov	r4, r3
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b0c:	78db      	ldrb	r3, [r3, #3]
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	9001      	str	r0, [sp, #4]
 8000b12:	9100      	str	r1, [sp, #0]
 8000b14:	4623      	mov	r3, r4
 8000b16:	4927      	ldr	r1, [pc, #156]	; (8000bb4 <USART_ApplicationEventCallback+0x328>)
 8000b18:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <USART_ApplicationEventCallback+0x32c>)
 8000b1a:	f003 f89f 	bl	8003c5c <siprintf>
				  if(rc_key == '1')
 8000b1e:	7a3b      	ldrb	r3, [r7, #8]
 8000b20:	2b31      	cmp	r3, #49	; 0x31
 8000b22:	d14d      	bne.n	8000bc0 <USART_ApplicationEventCallback+0x334>
				  {
					  UID_1[0] = str[0];
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <USART_ApplicationEventCallback+0x330>)
 8000b2a:	701a      	strb	r2, [r3, #0]
					  UID_1[1] = str[1];
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b2e:	785a      	ldrb	r2, [r3, #1]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <USART_ApplicationEventCallback+0x330>)
 8000b32:	705a      	strb	r2, [r3, #1]
					  UID_1[2] = str[2];
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b36:	789a      	ldrb	r2, [r3, #2]
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <USART_ApplicationEventCallback+0x330>)
 8000b3a:	709a      	strb	r2, [r3, #2]
					  UID_1[3] = str[3];
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b3e:	78da      	ldrb	r2, [r3, #3]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <USART_ApplicationEventCallback+0x330>)
 8000b42:	70da      	strb	r2, [r3, #3]
					  UID_1[4] = str[4];
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <USART_ApplicationEventCallback+0x320>)
 8000b46:	791a      	ldrb	r2, [r3, #4]
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <USART_ApplicationEventCallback+0x330>)
 8000b4a:	711a      	strb	r2, [r3, #4]
 8000b4c:	e064      	b.n	8000c18 <USART_ApplicationEventCallback+0x38c>
 8000b4e:	bf00      	nop
 8000b50:	2000011c 	.word	0x2000011c
 8000b54:	20000218 	.word	0x20000218
 8000b58:	08004528 	.word	0x08004528
 8000b5c:	200001b4 	.word	0x200001b4
 8000b60:	200001f1 	.word	0x200001f1
 8000b64:	08004538 	.word	0x08004538
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	08004548 	.word	0x08004548
 8000b74:	0800455c 	.word	0x0800455c
 8000b78:	0800456c 	.word	0x0800456c
 8000b7c:	080044f8 	.word	0x080044f8
 8000b80:	08004498 	.word	0x08004498
 8000b84:	080044ac 	.word	0x080044ac
 8000b88:	080044b4 	.word	0x080044b4
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	20000178 	.word	0x20000178
 8000b94:	08004574 	.word	0x08004574
 8000b98:	08004580 	.word	0x08004580
 8000b9c:	08004590 	.word	0x08004590
 8000ba0:	080045a4 	.word	0x080045a4
 8000ba4:	20000148 	.word	0x20000148
 8000ba8:	080045b4 	.word	0x080045b4
 8000bac:	20000208 	.word	0x20000208
 8000bb0:	20000224 	.word	0x20000224
 8000bb4:	080045c4 	.word	0x080045c4
 8000bb8:	20000134 	.word	0x20000134
 8000bbc:	20000164 	.word	0x20000164
				  }
				  else if(rc_key == '2')
 8000bc0:	7a3b      	ldrb	r3, [r7, #8]
 8000bc2:	2b32      	cmp	r3, #50	; 0x32
 8000bc4:	d114      	bne.n	8000bf0 <USART_ApplicationEventCallback+0x364>
				  {
					  UID_2[0] = str[0];
 8000bc6:	4baa      	ldr	r3, [pc, #680]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4baa      	ldr	r3, [pc, #680]	; (8000e74 <USART_ApplicationEventCallback+0x5e8>)
 8000bcc:	701a      	strb	r2, [r3, #0]
					  UID_2[1] = str[1];
 8000bce:	4ba8      	ldr	r3, [pc, #672]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000bd0:	785a      	ldrb	r2, [r3, #1]
 8000bd2:	4ba8      	ldr	r3, [pc, #672]	; (8000e74 <USART_ApplicationEventCallback+0x5e8>)
 8000bd4:	705a      	strb	r2, [r3, #1]
					  UID_2[2] = str[2];
 8000bd6:	4ba6      	ldr	r3, [pc, #664]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000bd8:	789a      	ldrb	r2, [r3, #2]
 8000bda:	4ba6      	ldr	r3, [pc, #664]	; (8000e74 <USART_ApplicationEventCallback+0x5e8>)
 8000bdc:	709a      	strb	r2, [r3, #2]
					  UID_2[3] = str[3];
 8000bde:	4ba4      	ldr	r3, [pc, #656]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000be0:	78da      	ldrb	r2, [r3, #3]
 8000be2:	4ba4      	ldr	r3, [pc, #656]	; (8000e74 <USART_ApplicationEventCallback+0x5e8>)
 8000be4:	70da      	strb	r2, [r3, #3]
					  UID_2[4] = str[4];
 8000be6:	4ba2      	ldr	r3, [pc, #648]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000be8:	791a      	ldrb	r2, [r3, #4]
 8000bea:	4ba2      	ldr	r3, [pc, #648]	; (8000e74 <USART_ApplicationEventCallback+0x5e8>)
 8000bec:	711a      	strb	r2, [r3, #4]
 8000bee:	e013      	b.n	8000c18 <USART_ApplicationEventCallback+0x38c>
				  }
				  else
				  {
					  UID_3[0] = str[0];
 8000bf0:	4b9f      	ldr	r3, [pc, #636]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4ba0      	ldr	r3, [pc, #640]	; (8000e78 <USART_ApplicationEventCallback+0x5ec>)
 8000bf6:	701a      	strb	r2, [r3, #0]
					  UID_3[1] = str[1];
 8000bf8:	4b9d      	ldr	r3, [pc, #628]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000bfa:	785a      	ldrb	r2, [r3, #1]
 8000bfc:	4b9e      	ldr	r3, [pc, #632]	; (8000e78 <USART_ApplicationEventCallback+0x5ec>)
 8000bfe:	705a      	strb	r2, [r3, #1]
					  UID_3[2] = str[2];
 8000c00:	4b9b      	ldr	r3, [pc, #620]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000c02:	789a      	ldrb	r2, [r3, #2]
 8000c04:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <USART_ApplicationEventCallback+0x5ec>)
 8000c06:	709a      	strb	r2, [r3, #2]
					  UID_3[3] = str[3];
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000c0a:	78da      	ldrb	r2, [r3, #3]
 8000c0c:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <USART_ApplicationEventCallback+0x5ec>)
 8000c0e:	70da      	strb	r2, [r3, #3]
					  UID_3[4] = str[4];
 8000c10:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <USART_ApplicationEventCallback+0x5e4>)
 8000c12:	791a      	ldrb	r2, [r3, #4]
 8000c14:	4b98      	ldr	r3, [pc, #608]	; (8000e78 <USART_ApplicationEventCallback+0x5ec>)
 8000c16:	711a      	strb	r2, [r3, #4]
				  }
				  I2C_LCD_display_clear(&LCD);
 8000c18:	4898      	ldr	r0, [pc, #608]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c1a:	f001 f9c7 	bl	8001fac <I2C_LCD_display_clear>
				  I2C_LCD_set_cursor(&LCD, 1, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	4896      	ldr	r0, [pc, #600]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c24:	f001 f9e6 	bl	8001ff4 <I2C_LCD_set_cursor>
				  I2C_LCD_print_string(&LCD, str2);
 8000c28:	4995      	ldr	r1, [pc, #596]	; (8000e80 <USART_ApplicationEventCallback+0x5f4>)
 8000c2a:	4894      	ldr	r0, [pc, #592]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c2c:	f001 f9cb 	bl	8001fc6 <I2C_LCD_print_string>
				  Delayms(2000);
 8000c30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c34:	f001 f88c 	bl	8001d50 <Delayms>
 8000c38:	e018      	b.n	8000c6c <USART_ApplicationEventCallback+0x3e0>
			  }
			  else
			  {
				  I2C_LCD_display_clear(&LCD);
 8000c3a:	4890      	ldr	r0, [pc, #576]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c3c:	f001 f9b6 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_set_cursor(&LCD, 0, 3);
 8000c40:	2203      	movs	r2, #3
 8000c42:	2100      	movs	r1, #0
 8000c44:	488d      	ldr	r0, [pc, #564]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c46:	f001 f9d5 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "RFID Error!!");
 8000c4a:	498e      	ldr	r1, [pc, #568]	; (8000e84 <USART_ApplicationEventCallback+0x5f8>)
 8000c4c:	488b      	ldr	r0, [pc, #556]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c4e:	f001 f9ba 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 3);
 8000c52:	2203      	movs	r2, #3
 8000c54:	2101      	movs	r1, #1
 8000c56:	4889      	ldr	r0, [pc, #548]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c58:	f001 f9cc 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "RFID Error!!");
 8000c5c:	4989      	ldr	r1, [pc, #548]	; (8000e84 <USART_ApplicationEventCallback+0x5f8>)
 8000c5e:	4887      	ldr	r0, [pc, #540]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c60:	f001 f9b1 	bl	8001fc6 <I2C_LCD_print_string>
				Delayms(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f001 f872 	bl	8001d50 <Delayms>
			  }
				I2C_LCD_display_clear(&LCD);
 8000c6c:	4883      	ldr	r0, [pc, #524]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c6e:	f001 f99d 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8000c72:	4985      	ldr	r1, [pc, #532]	; (8000e88 <USART_ApplicationEventCallback+0x5fc>)
 8000c74:	4881      	ldr	r0, [pc, #516]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c76:	f001 f9a6 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	487f      	ldr	r0, [pc, #508]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c80:	f001 f9b8 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "A: FP");
 8000c84:	4981      	ldr	r1, [pc, #516]	; (8000e8c <USART_ApplicationEventCallback+0x600>)
 8000c86:	487d      	ldr	r0, [pc, #500]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c88:	f001 f99d 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 8);
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	2101      	movs	r1, #1
 8000c90:	487a      	ldr	r0, [pc, #488]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c92:	f001 f9af 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "B: RFID");
 8000c96:	497e      	ldr	r1, [pc, #504]	; (8000e90 <USART_ApplicationEventCallback+0x604>)
 8000c98:	4878      	ldr	r0, [pc, #480]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000c9a:	f001 f994 	bl	8001fc6 <I2C_LCD_print_string>
				HAL_UART_Transmit(&Usart2, ack_rfid, 1, 1000);
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	497b      	ldr	r1, [pc, #492]	; (8000e94 <USART_ApplicationEventCallback+0x608>)
 8000ca6:	487c      	ldr	r0, [pc, #496]	; (8000e98 <USART_ApplicationEventCallback+0x60c>)
 8000ca8:	f002 fa26 	bl	80030f8 <HAL_UART_Transmit>
 8000cac:	e266      	b.n	800117c <USART_ApplicationEventCallback+0x8f0>

	}
	else if(data_winform == 'C')
 8000cae:	4b7b      	ldr	r3, [pc, #492]	; (8000e9c <USART_ApplicationEventCallback+0x610>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b43      	cmp	r3, #67	; 0x43
 8000cb4:	f040 8142 	bne.w	8000f3c <USART_ApplicationEventCallback+0x6b0>
	{
		char r_key;
		uint8_t r_counter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73bb      	strb	r3, [r7, #14]

		//PASSWORD
		I2C_LCD_display_clear(&LCD);
 8000cbc:	486f      	ldr	r0, [pc, #444]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000cbe:	f001 f975 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Change Password");
 8000cc2:	4977      	ldr	r1, [pc, #476]	; (8000ea0 <USART_ApplicationEventCallback+0x614>)
 8000cc4:	486d      	ldr	r0, [pc, #436]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000cc6:	f001 f97e 	bl	8001fc6 <I2C_LCD_print_string>
		Delayms(500);
 8000cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cce:	f001 f83f 	bl	8001d50 <Delayms>
		I2C_LCD_display_clear(&LCD);
 8000cd2:	486a      	ldr	r0, [pc, #424]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000cd4:	f001 f96a 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_set_cursor(&LCD, 0, 4);
 8000cd8:	2204      	movs	r2, #4
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4867      	ldr	r0, [pc, #412]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000cde:	f001 f989 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "PassWord");
 8000ce2:	4970      	ldr	r1, [pc, #448]	; (8000ea4 <USART_ApplicationEventCallback+0x618>)
 8000ce4:	4865      	ldr	r0, [pc, #404]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000ce6:	f001 f96e 	bl	8001fc6 <I2C_LCD_print_string>

		do
		{
			while((r_key = getChar()) == 0 );
 8000cea:	bf00      	nop
 8000cec:	f000 fb04 	bl	80012f8 <getChar>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	727b      	strb	r3, [r7, #9]
 8000cf4:	7a7b      	ldrb	r3, [r7, #9]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f8      	beq.n	8000cec <USART_ApplicationEventCallback+0x460>
			if(r_key != '*' && r_key != '#' && r_key != 'D' && r_key != 0 && r_key != 0x01 && r_key !='A' && r_key != 'B')
 8000cfa:	7a7b      	ldrb	r3, [r7, #9]
 8000cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8000cfe:	d02f      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d00:	7a7b      	ldrb	r3, [r7, #9]
 8000d02:	2b23      	cmp	r3, #35	; 0x23
 8000d04:	d02c      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d06:	7a7b      	ldrb	r3, [r7, #9]
 8000d08:	2b44      	cmp	r3, #68	; 0x44
 8000d0a:	d029      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d0c:	7a7b      	ldrb	r3, [r7, #9]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d12:	7a7b      	ldrb	r3, [r7, #9]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d023      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d18:	7a7b      	ldrb	r3, [r7, #9]
 8000d1a:	2b41      	cmp	r3, #65	; 0x41
 8000d1c:	d020      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
 8000d1e:	7a7b      	ldrb	r3, [r7, #9]
 8000d20:	2b42      	cmp	r3, #66	; 0x42
 8000d22:	d01d      	beq.n	8000d60 <USART_ApplicationEventCallback+0x4d4>
			{
				getPassword_temp1[r_counter] = r_key;
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	4960      	ldr	r1, [pc, #384]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000d28:	7a7a      	ldrb	r2, [r7, #9]
 8000d2a:	54ca      	strb	r2, [r1, r3]
				Delayms(100);
 8000d2c:	2064      	movs	r0, #100	; 0x64
 8000d2e:	f001 f80f 	bl	8001d50 <Delayms>
				for(uint8_t i = 0 ; i <= r_counter; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	737b      	strb	r3, [r7, #13]
 8000d36:	e00c      	b.n	8000d52 <USART_ApplicationEventCallback+0x4c6>
				{
				I2C_LCD_set_cursor(&LCD, 1, i);
 8000d38:	7b7b      	ldrb	r3, [r7, #13]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	484f      	ldr	r0, [pc, #316]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000d40:	f001 f958 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_char(&LCD, '*');
 8000d44:	212a      	movs	r1, #42	; 0x2a
 8000d46:	484d      	ldr	r0, [pc, #308]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000d48:	f001 f920 	bl	8001f8c <I2C_LCD_print_char>
				for(uint8_t i = 0 ; i <= r_counter; i++)
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	737b      	strb	r3, [r7, #13]
 8000d52:	7b7a      	ldrb	r2, [r7, #13]
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d9ee      	bls.n	8000d38 <USART_ApplicationEventCallback+0x4ac>
				}
				r_counter++;
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73bb      	strb	r3, [r7, #14]
			}

		}while(r_counter < 4);
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d9c2      	bls.n	8000cec <USART_ApplicationEventCallback+0x460>

		r_counter = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73bb      	strb	r3, [r7, #14]
		I2C_LCD_display_clear(&LCD);
 8000d6a:	4844      	ldr	r0, [pc, #272]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000d6c:	f001 f91e 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Confirm Password:");
 8000d70:	494e      	ldr	r1, [pc, #312]	; (8000eac <USART_ApplicationEventCallback+0x620>)
 8000d72:	4842      	ldr	r0, [pc, #264]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000d74:	f001 f927 	bl	8001fc6 <I2C_LCD_print_string>
		do
		{
			while((r_key = getChar()) == 0 );
 8000d78:	bf00      	nop
 8000d7a:	f000 fabd 	bl	80012f8 <getChar>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	727b      	strb	r3, [r7, #9]
 8000d82:	7a7b      	ldrb	r3, [r7, #9]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f8      	beq.n	8000d7a <USART_ApplicationEventCallback+0x4ee>
			if(r_key != '*' && r_key != '#' && r_key != 'D' && r_key != 0 && r_key != 0x01 && r_key !='A' && r_key != 'B')
 8000d88:	7a7b      	ldrb	r3, [r7, #9]
 8000d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d8c:	d02f      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000d8e:	7a7b      	ldrb	r3, [r7, #9]
 8000d90:	2b23      	cmp	r3, #35	; 0x23
 8000d92:	d02c      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000d94:	7a7b      	ldrb	r3, [r7, #9]
 8000d96:	2b44      	cmp	r3, #68	; 0x44
 8000d98:	d029      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000d9a:	7a7b      	ldrb	r3, [r7, #9]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d026      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000da0:	7a7b      	ldrb	r3, [r7, #9]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d023      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000da6:	7a7b      	ldrb	r3, [r7, #9]
 8000da8:	2b41      	cmp	r3, #65	; 0x41
 8000daa:	d020      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
 8000dac:	7a7b      	ldrb	r3, [r7, #9]
 8000dae:	2b42      	cmp	r3, #66	; 0x42
 8000db0:	d01d      	beq.n	8000dee <USART_ApplicationEventCallback+0x562>
			{
				getPassword_temp2[r_counter] = r_key;
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	493e      	ldr	r1, [pc, #248]	; (8000eb0 <USART_ApplicationEventCallback+0x624>)
 8000db6:	7a7a      	ldrb	r2, [r7, #9]
 8000db8:	54ca      	strb	r2, [r1, r3]
				Delayms(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f000 ffc8 	bl	8001d50 <Delayms>
				for(uint8_t i = 0 ; i <= r_counter; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	733b      	strb	r3, [r7, #12]
 8000dc4:	e00c      	b.n	8000de0 <USART_ApplicationEventCallback+0x554>
				{
					I2C_LCD_set_cursor(&LCD, 1, i);
 8000dc6:	7b3b      	ldrb	r3, [r7, #12]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2101      	movs	r1, #1
 8000dcc:	482b      	ldr	r0, [pc, #172]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000dce:	f001 f911 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_char(&LCD, '*');
 8000dd2:	212a      	movs	r1, #42	; 0x2a
 8000dd4:	4829      	ldr	r0, [pc, #164]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000dd6:	f001 f8d9 	bl	8001f8c <I2C_LCD_print_char>
				for(uint8_t i = 0 ; i <= r_counter; i++)
 8000dda:	7b3b      	ldrb	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	733b      	strb	r3, [r7, #12]
 8000de0:	7b3a      	ldrb	r2, [r7, #12]
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d9ee      	bls.n	8000dc6 <USART_ApplicationEventCallback+0x53a>
				}
				r_counter++;
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	3301      	adds	r3, #1
 8000dec:	73bb      	strb	r3, [r7, #14]
			}
			if(r_counter == 4)
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d17e      	bne.n	8000ef2 <USART_ApplicationEventCallback+0x666>
			{
				if(getPassword_temp1[0] == getPassword_temp2[0] && getPassword_temp1[1] == getPassword_temp2[1] &&
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <USART_ApplicationEventCallback+0x624>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d15f      	bne.n	8000ec0 <USART_ApplicationEventCallback+0x634>
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e02:	785a      	ldrb	r2, [r3, #1]
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <USART_ApplicationEventCallback+0x624>)
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d159      	bne.n	8000ec0 <USART_ApplicationEventCallback+0x634>
					getPassword_temp1[2] == getPassword_temp2[2] && getPassword_temp1[3] == getPassword_temp2[3])
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e0e:	789a      	ldrb	r2, [r3, #2]
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <USART_ApplicationEventCallback+0x624>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
				if(getPassword_temp1[0] == getPassword_temp2[0] && getPassword_temp1[1] == getPassword_temp2[1] &&
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d153      	bne.n	8000ec0 <USART_ApplicationEventCallback+0x634>
					getPassword_temp1[2] == getPassword_temp2[2] && getPassword_temp1[3] == getPassword_temp2[3])
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e1a:	78da      	ldrb	r2, [r3, #3]
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <USART_ApplicationEventCallback+0x624>)
 8000e1e:	78db      	ldrb	r3, [r3, #3]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d14d      	bne.n	8000ec0 <USART_ApplicationEventCallback+0x634>
				{
					password[0] = getPassword_temp1[0];
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <USART_ApplicationEventCallback+0x628>)
 8000e2a:	701a      	strb	r2, [r3, #0]
					password[1] = getPassword_temp1[1];
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e2e:	785a      	ldrb	r2, [r3, #1]
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <USART_ApplicationEventCallback+0x628>)
 8000e32:	705a      	strb	r2, [r3, #1]
					password[2] = getPassword_temp1[2];
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e36:	789a      	ldrb	r2, [r3, #2]
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <USART_ApplicationEventCallback+0x628>)
 8000e3a:	709a      	strb	r2, [r3, #2]
					password[3] = getPassword_temp1[3];
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <USART_ApplicationEventCallback+0x61c>)
 8000e3e:	78da      	ldrb	r2, [r3, #3]
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <USART_ApplicationEventCallback+0x628>)
 8000e42:	70da      	strb	r2, [r3, #3]
					I2C_LCD_display_clear(&LCD);
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000e46:	f001 f8b1 	bl	8001fac <I2C_LCD_display_clear>
					I2C_LCD_print_string(&LCD, "Registry Pass");
 8000e4a:	491b      	ldr	r1, [pc, #108]	; (8000eb8 <USART_ApplicationEventCallback+0x62c>)
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000e4e:	f001 f8ba 	bl	8001fc6 <I2C_LCD_print_string>
					I2C_LCD_set_cursor(&LCD, 1, 5);
 8000e52:	2205      	movs	r2, #5
 8000e54:	2101      	movs	r1, #1
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000e58:	f001 f8cc 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "DONE :>");
 8000e5c:	4917      	ldr	r1, [pc, #92]	; (8000ebc <USART_ApplicationEventCallback+0x630>)
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <USART_ApplicationEventCallback+0x5f0>)
 8000e60:	f001 f8b1 	bl	8001fc6 <I2C_LCD_print_string>
					Delayms(2000);
 8000e64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e68:	f000 ff72 	bl	8001d50 <Delayms>
 8000e6c:	e041      	b.n	8000ef2 <USART_ApplicationEventCallback+0x666>
 8000e6e:	bf00      	nop
 8000e70:	20000208 	.word	0x20000208
 8000e74:	200001ec 	.word	0x200001ec
 8000e78:	200001f8 	.word	0x200001f8
 8000e7c:	20000218 	.word	0x20000218
 8000e80:	20000134 	.word	0x20000134
 8000e84:	08004518 	.word	0x08004518
 8000e88:	08004498 	.word	0x08004498
 8000e8c:	080044ac 	.word	0x080044ac
 8000e90:	080044b4 	.word	0x080044b4
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000178 	.word	0x20000178
 8000e9c:	2000011c 	.word	0x2000011c
 8000ea0:	080045d8 	.word	0x080045d8
 8000ea4:	080045e8 	.word	0x080045e8
 8000ea8:	200001f4 	.word	0x200001f4
 8000eac:	080045f4 	.word	0x080045f4
 8000eb0:	200001e8 	.word	0x200001e8
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	08004608 	.word	0x08004608
 8000ebc:	0800456c 	.word	0x0800456c
				}
				else
				{
					I2C_LCD_display_clear(&LCD);
 8000ec0:	48b3      	ldr	r0, [pc, #716]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ec2:	f001 f873 	bl	8001fac <I2C_LCD_display_clear>
					I2C_LCD_set_cursor(&LCD, 0, 4);
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	48b1      	ldr	r0, [pc, #708]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ecc:	f001 f892 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, " Both Are");
 8000ed0:	49b0      	ldr	r1, [pc, #704]	; (8001194 <USART_ApplicationEventCallback+0x908>)
 8000ed2:	48af      	ldr	r0, [pc, #700]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ed4:	f001 f877 	bl	8001fc6 <I2C_LCD_print_string>
					I2C_LCD_set_cursor(&LCD, 1, 4);
 8000ed8:	2204      	movs	r2, #4
 8000eda:	2101      	movs	r1, #1
 8000edc:	48ac      	ldr	r0, [pc, #688]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ede:	f001 f889 	bl	8001ff4 <I2C_LCD_set_cursor>
					I2C_LCD_print_string(&LCD, "Different");
 8000ee2:	49ad      	ldr	r1, [pc, #692]	; (8001198 <USART_ApplicationEventCallback+0x90c>)
 8000ee4:	48aa      	ldr	r0, [pc, #680]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ee6:	f001 f86e 	bl	8001fc6 <I2C_LCD_print_string>
					Delayms(2000);
 8000eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eee:	f000 ff2f 	bl	8001d50 <Delayms>

				}
			}

		}while(r_counter < 4);
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	f67f af40 	bls.w	8000d7a <USART_ApplicationEventCallback+0x4ee>
		I2C_LCD_display_clear(&LCD);
 8000efa:	48a5      	ldr	r0, [pc, #660]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000efc:	f001 f856 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8000f00:	49a6      	ldr	r1, [pc, #664]	; (800119c <USART_ApplicationEventCallback+0x910>)
 8000f02:	48a3      	ldr	r0, [pc, #652]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f04:	f001 f85f 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	48a0      	ldr	r0, [pc, #640]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f0e:	f001 f871 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "A: FP");
 8000f12:	49a3      	ldr	r1, [pc, #652]	; (80011a0 <USART_ApplicationEventCallback+0x914>)
 8000f14:	489e      	ldr	r0, [pc, #632]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f16:	f001 f856 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 8);
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	489c      	ldr	r0, [pc, #624]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f20:	f001 f868 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "B: RFID");
 8000f24:	499f      	ldr	r1, [pc, #636]	; (80011a4 <USART_ApplicationEventCallback+0x918>)
 8000f26:	489a      	ldr	r0, [pc, #616]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f28:	f001 f84d 	bl	8001fc6 <I2C_LCD_print_string>
		HAL_UART_Transmit(&Usart2, ack_pass, 1, 1000);
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	2201      	movs	r2, #1
 8000f32:	499d      	ldr	r1, [pc, #628]	; (80011a8 <USART_ApplicationEventCallback+0x91c>)
 8000f34:	489d      	ldr	r0, [pc, #628]	; (80011ac <USART_ApplicationEventCallback+0x920>)
 8000f36:	f002 f8df 	bl	80030f8 <HAL_UART_Transmit>
 8000f3a:	e11f      	b.n	800117c <USART_ApplicationEventCallback+0x8f0>

	}
	else if(data_winform == 'P')
 8000f3c:	4b9c      	ldr	r3, [pc, #624]	; (80011b0 <USART_ApplicationEventCallback+0x924>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b50      	cmp	r3, #80	; 0x50
 8000f42:	d171      	bne.n	8001028 <USART_ApplicationEventCallback+0x79c>
	{
		I2C_LCD_display_clear(&LCD);
 8000f44:	4892      	ldr	r0, [pc, #584]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f46:	f001 f831 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_set_cursor(&LCD, 0, 4);
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4890      	ldr	r0, [pc, #576]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f50:	f001 f850 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD,"Clear ALL!!!");
 8000f54:	4997      	ldr	r1, [pc, #604]	; (80011b4 <USART_ApplicationEventCallback+0x928>)
 8000f56:	488e      	ldr	r0, [pc, #568]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f58:	f001 f835 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 4);
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	2101      	movs	r1, #1
 8000f60:	488b      	ldr	r0, [pc, #556]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f62:	f001 f847 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD,"Clear ALL!!!");
 8000f66:	4993      	ldr	r1, [pc, #588]	; (80011b4 <USART_ApplicationEventCallback+0x928>)
 8000f68:	4889      	ldr	r0, [pc, #548]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f6a:	f001 f82c 	bl	8001fc6 <I2C_LCD_print_string>
		Delayms(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 feed 	bl	8001d50 <Delayms>
		if(deleteallfinger(Usart1) == FP_ERROR)
 8000f76:	4e90      	ldr	r6, [pc, #576]	; (80011b8 <USART_ApplicationEventCallback+0x92c>)
 8000f78:	466d      	mov	r5, sp
 8000f7a:	f106 0410 	add.w	r4, r6, #16
 8000f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f8e:	f002 fdf7 	bl	8003b80 <deleteallfinger>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2bfe      	cmp	r3, #254	; 0xfe
 8000f96:	d114      	bne.n	8000fc2 <USART_ApplicationEventCallback+0x736>
		{
			I2C_LCD_display_clear(&LCD);
 8000f98:	487d      	ldr	r0, [pc, #500]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000f9a:	f001 f807 	bl	8001fac <I2C_LCD_display_clear>
			I2C_LCD_set_cursor(&LCD, 0, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	487b      	ldr	r0, [pc, #492]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fa4:	f001 f826 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD,"Could Not Clear");
 8000fa8:	4984      	ldr	r1, [pc, #528]	; (80011bc <USART_ApplicationEventCallback+0x930>)
 8000faa:	4879      	ldr	r0, [pc, #484]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fac:	f001 f80b 	bl	8001fc6 <I2C_LCD_print_string>
			I2C_LCD_set_cursor(&LCD, 1, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4876      	ldr	r0, [pc, #472]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fb6:	f001 f81d 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD,"Could Not Clear :>>");
 8000fba:	4981      	ldr	r1, [pc, #516]	; (80011c0 <USART_ApplicationEventCallback+0x934>)
 8000fbc:	4874      	ldr	r0, [pc, #464]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fbe:	f001 f802 	bl	8001fc6 <I2C_LCD_print_string>
		}
		{
			I2C_LCD_display_clear(&LCD);
 8000fc2:	4873      	ldr	r0, [pc, #460]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fc4:	f000 fff2 	bl	8001fac <I2C_LCD_display_clear>
			I2C_LCD_set_cursor(&LCD, 0, 6);
 8000fc8:	2206      	movs	r2, #6
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4870      	ldr	r0, [pc, #448]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fce:	f001 f811 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD,"DONE");
 8000fd2:	497c      	ldr	r1, [pc, #496]	; (80011c4 <USART_ApplicationEventCallback+0x938>)
 8000fd4:	486e      	ldr	r0, [pc, #440]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fd6:	f000 fff6 	bl	8001fc6 <I2C_LCD_print_string>
			I2C_LCD_set_cursor(&LCD, 1, 6);
 8000fda:	2206      	movs	r2, #6
 8000fdc:	2101      	movs	r1, #1
 8000fde:	486c      	ldr	r0, [pc, #432]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fe0:	f001 f808 	bl	8001ff4 <I2C_LCD_set_cursor>
			I2C_LCD_print_string(&LCD,"DONE :>>");
 8000fe4:	4978      	ldr	r1, [pc, #480]	; (80011c8 <USART_ApplicationEventCallback+0x93c>)
 8000fe6:	486a      	ldr	r0, [pc, #424]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000fe8:	f000 ffed 	bl	8001fc6 <I2C_LCD_print_string>
			Delayms(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f000 feae 	bl	8001d50 <Delayms>
		}
		I2C_LCD_display_clear(&LCD);
 8000ff4:	4866      	ldr	r0, [pc, #408]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ff6:	f000 ffd9 	bl	8001fac <I2C_LCD_display_clear>
		I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8000ffa:	4968      	ldr	r1, [pc, #416]	; (800119c <USART_ApplicationEventCallback+0x910>)
 8000ffc:	4864      	ldr	r0, [pc, #400]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8000ffe:	f000 ffe2 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	4862      	ldr	r0, [pc, #392]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001008:	f000 fff4 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "A: FP");
 800100c:	4964      	ldr	r1, [pc, #400]	; (80011a0 <USART_ApplicationEventCallback+0x914>)
 800100e:	4860      	ldr	r0, [pc, #384]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001010:	f000 ffd9 	bl	8001fc6 <I2C_LCD_print_string>
		I2C_LCD_set_cursor(&LCD, 1, 8);
 8001014:	2208      	movs	r2, #8
 8001016:	2101      	movs	r1, #1
 8001018:	485d      	ldr	r0, [pc, #372]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800101a:	f000 ffeb 	bl	8001ff4 <I2C_LCD_set_cursor>
		I2C_LCD_print_string(&LCD, "B: RFID");
 800101e:	4961      	ldr	r1, [pc, #388]	; (80011a4 <USART_ApplicationEventCallback+0x918>)
 8001020:	485b      	ldr	r0, [pc, #364]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001022:	f000 ffd0 	bl	8001fc6 <I2C_LCD_print_string>
 8001026:	e0a9      	b.n	800117c <USART_ApplicationEventCallback+0x8f0>

	}
	else if(data_winform == 'R')
 8001028:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <USART_ApplicationEventCallback+0x924>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b52      	cmp	r3, #82	; 0x52
 800102e:	f040 80a5 	bne.w	800117c <USART_ApplicationEventCallback+0x8f0>
	{
		uint8_t r_counter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	72fb      	strb	r3, [r7, #11]
				char rc_key = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	72bb      	strb	r3, [r7, #10]
				//RFID
				I2C_LCD_display_clear(&LCD);
 800103a:	4855      	ldr	r0, [pc, #340]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800103c:	f000 ffb6 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_print_string(&LCD, "Choose The Card");
 8001040:	4962      	ldr	r1, [pc, #392]	; (80011cc <USART_ApplicationEventCallback+0x940>)
 8001042:	4853      	ldr	r0, [pc, #332]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001044:	f000 ffbf 	bl	8001fc6 <I2C_LCD_print_string>
				I2C_LCD_set_cursor(&LCD, 1, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	4850      	ldr	r0, [pc, #320]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800104e:	f000 ffd1 	bl	8001ff4 <I2C_LCD_set_cursor>
				I2C_LCD_print_string(&LCD, "To Clear: 1,2,3");
 8001052:	495f      	ldr	r1, [pc, #380]	; (80011d0 <USART_ApplicationEventCallback+0x944>)
 8001054:	484e      	ldr	r0, [pc, #312]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001056:	f000 ffb6 	bl	8001fc6 <I2C_LCD_print_string>
				do
				{
					while((rc_key = getChar()) == 0 );
 800105a:	bf00      	nop
 800105c:	f000 f94c 	bl	80012f8 <getChar>
 8001060:	4603      	mov	r3, r0
 8001062:	72bb      	strb	r3, [r7, #10]
 8001064:	7abb      	ldrb	r3, [r7, #10]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f8      	beq.n	800105c <USART_ApplicationEventCallback+0x7d0>
					if(rc_key == '1' ||rc_key == '2' ||rc_key == '3')
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	2b31      	cmp	r3, #49	; 0x31
 800106e:	d005      	beq.n	800107c <USART_ApplicationEventCallback+0x7f0>
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	2b32      	cmp	r3, #50	; 0x32
 8001074:	d002      	beq.n	800107c <USART_ApplicationEventCallback+0x7f0>
 8001076:	7abb      	ldrb	r3, [r7, #10]
 8001078:	2b33      	cmp	r3, #51	; 0x33
 800107a:	d102      	bne.n	8001082 <USART_ApplicationEventCallback+0x7f6>
					{
						r_counter++;
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	3301      	adds	r3, #1
 8001080:	72fb      	strb	r3, [r7, #11]
					}

				}while(r_counter < 1);
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0e9      	beq.n	800105c <USART_ApplicationEventCallback+0x7d0>
				r_counter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	72fb      	strb	r3, [r7, #11]
				sprintf(str_it,"Your number: %x",rc_key);
 800108c:	7abb      	ldrb	r3, [r7, #10]
 800108e:	461a      	mov	r2, r3
 8001090:	4950      	ldr	r1, [pc, #320]	; (80011d4 <USART_ApplicationEventCallback+0x948>)
 8001092:	4851      	ldr	r0, [pc, #324]	; (80011d8 <USART_ApplicationEventCallback+0x94c>)
 8001094:	f002 fde2 	bl	8003c5c <siprintf>
				I2C_LCD_display_clear(&LCD);
 8001098:	483d      	ldr	r0, [pc, #244]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800109a:	f000 ff87 	bl	8001fac <I2C_LCD_display_clear>
				I2C_LCD_print_string(&LCD, str_it);
 800109e:	494e      	ldr	r1, [pc, #312]	; (80011d8 <USART_ApplicationEventCallback+0x94c>)
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 80010a2:	f000 ff90 	bl	8001fc6 <I2C_LCD_print_string>
				Delayms(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010aa:	f000 fe51 	bl	8001d50 <Delayms>
						  if(rc_key == '1')
 80010ae:	7abb      	ldrb	r3, [r7, #10]
 80010b0:	2b31      	cmp	r3, #49	; 0x31
 80010b2:	d10f      	bne.n	80010d4 <USART_ApplicationEventCallback+0x848>
						  {
							  UID_1[0] = 0;
 80010b4:	4b49      	ldr	r3, [pc, #292]	; (80011dc <USART_ApplicationEventCallback+0x950>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
							  UID_1[1] = 0;
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <USART_ApplicationEventCallback+0x950>)
 80010bc:	2200      	movs	r2, #0
 80010be:	705a      	strb	r2, [r3, #1]
							  UID_1[2] = 0;
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <USART_ApplicationEventCallback+0x950>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	709a      	strb	r2, [r3, #2]
							  UID_1[3] = 0;
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <USART_ApplicationEventCallback+0x950>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	70da      	strb	r2, [r3, #3]
							  UID_1[4] = 0;
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <USART_ApplicationEventCallback+0x950>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	711a      	strb	r2, [r3, #4]
 80010d2:	e021      	b.n	8001118 <USART_ApplicationEventCallback+0x88c>
						  }
						  else if(rc_key == '2')
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	2b32      	cmp	r3, #50	; 0x32
 80010d8:	d10f      	bne.n	80010fa <USART_ApplicationEventCallback+0x86e>
						  {
							  UID_2[0] = 0;
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <USART_ApplicationEventCallback+0x954>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
							  UID_2[1] = 0;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <USART_ApplicationEventCallback+0x954>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	705a      	strb	r2, [r3, #1]
							  UID_2[2] = 0;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <USART_ApplicationEventCallback+0x954>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	709a      	strb	r2, [r3, #2]
							  UID_2[3] = 0;
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <USART_ApplicationEventCallback+0x954>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	70da      	strb	r2, [r3, #3]
							  UID_2[4] = 0;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <USART_ApplicationEventCallback+0x954>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	711a      	strb	r2, [r3, #4]
 80010f8:	e00e      	b.n	8001118 <USART_ApplicationEventCallback+0x88c>
						  }
						  else
						  {
							  UID_3[0] = 0;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <USART_ApplicationEventCallback+0x958>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
							  UID_3[1] = 0;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <USART_ApplicationEventCallback+0x958>)
 8001102:	2200      	movs	r2, #0
 8001104:	705a      	strb	r2, [r3, #1]
							  UID_3[2] = 0;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <USART_ApplicationEventCallback+0x958>)
 8001108:	2200      	movs	r2, #0
 800110a:	709a      	strb	r2, [r3, #2]
							  UID_3[3] = 0;
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <USART_ApplicationEventCallback+0x958>)
 800110e:	2200      	movs	r2, #0
 8001110:	70da      	strb	r2, [r3, #3]
							  UID_3[4] = 0;
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <USART_ApplicationEventCallback+0x958>)
 8001114:	2200      	movs	r2, #0
 8001116:	711a      	strb	r2, [r3, #4]
						  }
							I2C_LCD_display_clear(&LCD);
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800111a:	f000 ff47 	bl	8001fac <I2C_LCD_display_clear>
							I2C_LCD_set_cursor(&LCD, 0, 6);
 800111e:	2206      	movs	r2, #6
 8001120:	2100      	movs	r1, #0
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001124:	f000 ff66 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD,"DONE");
 8001128:	4926      	ldr	r1, [pc, #152]	; (80011c4 <USART_ApplicationEventCallback+0x938>)
 800112a:	4819      	ldr	r0, [pc, #100]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800112c:	f000 ff4b 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 6);
 8001130:	2206      	movs	r2, #6
 8001132:	2101      	movs	r1, #1
 8001134:	4816      	ldr	r0, [pc, #88]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001136:	f000 ff5d 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD,"DONE :>>");
 800113a:	4923      	ldr	r1, [pc, #140]	; (80011c8 <USART_ApplicationEventCallback+0x93c>)
 800113c:	4814      	ldr	r0, [pc, #80]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800113e:	f000 ff42 	bl	8001fc6 <I2C_LCD_print_string>
							Delayms(1000);
 8001142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001146:	f000 fe03 	bl	8001d50 <Delayms>
							I2C_LCD_display_clear(&LCD);
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800114c:	f000 ff2e 	bl	8001fac <I2C_LCD_display_clear>
							I2C_LCD_print_string(&LCD, "Choose Ur Option !!");
 8001150:	4912      	ldr	r1, [pc, #72]	; (800119c <USART_ApplicationEventCallback+0x910>)
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001154:	f000 ff37 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 800115e:	f000 ff49 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "A: FP");
 8001162:	490f      	ldr	r1, [pc, #60]	; (80011a0 <USART_ApplicationEventCallback+0x914>)
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001166:	f000 ff2e 	bl	8001fc6 <I2C_LCD_print_string>
							I2C_LCD_set_cursor(&LCD, 1, 8);
 800116a:	2208      	movs	r2, #8
 800116c:	2101      	movs	r1, #1
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001170:	f000 ff40 	bl	8001ff4 <I2C_LCD_set_cursor>
							I2C_LCD_print_string(&LCD, "B: RFID");
 8001174:	490b      	ldr	r1, [pc, #44]	; (80011a4 <USART_ApplicationEventCallback+0x918>)
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <USART_ApplicationEventCallback+0x904>)
 8001178:	f000 ff25 	bl	8001fc6 <I2C_LCD_print_string>
	}
	USART_ReceiveDataIT(&Usart2, &data_winform, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <USART_ApplicationEventCallback+0x924>)
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <USART_ApplicationEventCallback+0x920>)
 8001182:	f001 fe35 	bl	8002df0 <USART_ReceiveDataIT>
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	bf00      	nop
 8001190:	20000218 	.word	0x20000218
 8001194:	08004618 	.word	0x08004618
 8001198:	08004624 	.word	0x08004624
 800119c:	08004498 	.word	0x08004498
 80011a0:	080044ac 	.word	0x080044ac
 80011a4:	080044b4 	.word	0x080044b4
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000178 	.word	0x20000178
 80011b0:	2000011c 	.word	0x2000011c
 80011b4:	08004630 	.word	0x08004630
 80011b8:	200001b4 	.word	0x200001b4
 80011bc:	08004640 	.word	0x08004640
 80011c0:	08004650 	.word	0x08004650
 80011c4:	08004664 	.word	0x08004664
 80011c8:	0800466c 	.word	0x0800466c
 80011cc:	08004580 	.word	0x08004580
 80011d0:	08004678 	.word	0x08004678
 80011d4:	080045a4 	.word	0x080045a4
 80011d8:	20000148 	.word	0x20000148
 80011dc:	20000164 	.word	0x20000164
 80011e0:	200001ec 	.word	0x200001ec
 80011e4:	200001f8 	.word	0x200001f8

080011e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001212:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001216:	f002 fcfd 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7fe ffd5 	bl	80001c8 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   r0, =_estack
 8001220:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800122c:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 8001230:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001234:	20000230 	.word	0x20000230

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <KEYPAD_Inits>:
							{'*', '0', '#', 'D'}};

uint8_t tableColum[4] = {COL_PIN_1, COL_PIN_2, COL_PIN_3, COL_PIN_4};
uint8_t tableRow[4] = {ROW_PIN_1, ROW_PIN_2, ROW_PIN_3, ROW_PIN_4};

void KEYPAD_Inits(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
	GPIO_Handle_t RowPins;
	GPIO_Handle_t ColPins;
	RowPins.pGPIOx = KEYPAD_PORT;
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <KEYPAD_Inits+0xb4>)
 8001244:	613b      	str	r3, [r7, #16]
	RowPins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_IN;
 8001246:	2300      	movs	r3, #0
 8001248:	757b      	strb	r3, [r7, #21]
	RowPins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_IN_PUPD;
 800124a:	2302      	movs	r3, #2
 800124c:	75fb      	strb	r3, [r7, #23]
	RowPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 800124e:	2301      	movs	r3, #1
 8001250:	75bb      	strb	r3, [r7, #22]


	RowPins.GPIO_PinConfig.GPIO_PinNumber = ROW_PIN_1;
 8001252:	2300      	movs	r3, #0
 8001254:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&RowPins);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fb0e 	bl	800187c <GPIO_Init>

	RowPins.GPIO_PinConfig.GPIO_PinNumber = ROW_PIN_2;
 8001260:	2301      	movs	r3, #1
 8001262:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&RowPins);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fb07 	bl	800187c <GPIO_Init>

	RowPins.GPIO_PinConfig.GPIO_PinNumber = ROW_PIN_3;
 800126e:	230b      	movs	r3, #11
 8001270:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&RowPins);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fb00 	bl	800187c <GPIO_Init>

	RowPins.GPIO_PinConfig.GPIO_PinNumber = ROW_PIN_4;
 800127c:	230c      	movs	r3, #12
 800127e:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&RowPins);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4618      	mov	r0, r3
 8001286:	f000 faf9 	bl	800187c <GPIO_Init>

	ColPins.pGPIOx = KEYPAD_PORT;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <KEYPAD_Inits+0xb4>)
 800128c:	607b      	str	r3, [r7, #4]
	ColPins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_10MHZ;
 800128e:	2301      	movs	r3, #1
 8001290:	727b      	strb	r3, [r7, #9]
	ColPins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_GEOUT_PP;
 8001292:	2300      	movs	r3, #0
 8001294:	72fb      	strb	r3, [r7, #11]

	ColPins.GPIO_PinConfig.GPIO_PinNumber = COL_PIN_1;
 8001296:	2304      	movs	r3, #4
 8001298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ColPins);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f000 faed 	bl	800187c <GPIO_Init>

	ColPins.GPIO_PinConfig.GPIO_PinNumber = COL_PIN_2;
 80012a2:	2305      	movs	r3, #5
 80012a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ColPins);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fae7 	bl	800187c <GPIO_Init>

	ColPins.GPIO_PinConfig.GPIO_PinNumber = COL_PIN_3;
 80012ae:	2306      	movs	r3, #6
 80012b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ColPins);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fae1 	bl	800187c <GPIO_Init>

	ColPins.GPIO_PinConfig.GPIO_PinNumber = COL_PIN_4;
 80012ba:	2307      	movs	r3, #7
 80012bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&ColPins);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fadb 	bl	800187c <GPIO_Init>

	for(uint8_t colum = 0; colum < 4; colum++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	77fb      	strb	r3, [r7, #31]
 80012ca:	e00a      	b.n	80012e2 <KEYPAD_Inits+0xa6>
			GPIO_WriteToOutputPin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_SET);
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <KEYPAD_Inits+0xb8>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <KEYPAD_Inits+0xb4>)
 80012d8:	f000 fce2 	bl	8001ca0 <GPIO_WriteToOutputPin>
	for(uint8_t colum = 0; colum < 4; colum++){
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	3301      	adds	r3, #1
 80012e0:	77fb      	strb	r3, [r7, #31]
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d9f1      	bls.n	80012cc <KEYPAD_Inits+0x90>
		}

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000024 	.word	0x20000024

080012f8 <getChar>:

char getChar(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	for(uint8_t colum = 0; colum < 4; colum++){
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e03b      	b.n	800137c <getChar+0x84>
		GPIO_WriteToOutputPin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_RESET);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <getChar+0x94>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4820      	ldr	r0, [pc, #128]	; (8001390 <getChar+0x98>)
 8001310:	f000 fcc6 	bl	8001ca0 <GPIO_WriteToOutputPin>
		for(uint8_t row = 0; row < 4; row++){
 8001314:	2300      	movs	r3, #0
 8001316:	71bb      	strb	r3, [r7, #6]
 8001318:	e022      	b.n	8001360 <getChar+0x68>
			if(!GPIO_ReadFromInputPin(KEYPAD_PORT, tableRow[row])){
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <getChar+0x9c>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	4619      	mov	r1, r3
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <getChar+0x98>)
 8001324:	f000 fca8 	bl	8001c78 <GPIO_ReadFromInputPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d115      	bne.n	800135a <getChar+0x62>
				Delayms(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f000 fd0e 	bl	8001d50 <Delayms>
				while(!GPIO_ReadFromInputPin(KEYPAD_PORT, tableRow[row])){};
 8001334:	bf00      	nop
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <getChar+0x9c>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <getChar+0x98>)
 8001340:	f000 fc9a 	bl	8001c78 <GPIO_ReadFromInputPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f5      	beq.n	8001336 <getChar+0x3e>
					return keyPad[row][colum];
 800134a:	79ba      	ldrb	r2, [r7, #6]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4912      	ldr	r1, [pc, #72]	; (8001398 <getChar+0xa0>)
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	440a      	add	r2, r1
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	e014      	b.n	8001384 <getChar+0x8c>
		for(uint8_t row = 0; row < 4; row++){
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	3301      	adds	r3, #1
 800135e:	71bb      	strb	r3, [r7, #6]
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d9d9      	bls.n	800131a <getChar+0x22>
			}
		}
		GPIO_WriteToOutputPin(KEYPAD_PORT, tableColum[colum], GPIO_PIN_SET);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <getChar+0x94>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <getChar+0x98>)
 8001372:	f000 fc95 	bl	8001ca0 <GPIO_WriteToOutputPin>
	for(uint8_t colum = 0; colum < 4; colum++){
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	3301      	adds	r3, #1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b03      	cmp	r3, #3
 8001380:	d9c0      	bls.n	8001304 <getChar+0xc>
	}
	return 0;
 8001382:	2300      	movs	r3, #0

}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000024 	.word	0x20000024
 8001390:	40010800 	.word	0x40010800
 8001394:	20000028 	.word	0x20000028
 8001398:	20000014 	.word	0x20000014

0800139c <I2C_GenerateStartCondition>:
 *
 * @return				- none
 *
 * @Note				- none
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	pI2Cx ->CR1 |= (1 << I2C_CR1_START);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	70fb      	strb	r3, [r7, #3]
	pI2Cx ->DR = SlaveAddr;
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <I2C_ClearADDRFlag>:
	SlaveAddr |= 1;				//Set r/w bit to 'read' aka. set this bit
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx ->SR1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx ->SR2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <I2C_GenerateStopCondition>:


static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	pI2Cx ->CR1 |= (1 << I2C_CR1_STOP);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <I2C_PeriClockControl>:



void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d015      	beq.n	800145e <I2C_PeriClockControl+0x3e>
	        if (pI2Cx == I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <I2C_PeriClockControl+0x74>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d106      	bne.n	8001448 <I2C_PeriClockControl+0x28>
	        	I2C1_PCLK_EN();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <I2C_PeriClockControl+0x78>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <I2C_PeriClockControl+0x78>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001444:	61d3      	str	r3, [r2, #28]
	        if (pI2Cx == I2C1)
	        	I2C1_PCLK_DI();
	        else if (pI2Cx == I2C2)
	        	I2C2_PCLK_DI();
	    }
}
 8001446:	e01f      	b.n	8001488 <I2C_PeriClockControl+0x68>
	        else if (pI2Cx == I2C2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <I2C_PeriClockControl+0x7c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d11b      	bne.n	8001488 <I2C_PeriClockControl+0x68>
	        	I2C2_PCLK_EN();
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <I2C_PeriClockControl+0x78>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <I2C_PeriClockControl+0x78>)
 8001456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145a:	61d3      	str	r3, [r2, #28]
}
 800145c:	e014      	b.n	8001488 <I2C_PeriClockControl+0x68>
	        if (pI2Cx == I2C1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <I2C_PeriClockControl+0x74>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d106      	bne.n	8001474 <I2C_PeriClockControl+0x54>
	        	I2C1_PCLK_DI();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <I2C_PeriClockControl+0x78>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <I2C_PeriClockControl+0x78>)
 800146c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001470:	61d3      	str	r3, [r2, #28]
}
 8001472:	e009      	b.n	8001488 <I2C_PeriClockControl+0x68>
	        else if (pI2Cx == I2C2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <I2C_PeriClockControl+0x7c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d105      	bne.n	8001488 <I2C_PeriClockControl+0x68>
	        	I2C2_PCLK_DI();
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <I2C_PeriClockControl+0x78>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <I2C_PeriClockControl+0x78>)
 8001482:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001486:	61d3      	str	r3, [r2, #28]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40005400 	.word	0x40005400
 8001498:	40021000 	.word	0x40021000
 800149c:	40005800 	.word	0x40005800

080014a0 <I2C_AckControl>:


void I2C_AckControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <I2C_AckControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80014be:	e005      	b.n	80014cc <I2C_AckControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <I2C_GetFlagStatus>:


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint8_t Flagname){
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
	if(pI2Cx ->SR1 & Flagname){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <I2C_GetFlagStatus+0x1c>
		return FLAG_SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <I2C_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <I2C_Init>:




void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle ->pI2Cx, ENABLE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff84 	bl	8001420 <I2C_PeriClockControl>
//	// ACK control bit
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle ->pI2Cx ->CR1 = tempreg;

	//configure the FREQ field of CR2
	tempreg = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 800151c:	f001 f892 	bl	8002644 <RCC_GetPCLK1Value>
 8001520:	4602      	mov	r2, r0
 8001522:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <I2C_Init+0x150>)
 8001524:	fba3 2302 	umull	r2, r3, r3, r2
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
	pI2CHandle ->pI2Cx ->CR2 = tempreg & 0x3F;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800153a:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle ->I2C_Config.I2C_DeviceAddress << 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	60fb      	str	r3, [r7, #12]
	pI2CHandle ->pI2Cx ->OAR1 = tempreg;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	609a      	str	r2, [r3, #8]

	//CCR calculate
	tempreg = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value;
	if(pI2CHandle ->I2C_Config.I2C_SCLSpeed <= I2C_SPEED_SM){
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a3b      	ldr	r2, [pc, #236]	; (8001654 <I2C_Init+0x154>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d80f      	bhi.n	800158c <I2C_Init+0x8c>
		//Standard mode
		ccr_value = RCC_GetPCLK1Value() / (pI2CHandle ->I2C_Config.I2C_SCLSpeed * 2);
 800156c:	f001 f86a 	bl	8002644 <RCC_GetPCLK1Value>
 8001570:	4602      	mov	r2, r0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e037      	b.n	80015fc <I2C_Init+0xfc>
	}
	else{
		tempreg |= (1 << 15);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001592:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle ->I2C_Config.I2C_FMDutyCycle << 14);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7a9b      	ldrb	r3, [r3, #10]
 8001598:	039b      	lsls	r3, r3, #14
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle ->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a9b      	ldrb	r3, [r3, #10]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d111      	bne.n	80015ce <I2C_Init+0xce>
			ccr_value = RCC_GetPCLK1Value() / (pI2CHandle ->I2C_Config.I2C_SCLSpeed * 3);
 80015aa:	f001 f84b 	bl	8002644 <RCC_GetPCLK1Value>
 80015ae:	4601      	mov	r1, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80015be:	817b      	strh	r3, [r7, #10]
			tempreg |= (ccr_value & 0xFFF);
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e016      	b.n	80015fc <I2C_Init+0xfc>
		}
		else if(pI2CHandle ->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9){
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7a9b      	ldrb	r3, [r3, #10]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d112      	bne.n	80015fc <I2C_Init+0xfc>
			ccr_value = RCC_GetPCLK1Value() / (pI2CHandle ->I2C_Config.I2C_SCLSpeed * 25);
 80015d6:	f001 f835 	bl	8002644 <RCC_GetPCLK1Value>
 80015da:	4601      	mov	r1, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	009a      	lsls	r2, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ee:	817b      	strh	r3, [r7, #10]
			tempreg |= (ccr_value & 0xFFF);
 80015f0:	897b      	ldrh	r3, [r7, #10]
 80015f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle ->pI2Cx ->CCR = tempreg;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle ->I2C_Config.I2C_SCLSpeed <= I2C_SPEED_SM){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <I2C_Init+0x154>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d809      	bhi.n	8001622 <I2C_Init+0x122>
		//Standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
 800160e:	f001 f819 	bl	8002644 <RCC_GetPCLK1Value>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <I2C_Init+0x150>)
 8001616:	fba3 2302 	umull	r2, r3, r3, r2
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e00c      	b.n	800163c <I2C_Init+0x13c>
	}
	else{
		//Fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000U)+1;
 8001622:	f001 f80f 	bl	8002644 <RCC_GetPCLK1Value>
 8001626:	4602      	mov	r2, r0
 8001628:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800162c:	fb03 f302 	mul.w	r3, r3, r2
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <I2C_Init+0x150>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle ->pI2Cx ->TRISE = (tempreg & 0x3F);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001646:	621a      	str	r2, [r3, #32]

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	431bde83 	.word	0x431bde83
 8001654:	000186a0 	.word	0x000186a0

08001658 <I2C_PeripheralControl>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx){

}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10a      	bne.n	8001680 <I2C_PeripheralControl+0x28>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
		I2C_AckControl(pI2Cx, ENABLE); //Enable ack, this can not be set before PE = 1
 8001676:	2101      	movs	r1, #1
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff11 	bl	80014a0 <I2C_AckControl>
	}
	else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800167e:	e005      	b.n	800168c <I2C_PeripheralControl+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 0201 	bic.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_MasterSendData>:


void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t SlaveAddr){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	4613      	mov	r3, r2
 80016a8:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_PeripheralControl(I2C1, ENABLE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <I2C_MasterSendData+0xd4>)
 80016ae:	f7ff ffd3 	bl	8001658 <I2C_PeripheralControl>
	I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe70 	bl	800139c <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_SB));
 80016bc:	bf00      	nop
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff06 	bl	80014d6 <I2C_GetFlagStatus>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f6      	beq.n	80016be <I2C_MasterSendData+0x2a>

	//3. send the address of the slave with r/nw bit set to w(0)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle ->pI2Cx, SlaveAddr);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	79ba      	ldrb	r2, [r7, #6]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe6e 	bl	80013ba <I2C_ExecuteAddressPhaseWrite>

	//4. confirm that address phase is completed be checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_ADDR));
 80016de:	bf00      	nop
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fef5 	bl	80014d6 <I2C_GetFlagStatus>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f6      	beq.n	80016e0 <I2C_MasterSendData+0x4c>

	//5. clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle ->pI2Cx);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe74 	bl	80013e4 <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0
	while(len > 0){
 80016fc:	e014      	b.n	8001728 <I2C_MasterSendData+0x94>
		while(! I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_TXE));
 80016fe:	bf00      	nop
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fee5 	bl	80014d6 <I2C_GetFlagStatus>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f6      	beq.n	8001700 <I2C_MasterSendData+0x6c>
		pI2CHandle ->pI2Cx ->DR =*pTxBuffer;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3301      	adds	r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
		len--;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3b01      	subs	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
	while(len > 0){
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e7      	bne.n	80016fe <I2C_MasterSendData+0x6a>
	}

	//7. when Len becomes 0 wait for TXE=1 and BTF=1 before generating the STOP condition
	//	 Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//	 when BTF=1 SCL will be stretched
	while(! I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_TXE));
 800172e:	bf00      	nop
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fecd 	bl	80014d6 <I2C_GetFlagStatus>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f6      	beq.n	8001730 <I2C_MasterSendData+0x9c>

	while(! I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_BTF));
 8001742:	bf00      	nop
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2104      	movs	r1, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fec3 	bl	80014d6 <I2C_GetFlagStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f6      	beq.n	8001744 <I2C_MasterSendData+0xb0>

	//8. Generate STOP condition and master need not to wait for completion of stop condition
	//	 Note: generating STOP, automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle ->pI2Cx);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe51 	bl	8001402 <I2C_GenerateStopCondition>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005400 	.word	0x40005400

0800176c <GPIO_PeriClockControl>:
 * Chức năng: Cấu hình xung clock cho PORT
 * Input:	*pGPIOx-> địa chỉ của PORT
 * 			EnorDi-> Enable hay Diable
 * Trả về: Không
 *******************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, bool EnOrDi) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi) {
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d036      	beq.n	80017ec <GPIO_PeriClockControl+0x80>
        if (pGPIOx == GPIOA) GPIOA_PCLK_EN();
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <GPIO_PeriClockControl+0xf8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d106      	bne.n	8001794 <GPIO_PeriClockControl+0x28>
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a37      	ldr	r2, [pc, #220]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6193      	str	r3, [r2, #24]
        else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
        else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
        else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
        else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
    }
}
 8001792:	e061      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a35      	ldr	r2, [pc, #212]	; (800186c <GPIO_PeriClockControl+0x100>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d106      	bne.n	80017aa <GPIO_PeriClockControl+0x3e>
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6193      	str	r3, [r2, #24]
}
 80017a8:	e056      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a30      	ldr	r2, [pc, #192]	; (8001870 <GPIO_PeriClockControl+0x104>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d106      	bne.n	80017c0 <GPIO_PeriClockControl+0x54>
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	6193      	str	r3, [r2, #24]
}
 80017be:	e04b      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <GPIO_PeriClockControl+0x108>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d106      	bne.n	80017d6 <GPIO_PeriClockControl+0x6a>
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a26      	ldr	r2, [pc, #152]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	6193      	str	r3, [r2, #24]
}
 80017d4:	e040      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a27      	ldr	r2, [pc, #156]	; (8001878 <GPIO_PeriClockControl+0x10c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d13c      	bne.n	8001858 <GPIO_PeriClockControl+0xec>
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	6193      	str	r3, [r2, #24]
}
 80017ea:	e035      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        if (pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <GPIO_PeriClockControl+0xf8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d106      	bne.n	8001802 <GPIO_PeriClockControl+0x96>
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
}
 8001800:	e02a      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <GPIO_PeriClockControl+0x100>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d106      	bne.n	8001818 <GPIO_PeriClockControl+0xac>
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001810:	f023 0308 	bic.w	r3, r3, #8
 8001814:	6193      	str	r3, [r2, #24]
}
 8001816:	e01f      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <GPIO_PeriClockControl+0x104>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d106      	bne.n	800182e <GPIO_PeriClockControl+0xc2>
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001826:	f023 0310 	bic.w	r3, r3, #16
 800182a:	6193      	str	r3, [r2, #24]
}
 800182c:	e014      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <GPIO_PeriClockControl+0x108>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d106      	bne.n	8001844 <GPIO_PeriClockControl+0xd8>
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 800183c:	f023 0320 	bic.w	r3, r3, #32
 8001840:	6193      	str	r3, [r2, #24]
}
 8001842:	e009      	b.n	8001858 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <GPIO_PeriClockControl+0x10c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d105      	bne.n	8001858 <GPIO_PeriClockControl+0xec>
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <GPIO_PeriClockControl+0xfc>)
 8001852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001856:	6193      	str	r3, [r2, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40010800 	.word	0x40010800
 8001868:	40021000 	.word	0x40021000
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40011400 	.word	0x40011400
 8001878:	40011800 	.word	0x40011800

0800187c <GPIO_Init>:

/*
 * 	Init and DeInit
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	// bật xung clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff6e 	bl	800176c <GPIO_PeriClockControl>

		bool crLorH = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= GPIO_PIN_8;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	791b      	ldrb	r3, [r3, #4]
 8001894:	2b07      	cmp	r3, #7
 8001896:	bf8c      	ite	hi
 8001898:	2301      	movhi	r3, #1
 800189a:	2300      	movls	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
		uint8_t crShifVal = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	75bb      	strb	r3, [r7, #22]
	//1. Configure the mode of GPIO Pin
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed <= 0b11)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	795b      	ldrb	r3, [r3, #5]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d824      	bhi.n	80018fa <GPIO_Init+0x7e>
		{
			pGPIOHandle->pGPIOx->CR[crLorH]	&=	~((0b11)<<(4*crShifVal));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	7dfa      	ldrb	r2, [r7, #23]
 80018b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018ba:	7dbb      	ldrb	r3, [r7, #22]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	7dfa      	ldrb	r2, [r7, #23]
 80018ce:	4001      	ands	r1, r0
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->CR[crLorH]	|= pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed<<(4*crShifVal); /*SET: Tại ở giữa MODE là có CNF nên*/
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	7dfa      	ldrb	r2, [r7, #23]
 80018da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	795b      	ldrb	r3, [r3, #5]
 80018e2:	461a      	mov	r2, r3
 80018e4:	7dbb      	ldrb	r3, [r7, #22]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	7dfa      	ldrb	r2, [r7, #23]
 80018f4:	4301      	orrs	r1, r0
 80018f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	//2. Configure the CRF

	    if (((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	795b      	ldrb	r3, [r3, #5]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <GPIO_Init+0x94>
	        // if the cnf is reserved, configure the pin as Floating Input(reset state)
	        (pGPIOHandle->GPIO_PinConfig.GPIO_CRF == GPIO_CNF_IN_RESERVED))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	79db      	ldrb	r3, [r3, #7]
	    if (((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN) &&
 8001906:	2b03      	cmp	r3, #3
 8001908:	d102      	bne.n	8001910 <GPIO_Init+0x94>
	        pGPIOHandle->GPIO_PinConfig.GPIO_CRF = GPIO_CNF_IN_FLOAT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	71da      	strb	r2, [r3, #7]
	    pGPIOHandle->pGPIOx->CR[crLorH] &= ~(0b11 << ((4 * crShifVal) + 2)); // clear
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	7dfa      	ldrb	r2, [r7, #23]
 8001916:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	7dfa      	ldrb	r2, [r7, #23]
 8001930:	4001      	ands	r1, r0
 8001932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    pGPIOHandle->pGPIOx->CR[crLorH] |= pGPIOHandle->GPIO_PinConfig.GPIO_CRF << ((4 * crShifVal) + 2);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	79db      	ldrb	r3, [r3, #7]
 8001944:	461a      	mov	r2, r3
 8001946:	7dbb      	ldrb	r3, [r7, #22]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	4618      	mov	r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	7dfa      	ldrb	r2, [r7, #23]
 8001958:	4301      	orrs	r1, r0
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	//3. Configure the Push up or push down settings

	    if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <GPIO_Init+0x12a>
	        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl == GPIO_PU)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d10d      	bne.n	800198a <GPIO_Init+0x10e>
	            pGPIOHandle->pGPIOx->ODR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	4619      	mov	r1, r3
 800197a:	2301      	movs	r3, #1
 800197c:	408b      	lsls	r3, r1
 800197e:	4619      	mov	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	e00d      	b.n	80019a6 <GPIO_Init+0x12a>
	        else pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	4619      	mov	r1, r3
 8001996:	2301      	movs	r3, #1
 8001998:	408b      	lsls	r3, r1
 800199a:	43db      	mvns	r3, r3
 800199c:	4619      	mov	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	400a      	ands	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
	    }
	//4. Configure the IRQ
		if((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN && pGPIOHandle->GPIO_PinConfig.GPIO_PinIRQ_Trigger == GPIO_IRQ_RT)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	795b      	ldrb	r3, [r3, #5]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d16b      	bne.n	8001a86 <GPIO_Init+0x20a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7a1b      	ldrb	r3, [r3, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d167      	bne.n	8001a86 <GPIO_Init+0x20a>
		{
			/*cấu hình cạnh lên cho ngắt*/
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <GPIO_Init+0x38c>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	7912      	ldrb	r2, [r2, #4]
 80019be:	4611      	mov	r1, r2
 80019c0:	2201      	movs	r2, #1
 80019c2:	408a      	lsls	r2, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	4a90      	ldr	r2, [pc, #576]	; (8001c08 <GPIO_Init+0x38c>)
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]
			/*clear*/
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <GPIO_Init+0x38c>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	7912      	ldrb	r2, [r2, #4]
 80019d4:	4611      	mov	r1, r2
 80019d6:	2201      	movs	r2, #1
 80019d8:	408a      	lsls	r2, r1
 80019da:	43d2      	mvns	r2, r2
 80019dc:	4611      	mov	r1, r2
 80019de:	4a8a      	ldr	r2, [pc, #552]	; (8001c08 <GPIO_Init+0x38c>)
 80019e0:	400b      	ands	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]
			AFIO_PCLK_EN();
 80019e4:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <GPIO_Init+0x390>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a88      	ldr	r2, [pc, #544]	; (8001c0c <GPIO_Init+0x390>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6193      	str	r3, [r2, #24]

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	757b      	strb	r3, [r7, #21]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	753b      	strb	r3, [r7, #20]

			uint8_t PortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx); // cái lìn này để xác định port
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a82      	ldr	r2, [pc, #520]	; (8001c10 <GPIO_Init+0x394>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01d      	beq.n	8001a48 <GPIO_Init+0x1cc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a80      	ldr	r2, [pc, #512]	; (8001c14 <GPIO_Init+0x398>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d016      	beq.n	8001a44 <GPIO_Init+0x1c8>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <GPIO_Init+0x39c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00f      	beq.n	8001a40 <GPIO_Init+0x1c4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7d      	ldr	r2, [pc, #500]	; (8001c1c <GPIO_Init+0x3a0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d008      	beq.n	8001a3c <GPIO_Init+0x1c0>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7c      	ldr	r2, [pc, #496]	; (8001c20 <GPIO_Init+0x3a4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <GPIO_Init+0x1bc>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e008      	b.n	8001a4a <GPIO_Init+0x1ce>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e006      	b.n	8001a4a <GPIO_Init+0x1ce>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e004      	b.n	8001a4a <GPIO_Init+0x1ce>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <GPIO_Init+0x1ce>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <GPIO_Init+0x1ce>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	74fb      	strb	r3, [r7, #19]

			AFIO->EXTICR[temp1] |=	(PortCode << (temp2 * 4));
 8001a4c:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <GPIO_Init+0x3a8>)
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a56:	7cf9      	ldrb	r1, [r7, #19]
 8001a58:	7d3b      	ldrb	r3, [r7, #20]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4970      	ldr	r1, [pc, #448]	; (8001c24 <GPIO_Init+0x3a8>)
 8001a64:	7d7b      	ldrb	r3, [r7, #21]
 8001a66:	4302      	orrs	r2, r0
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/*SET thanh ghi EXTI MASK*/

			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001a6e:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <GPIO_Init+0x38c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	7912      	ldrb	r2, [r2, #4]
 8001a76:	4611      	mov	r1, r2
 8001a78:	2201      	movs	r2, #1
 8001a7a:	408a      	lsls	r2, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4a62      	ldr	r2, [pc, #392]	; (8001c08 <GPIO_Init+0x38c>)
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
		{
 8001a84:	e0ef      	b.n	8001c66 <GPIO_Init+0x3ea>

		}
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN && pGPIOHandle->GPIO_PinConfig.GPIO_PinIRQ_Trigger == GPIO_IRQ_FT)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d16b      	bne.n	8001b66 <GPIO_Init+0x2ea>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7a1b      	ldrb	r3, [r3, #8]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d167      	bne.n	8001b66 <GPIO_Init+0x2ea>

		{
			/*cấu hình cạnh xuống cho ngắt*/
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <GPIO_Init+0x38c>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	7912      	ldrb	r2, [r2, #4]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	408a      	lsls	r2, r1
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <GPIO_Init+0x38c>)
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	60d3      	str	r3, [r2, #12]
			/*clear*/
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <GPIO_Init+0x38c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	7912      	ldrb	r2, [r2, #4]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	408a      	lsls	r2, r1
 8001aba:	43d2      	mvns	r2, r2
 8001abc:	4611      	mov	r1, r2
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <GPIO_Init+0x38c>)
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]
			AFIO_PCLK_EN();
 8001ac4:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <GPIO_Init+0x390>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a50      	ldr	r2, [pc, #320]	; (8001c0c <GPIO_Init+0x390>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6193      	str	r3, [r2, #24]

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	74bb      	strb	r3, [r7, #18]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	747b      	strb	r3, [r7, #17]

			uint8_t PortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx); // cái lìn này để xác định port
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <GPIO_Init+0x394>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01d      	beq.n	8001b28 <GPIO_Init+0x2ac>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a48      	ldr	r2, [pc, #288]	; (8001c14 <GPIO_Init+0x398>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d016      	beq.n	8001b24 <GPIO_Init+0x2a8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <GPIO_Init+0x39c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00f      	beq.n	8001b20 <GPIO_Init+0x2a4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <GPIO_Init+0x3a0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d008      	beq.n	8001b1c <GPIO_Init+0x2a0>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <GPIO_Init+0x3a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <GPIO_Init+0x29c>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e008      	b.n	8001b2a <GPIO_Init+0x2ae>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e006      	b.n	8001b2a <GPIO_Init+0x2ae>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e004      	b.n	8001b2a <GPIO_Init+0x2ae>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <GPIO_Init+0x2ae>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <GPIO_Init+0x2ae>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	743b      	strb	r3, [r7, #16]

			AFIO->EXTICR[temp1] |=	(PortCode << (temp2 * 4));
 8001b2c:	4a3d      	ldr	r2, [pc, #244]	; (8001c24 <GPIO_Init+0x3a8>)
 8001b2e:	7cbb      	ldrb	r3, [r7, #18]
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b36:	7c39      	ldrb	r1, [r7, #16]
 8001b38:	7c7b      	ldrb	r3, [r7, #17]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	4938      	ldr	r1, [pc, #224]	; (8001c24 <GPIO_Init+0x3a8>)
 8001b44:	7cbb      	ldrb	r3, [r7, #18]
 8001b46:	4302      	orrs	r2, r0
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/*SET thanh ghi EXTI MASK*/

			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <GPIO_Init+0x38c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	7912      	ldrb	r2, [r2, #4]
 8001b56:	4611      	mov	r1, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	408a      	lsls	r2, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <GPIO_Init+0x38c>)
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6013      	str	r3, [r2, #0]
		{
 8001b64:	e07f      	b.n	8001c66 <GPIO_Init+0x3ea>

		}
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinModeAndSpeed) == GPIO_MODE_IN && pGPIOHandle->GPIO_PinConfig.GPIO_PinIRQ_Trigger == GPIO_IRQ_RFT)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	795b      	ldrb	r3, [r3, #5]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d17b      	bne.n	8001c66 <GPIO_Init+0x3ea>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7a1b      	ldrb	r3, [r3, #8]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d177      	bne.n	8001c66 <GPIO_Init+0x3ea>
		{
			/*cấu hình cạnh lên cho ngắt*/
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <GPIO_Init+0x38c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	7912      	ldrb	r2, [r2, #4]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	2201      	movs	r2, #1
 8001b82:	408a      	lsls	r2, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <GPIO_Init+0x38c>)
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <GPIO_Init+0x38c>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	7912      	ldrb	r2, [r2, #4]
 8001b94:	4611      	mov	r1, r2
 8001b96:	2201      	movs	r2, #1
 8001b98:	408a      	lsls	r2, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <GPIO_Init+0x38c>)
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	60d3      	str	r3, [r2, #12]
			AFIO_PCLK_EN();
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <GPIO_Init+0x390>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <GPIO_Init+0x390>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6193      	str	r3, [r2, #24]

			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	73fb      	strb	r3, [r7, #15]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	73bb      	strb	r3, [r7, #14]

			uint8_t PortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx); // cái lìn này để xác định port
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <GPIO_Init+0x394>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02e      	beq.n	8001c28 <GPIO_Init+0x3ac>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <GPIO_Init+0x398>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d016      	beq.n	8001c02 <GPIO_Init+0x386>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <GPIO_Init+0x39c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00f      	beq.n	8001bfe <GPIO_Init+0x382>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <GPIO_Init+0x3a0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d008      	beq.n	8001bfa <GPIO_Init+0x37e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <GPIO_Init+0x3a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <GPIO_Init+0x37a>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e019      	b.n	8001c2a <GPIO_Init+0x3ae>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e017      	b.n	8001c2a <GPIO_Init+0x3ae>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e015      	b.n	8001c2a <GPIO_Init+0x3ae>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e013      	b.n	8001c2a <GPIO_Init+0x3ae>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e011      	b.n	8001c2a <GPIO_Init+0x3ae>
 8001c06:	bf00      	nop
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40011400 	.word	0x40011400
 8001c20:	40011800 	.word	0x40011800
 8001c24:	40010000 	.word	0x40010000
 8001c28:	2300      	movs	r3, #0
 8001c2a:	737b      	strb	r3, [r7, #13]

			AFIO->EXTICR[temp1] |=	(PortCode << (temp2 * 4));
 8001c2c:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <GPIO_Init+0x3f4>)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c36:	7b79      	ldrb	r1, [r7, #13]
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	490b      	ldr	r1, [pc, #44]	; (8001c70 <GPIO_Init+0x3f4>)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	4302      	orrs	r2, r0
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/*SET thanh ghi EXTI MASK*/

			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <GPIO_Init+0x3f8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	7912      	ldrb	r2, [r2, #4]
 8001c56:	4611      	mov	r1, r2
 8001c58:	2201      	movs	r2, #1
 8001c5a:	408a      	lsls	r2, r1
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <GPIO_Init+0x3f8>)
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6013      	str	r3, [r2, #0]
//		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);



	//5. Configue the Alt functionality
}
 8001c64:	e7ff      	b.n	8001c66 <GPIO_Init+0x3ea>
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010400 	.word	0x40010400

08001c78 <GPIO_ReadFromInputPin>:
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);

/*
 * 	Read and Write data
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
    return (pGPIOx->IDR >> PinNumber) & 1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <GPIO_WriteToOutputPin>:

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx) {
    return (uint16_t) (pGPIOx->IDR);
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	4613      	mov	r3, r2
 8001cae:	70bb      	strb	r3, [r7, #2]
    if (Value == GPIO_PIN_SET) {
 8001cb0:	78bb      	ldrb	r3, [r7, #2]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d109      	bne.n	8001cca <GPIO_WriteToOutputPin+0x2a>
        pGPIOx->ODR |= (1 << PinNumber);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
    } else {
        pGPIOx->ODR &= ~(1 << PinNumber);
    }
}
 8001cc8:	e009      	b.n	8001cde <GPIO_WriteToOutputPin+0x3e>
        pGPIOx->ODR &= ~(1 << PinNumber);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	43d2      	mvns	r2, r2
 8001cd8:	401a      	ands	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60da      	str	r2, [r3, #12]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <DelayInit>:
 */

#include <stm32f103xx_delay.h>

void DelayInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	uint32_t Clk,temp;

	TIM4_PCLK_EN();
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <DelayInit+0x5c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <DelayInit+0x5c>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	61d3      	str	r3, [r2, #28]
	Clk = RCC_GetPCLK1Value();
 8001cfa:	f000 fca3 	bl	8002644 <RCC_GetPCLK1Value>
 8001cfe:	6078      	str	r0, [r7, #4]
	if(((RCC->CFGR >> 10) & 1) == 0 )
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <DelayInit+0x5c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0a9b      	lsrs	r3, r3, #10
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <DelayInit+0x2c>
	{
		Clk = Clk;
	}
	else {
		Clk = Clk*2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
	}

	temp = Clk/1000; // 1kHZ
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <DelayInit+0x60>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	603b      	str	r3, [r7, #0]

	TIM4->PSC = (uint16_t)temp; // once count means 1 ms
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <DelayInit+0x64>)
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 0xffff; //maximum the value of ARR register
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <DelayInit+0x64>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->EGR  |= (1 << TIM_EGR_UG);
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <DelayInit+0x64>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <DelayInit+0x64>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6153      	str	r3, [r2, #20]

}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	10624dd3 	.word	0x10624dd3
 8001d4c:	40000800 	.word	0x40000800

08001d50 <Delayms>:

void Delayms(uint32_t ms)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	TIM4->CR1 |= (1 << TIM_CR1_CNE);
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <Delayms+0x6c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <Delayms+0x6c>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
    uint16_t start;
    uint32_t remaining = ms + 1u; // Add one to guarantee 'at least' us
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	613b      	str	r3, [r7, #16]

    start = TIM4->CNT;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <Delayms+0x6c>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	82fb      	strh	r3, [r7, #22]

    while (remaining > 0u)
 8001d70:	e018      	b.n	8001da4 <Delayms+0x54>
    {
        uint16_t delay = (remaining > 0xFFFFu) ? 0xFFFFu : (uint16_t)remaining;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d202      	bcs.n	8001d80 <Delayms+0x30>
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	e001      	b.n	8001d84 <Delayms+0x34>
 8001d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d84:	81fb      	strh	r3, [r7, #14]
        uint16_t end;

        remaining -= delay;
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	613b      	str	r3, [r7, #16]

        do {
            end = TIM4->CNT;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <Delayms+0x6c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	81bb      	strh	r3, [r7, #12]
        } while ((end - start) < delay);
 8001d94:	89ba      	ldrh	r2, [r7, #12]
 8001d96:	8afb      	ldrh	r3, [r7, #22]
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf6      	blt.n	8001d8e <Delayms+0x3e>

        start = end;
 8001da0:	89bb      	ldrh	r3, [r7, #12]
 8001da2:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0u)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1e3      	bne.n	8001d72 <Delayms+0x22>
    }
    TIM4->CR1 &= ~TIM_CR1_CNE;
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <Delayms+0x6c>)
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <Delayms+0x6c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6013      	str	r3, [r2, #0]
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <mdelay>:
static void mdelay(uint32_t time);
static void udelay(uint32_t time);



static void mdelay(uint32_t time){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < (time * 1000); i++);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e002      	b.n	8001dd4 <mdelay+0x14>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3f4      	bcc.n	8001dce <mdelay+0xe>
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <udelay>:

static void udelay(uint32_t time){
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0 ; i < (time * 1); i++);
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e002      	b.n	8001e02 <udelay+0x14>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3f8      	bcc.n	8001dfc <udelay+0xe>
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <I2C_LCD_Write>:

static void I2C_LCD_Write(I2C_LCD_Handle_t* LCD, uint8_t data, uint8_t mode){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
	char data_h;
	char data_l;
	uint8_t data_t[4];
	data_h = data & 0xF0;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f023 030f 	bic.w	r3, r3, #15
 8001e2a:	73fb      	strb	r3, [r7, #15]
	data_l = (data << 4) & 0xF0;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	73bb      	strb	r3, [r7, #14]

	if(LCD->BACKLIGHT){
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7a5b      	ldrb	r3, [r3, #9]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <I2C_LCD_Write+0x36>
		data_h |= LCD_BACKLIGHT;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	73fb      	strb	r3, [r7, #15]
		data_l |= LCD_BACKLIGHT;
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA){
 8001e4a:	78bb      	ldrb	r3, [r7, #2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <I2C_LCD_Write+0x4e>
		data_h |= LCD_RS;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
		data_l |= LCD_RS;
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	73bb      	strb	r3, [r7, #14]
 8001e60:	e00a      	b.n	8001e78 <I2C_LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND){
 8001e62:	78bb      	ldrb	r3, [r7, #2]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <I2C_LCD_Write+0x64>
		data_h &= ~LCD_RS;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
		data_l &= ~LCD_RS;
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	73bb      	strb	r3, [r7, #14]
	}
	data_t[0] = data_h|LCD_EN;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	723b      	strb	r3, [r7, #8]
	mdelay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff ff9c 	bl	8001dc0 <mdelay>
	data_t[1] = data_h;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|LCD_EN;
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	72bb      	strb	r3, [r7, #10]
	mdelay(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff92 	bl	8001dc0 <mdelay>
	data_t[3] = data_l;
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	72fb      	strb	r3, [r7, #11]
	I2C_MasterSendData(LCD -> I2C, (uint8_t*) data_t, sizeof(data_t), LCD ->ADDRESS);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	f107 0108 	add.w	r1, r7, #8
 8001eac:	2204      	movs	r2, #4
 8001eae:	f7ff fbf1 	bl	8001694 <I2C_MasterSendData>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <I2C_LCD_init>:


void I2C_LCD_init(I2C_LCD_Handle_t* LCD, I2C_Handle_t* I2CHandle, uint8_t SlaveAddr){
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
	LCD ->I2C = I2CHandle;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	601a      	str	r2, [r3, #0]
	LCD ->ADDRESS = SlaveAddr;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	79fa      	ldrb	r2, [r7, #7]
 8001ed2:	711a      	strb	r2, [r3, #4]
	LCD ->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2228      	movs	r2, #40	; 0x28
 8001ed8:	721a      	strb	r2, [r3, #8]
	LCD ->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2206      	movs	r2, #6
 8001ede:	715a      	strb	r2, [r3, #5]
	LCD ->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	719a      	strb	r2, [r3, #6]
	LCD ->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2214      	movs	r2, #20
 8001eea:	71da      	strb	r2, [r3, #7]
	LCD ->BACKLIGHT = LCD_BACKLIGHT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	725a      	strb	r2, [r3, #9]

	mdelay(50);
 8001ef2:	2032      	movs	r0, #50	; 0x32
 8001ef4:	f7ff ff64 	bl	8001dc0 <mdelay>
	I2C_LCD_Write(LCD, 0x33, LCD_COMMAND);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2133      	movs	r1, #51	; 0x33
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff ff89 	bl	8001e14 <I2C_LCD_Write>
	mdelay(5);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f7ff ff5c 	bl	8001dc0 <mdelay>
	I2C_LCD_Write(LCD, 0x33, LCD_COMMAND);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2133      	movs	r1, #51	; 0x33
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff ff81 	bl	8001e14 <I2C_LCD_Write>
	udelay(200);
 8001f12:	20c8      	movs	r0, #200	; 0xc8
 8001f14:	f7ff ff6b 	bl	8001dee <udelay>
	I2C_LCD_Write(LCD, 0x32, LCD_COMMAND);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2132      	movs	r1, #50	; 0x32
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff79 	bl	8001e14 <I2C_LCD_Write>
	mdelay(5);
 8001f22:	2005      	movs	r0, #5
 8001f24:	f7ff ff4c 	bl	8001dc0 <mdelay>
	I2C_LCD_Write(LCD, 0x20, LCD_COMMAND);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff ff71 	bl	8001e14 <I2C_LCD_Write>
	mdelay(5);
 8001f32:	2005      	movs	r0, #5
 8001f34:	f7ff ff44 	bl	8001dc0 <mdelay>

	I2C_LCD_Write(LCD, LCD ->ENTRYMODE, LCD_COMMAND);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	795b      	ldrb	r3, [r3, #5]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff ff67 	bl	8001e14 <I2C_LCD_Write>
	I2C_LCD_Write(LCD, LCD ->DISPLAYCTRL, LCD_COMMAND);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	799b      	ldrb	r3, [r3, #6]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff60 	bl	8001e14 <I2C_LCD_Write>
	I2C_LCD_Write(LCD, LCD ->CURSORSHIFT, LCD_COMMAND);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	79db      	ldrb	r3, [r3, #7]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff ff59 	bl	8001e14 <I2C_LCD_Write>
	I2C_LCD_Write(LCD, LCD ->FUNCTIONSET, LCD_COMMAND);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	7a1b      	ldrb	r3, [r3, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff ff52 	bl	8001e14 <I2C_LCD_Write>

	I2C_LCD_Write(LCD, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2101      	movs	r1, #1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff ff4d 	bl	8001e14 <I2C_LCD_Write>
	I2C_LCD_Write(LCD, LCD_RETURNHOME, LCD_COMMAND);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff ff48 	bl	8001e14 <I2C_LCD_Write>
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <I2C_LCD_print_char>:


void I2C_LCD_print_char(I2C_LCD_Handle_t* LCD, char data){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
	I2C_LCD_Write(LCD, data, LCD_DATA);
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff38 	bl	8001e14 <I2C_LCD_Write>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_LCD_display_clear>:

void I2C_LCD_display_clear(I2C_LCD_Handle_t* LCD){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	I2C_LCD_Write(LCD, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff2b 	bl	8001e14 <I2C_LCD_Write>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <I2C_LCD_print_string>:

void I2C_LCD_display_return_home(I2C_LCD_Handle_t* LCD){
	I2C_LCD_Write(LCD, LCD_RETURNHOME, LCD_COMMAND);
}

void I2C_LCD_print_string(I2C_LCD_Handle_t* LCD, char* str){
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
	while (*str)
 8001fd0:	e008      	b.n	8001fe4 <I2C_LCD_print_string+0x1e>
		I2C_LCD_Write(LCD, *str++, LCD_DATA);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	603a      	str	r2, [r7, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff18 	bl	8001e14 <I2C_LCD_Write>
	while (*str)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f2      	bne.n	8001fd2 <I2C_LCD_print_string+0xc>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_LCD_set_cursor>:

void I2C_LCD_set_cursor(I2C_LCD_Handle_t* LCD, uint8_t row, uint8_t column){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
	switch (row){
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <I2C_LCD_set_cursor+0x1c>
 800200a:	2b01      	cmp	r3, #1
 800200c:	d005      	beq.n	800201a <I2C_LCD_set_cursor+0x26>
 800200e:	e009      	b.n	8002024 <I2C_LCD_set_cursor+0x30>
		case 0:
			column |= 0x80;
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002016:	70bb      	strb	r3, [r7, #2]
			break;
 8002018:	e004      	b.n	8002024 <I2C_LCD_set_cursor+0x30>
		case 1:
			column |= 0xC0;
 800201a:	78bb      	ldrb	r3, [r7, #2]
 800201c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002020:	70bb      	strb	r3, [r7, #2]
			break;
 8002022:	bf00      	nop
	}
	I2C_LCD_Write(LCD, column, LCD_COMMAND);
 8002024:	78bb      	ldrb	r3, [r7, #2]
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fef2 	bl	8001e14 <I2C_LCD_Write>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <SPIx_Init>:


#include <stm32f103xx_init.h>

void SPIx_Init(SPI_RegDef_t *pSPIx, uint16_t SPI_BaudRate)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
	GPIO_Handle_t SPI_Pins;
	// Enable clock GPIO

	if(pSPIx == SPI1 )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a36      	ldr	r2, [pc, #216]	; (8002120 <SPIx_Init+0xe8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d120      	bne.n	800208e <SPIx_Init+0x56>
	{

		SPI_Pins.pGPIOx = GPIOB;
 800204c:	4b35      	ldr	r3, [pc, #212]	; (8002124 <SPIx_Init+0xec>)
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
		SPI_Pins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_ALOUT_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		SPI_Pins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_50MHZ;
 8002056:	2303      	movs	r3, #3
 8002058:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		// cấu hình NSS
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800205c:	2305      	movs	r3, #5
 800205e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		GPIO_Init(&SPI_Pins);
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc08 	bl	800187c <GPIO_Init>

		// cấu hình SCLK
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800206c:	2306      	movs	r3, #6
 800206e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		GPIO_Init(&SPI_Pins);
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fc00 	bl	800187c <GPIO_Init>

		// cấu hình MOSI
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800207c:	2307      	movs	r3, #7
 800207e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		GPIO_Init(&SPI_Pins);															// Enable clock SPI1
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fbf8 	bl	800187c <GPIO_Init>
 800208c:	e029      	b.n	80020e2 <SPIx_Init+0xaa>
	}
	else if(pSPIx == SPI2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <SPIx_Init+0xf0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d125      	bne.n	80020e2 <SPIx_Init+0xaa>
	{

		SPI_Pins.pGPIOx = GPIOB;
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <SPIx_Init+0xec>)
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
		SPI_Pins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_ALOUT_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		SPI_Pins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_50MHZ;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		// cấu hình Ncj
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80020a6:	230d      	movs	r3, #13
 80020a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		GPIO_Init(&SPI_Pins);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fbe3 	bl	800187c <GPIO_Init>
		// cấu hình miso
//		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
//		GPIO_Init(&SPI_Pins);

		// cấu hình MOSI
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80020b6:	230f      	movs	r3, #15
 80020b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		GPIO_Init(&SPI_Pins);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fbdb 	bl	800187c <GPIO_Init>

		SPI_Pins.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_IN;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80020cc:	230e      	movs	r3, #14
 80020ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		SPI_Pins.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_IN_FLOAT;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		GPIO_Init(&SPI_Pins);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fbcd 	bl	800187c <GPIO_Init>
														// Enable clock SPI2 or SPI3
	}

	SPI_Handle_t SPI_Inits;

	SPI_Inits.pSPIx = pSPIx;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	617b      	str	r3, [r7, #20]
	SPI_Inits.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80020e6:	2301      	movs	r3, #1
 80020e8:	737b      	strb	r3, [r7, #13]
	SPI_Inits.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80020ea:	2301      	movs	r3, #1
 80020ec:	733b      	strb	r3, [r7, #12]
	SPI_Inits.SPIConfig.SPI_SclkSpeed = SPI_BaudRate;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	74bb      	strb	r3, [r7, #18]
	SPI_Inits.SPIConfig.SPI_DFF = SPI_DFF_8BIT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73bb      	strb	r3, [r7, #14]
	SPI_Inits.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
	SPI_Inits.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	743b      	strb	r3, [r7, #16]
	SPI_Inits.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8002100:	2301      	movs	r3, #1
 8002102:	747b      	strb	r3, [r7, #17]

	SPI_Init(&SPI_Inits);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fbd9 	bl	80028c0 <SPI_Init>
	SPI_SSIConfig(SPI2, ENABLE);
 800210e:	2101      	movs	r1, #1
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <SPIx_Init+0xf0>)
 8002112:	f000 fc7d 	bl	8002a10 <SPI_SSIConfig>
}
 8002116:	bf00      	nop
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40013000 	.word	0x40013000
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40003800 	.word	0x40003800

0800212c <SPI_Transfer>:


uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx,uint8_t data)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
	uint8_t TxBuffer = data;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	73fb      	strb	r3, [r7, #15]
	uint8_t RxBuffer;

	SPI_SendData(pSPIx, &TxBuffer, 1);
 800213c:	f107 030f 	add.w	r3, r7, #15
 8002140:	2201      	movs	r2, #1
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fc99 	bl	8002a7c <SPI_SendData>

	SPI_ReceiveData(pSPIx, &RxBuffer, 1);
 800214a:	f107 030e 	add.w	r3, r7, #14
 800214e:	2201      	movs	r2, #1
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fcd4 	bl	8002b00 <SPI_ReceiveData>
	return RxBuffer;
 8002158:	7bbb      	ldrb	r3, [r7, #14]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <RC522_SPI_Transfer>:
 * Chuc nang: Viet 1 byte du lieu vao thanh ghi MFRC522
 * Input:addr-> DIa chi ghi, val-> Gia tri de ghi
 * Tra ve: Khong
 */
uint8_t RC522_SPI_Transfer(u8 data)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
	return SPI_Transfer(SPI2,data);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4619      	mov	r1, r3
 8002172:	4804      	ldr	r0, [pc, #16]	; (8002184 <RC522_SPI_Transfer+0x20>)
 8002174:	f7ff ffda 	bl	800212c <SPI_Transfer>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40003800 	.word	0x40003800

08002188 <Write_MFRC522>:
 * Chuc nang: Viet 1 byte du lieu vao thanh ghi MFRC522
 * Input:addr-> DIa chi ghi, val-> Gia tri de ghi
 * Tra ve: Khong
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_CS_PIN, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	210c      	movs	r1, #12
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <Write_MFRC522+0x48>)
 800219e:	f7ff fd7f 	bl	8001ca0 <GPIO_WriteToOutputPin>

	//Dinh dang dia chi:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ffd8 	bl	8002164 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ffd4 	bl	8002164 <RC522_SPI_Transfer>

	/* CS HIGH */
	GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_CS_PIN, 1);
 80021bc:	2201      	movs	r2, #1
 80021be:	210c      	movs	r1, #12
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <Write_MFRC522+0x48>)
 80021c2:	f7ff fd6d 	bl	8001ca0 <GPIO_WriteToOutputPin>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40010c00 	.word	0x40010c00

080021d4 <Read_MFRC522>:
 * Chuc nang:Doc 1 byte du lieu tu 1 thanh ghi MFRC522
 * Input:addr-> dia chi doc
 * Tra ve: Gia tri trong thanh ghi doc ve
 */
uchar Read_MFRC522(uchar addr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_CS_PIN, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	210c      	movs	r1, #12
 80021e2:	480f      	ldr	r0, [pc, #60]	; (8002220 <Read_MFRC522+0x4c>)
 80021e4:	f7ff fd5c 	bl	8001ca0 <GPIO_WriteToOutputPin>

	//Dinh dang dia chi:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ffb1 	bl	8002164 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8002202:	2000      	movs	r0, #0
 8002204:	f7ff ffae 	bl	8002164 <RC522_SPI_Transfer>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_CS_PIN, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	210c      	movs	r1, #12
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <Read_MFRC522+0x4c>)
 8002212:	f7ff fd45 	bl	8001ca0 <GPIO_WriteToOutputPin>

	return val;
 8002216:	7bfb      	ldrb	r3, [r7, #15]

}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40010c00 	.word	0x40010c00

08002224 <SetBitMask>:
 * Chuc nang:Set bit trong mot thanh ghi MFRC522
 * Input:reg--Thanh ghi cai dat; mask--gia tri set
 * Tra ve: Khong
 */
void SetBitMask(uchar reg, uchar mask)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	460a      	mov	r2, r1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffcc 	bl	80021d4 <Read_MFRC522>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	4313      	orrs	r3, r2
 8002246:	b2da      	uxtb	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff9b 	bl	8002188 <Write_MFRC522>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <ClearBitMask>:
 * Chuc nang:Reset bit trong thanh ghi MFRC522
 * Input:reg--Dia chi thanh ghi; mask--Gia tri bit can clear
 * Tra ve: Khong
 */
void ClearBitMask(uchar reg, uchar mask)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	460a      	mov	r2, r1
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	4613      	mov	r3, r2
 8002268:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ffb1 	bl	80021d4 <Read_MFRC522>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002276:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800227a:	43db      	mvns	r3, r3
 800227c:	b25a      	sxtb	r2, r3
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4013      	ands	r3, r2
 8002284:	b25b      	sxtb	r3, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff7b 	bl	8002188 <Write_MFRC522>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <AntennaOn>:
 * Chuc Nang:Mo anten, nen co it nhat 1 ms
 * Input: khong
 * Tra ve: khong
 */
void AntennaOn(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
//	temp = Read_MFRC522(TxControlReg);
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 800229e:	2103      	movs	r1, #3
 80022a0:	2014      	movs	r0, #20
 80022a2:	f7ff ffbf 	bl	8002224 <SetBitMask>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}

080022aa <MFRC522_Reset>:
 * Chuc nang:Khoi dong lai RC522
 * Input: Khong
 * Return: Khong
 */
void MFRC522_Reset(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80022ae:	210f      	movs	r1, #15
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff ff69 	bl	8002188 <Write_MFRC522>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <MFRC522_SPI_Init>:
 * Chuc nang:Khoi tao SPI
 * Input: Khong
 * Tra va: Khong
 */
void MFRC522_SPI_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
//	SPIx_Init(SPI2, SPI_BaudRatePrescaler_8);//9Mhz
	SPIx_Init(SPI2, SPI_SCLK_SPEED_DIV8);
 80022c0:	2102      	movs	r1, #2
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <MFRC522_SPI_Init+0x10>)
 80022c4:	f7ff feb8 	bl	8002038 <SPIx_Init>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40003800 	.word	0x40003800

080022d0 <MFRC522_Init>:
 * Chuc nang:Khoi tao RC522
 * Input: Khong
 * Tra va: Khong
 */
void MFRC522_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
	/* Khoi tao SPI */
	GPIO_Handle_t GPIO_InitStructure;
	/* GPIOD Periph clock enable */
//  RCC_APB2PeriphClockCmd(MFRC522_CS_RCC | MFRC522_RST_RCC, ENABLE);
	MFRC522_RST_RCC_EN();
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <MFRC522_Init+0xa0>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <MFRC522_Init+0xa0>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6193      	str	r3, [r2, #24]
	MFRC522_CS_RCC_EN();
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <MFRC522_Init+0xa0>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a22      	ldr	r2, [pc, #136]	; (8002370 <MFRC522_Init+0xa0>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6193      	str	r3, [r2, #24]

  /* Configure CS is output pushpull mode */
  GPIO_InitStructure.pGPIOx = MFRC522_CS_GPIO;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MFRC522_Init+0xa4>)
 80022f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PinConfig.GPIO_PinNumber = MFRC522_CS_PIN;				// Set digital pin 10 as OUTPUT to connect it to the RFID /ENABLE pin
 80022f2:	230c      	movs	r3, #12
 80022f4:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PinConfig.GPIO_PinModeAndSpeed = GPIO_MODE_OUT_SPEED_50MHZ;
 80022f6:	2303      	movs	r3, #3
 80022f8:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_PinConfig.GPIO_CRF = GPIO_CNF_GEOUT_PP;
 80022fa:	2300      	movs	r3, #0
 80022fc:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(&GPIO_InitStructure);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fabb 	bl	800187c <GPIO_Init>

  GPIO_InitStructure.pGPIOx = MFRC522_RST_GPIO;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MFRC522_Init+0xa4>)
 8002308:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PinConfig.GPIO_PinNumber = MFRC522_RST_PIN;			// Set digital pin 10 , Not Reset and Power-down
 800230a:	230b      	movs	r3, #11
 800230c:	723b      	strb	r3, [r7, #8]
  GPIO_Init(&GPIO_InitStructure);
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fab3 	bl	800187c <GPIO_Init>


  GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_CS_PIN, 1);			// Activate the RFID reader
 8002316:	2201      	movs	r2, #1
 8002318:	210c      	movs	r1, #12
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <MFRC522_Init+0xa4>)
 800231c:	f7ff fcc0 	bl	8001ca0 <GPIO_WriteToOutputPin>
  GPIO_WriteToOutputPin(MFRC522_CS_GPIO, MFRC522_RST_PIN, 1);			// not reset
 8002320:	2201      	movs	r2, #1
 8002322:	210b      	movs	r1, #11
 8002324:	4813      	ldr	r0, [pc, #76]	; (8002374 <MFRC522_Init+0xa4>)
 8002326:	f7ff fcbb 	bl	8001ca0 <GPIO_WriteToOutputPin>
//	GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
//	GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	MFRC522_SPI_Init();
 800232a:	f7ff ffc7 	bl	80022bc <MFRC522_SPI_Init>

	MFRC522_Reset();
 800232e:	f7ff ffbc 	bl	80022aa <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8002332:	218d      	movs	r1, #141	; 0x8d
 8002334:	202a      	movs	r0, #42	; 0x2a
 8002336:	f7ff ff27 	bl	8002188 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 800233a:	213e      	movs	r1, #62	; 0x3e
 800233c:	202b      	movs	r0, #43	; 0x2b
 800233e:	f7ff ff23 	bl	8002188 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8002342:	211e      	movs	r1, #30
 8002344:	202d      	movs	r0, #45	; 0x2d
 8002346:	f7ff ff1f 	bl	8002188 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800234a:	2100      	movs	r1, #0
 800234c:	202c      	movs	r0, #44	; 0x2c
 800234e:	f7ff ff1b 	bl	8002188 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	2015      	movs	r0, #21
 8002356:	f7ff ff17 	bl	8002188 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Gia tri ban dau 0x6363	???
 800235a:	213d      	movs	r1, #61	; 0x3d
 800235c:	2011      	movs	r0, #17
 800235e:	f7ff ff13 	bl	8002188 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8002362:	f7ff ff9a 	bl	800229a <AntennaOn>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40010c00 	.word	0x40010c00

08002378 <MFRC522_ToCard>:
 *			 backData--Du lieu nhan duoc tro lai
 *			 backLen--Tra ve do dai bit cua du lieu
 * Tra ve: MI_OK neu thanh cong
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	4613      	mov	r3, r2
 8002388:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800238a:	2302      	movs	r3, #2
 800238c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002392:	2300      	movs	r3, #0
 8002394:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d007      	beq.n	80023ac <MFRC522_ToCard+0x34>
 800239c:	2b0e      	cmp	r3, #14
 800239e:	d000      	beq.n	80023a2 <MFRC522_ToCard+0x2a>
			irqEn = 0x77;
			waitIRq = 0x30;
			break;
		}
		default:
			break;
 80023a0:	e009      	b.n	80023b6 <MFRC522_ToCard+0x3e>
			irqEn = 0x12;
 80023a2:	2312      	movs	r3, #18
 80023a4:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80023a6:	2310      	movs	r3, #16
 80023a8:	777b      	strb	r3, [r7, #29]
			break;
 80023aa:	e004      	b.n	80023b6 <MFRC522_ToCard+0x3e>
			irqEn = 0x77;
 80023ac:	2377      	movs	r3, #119	; 0x77
 80023ae:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80023b0:	2330      	movs	r3, #48	; 0x30
 80023b2:	777b      	strb	r3, [r7, #29]
			break;
 80023b4:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 80023b6:	7fbb      	ldrb	r3, [r7, #30]
 80023b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff fee1 	bl	8002188 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear tat ca cac bit yeu cau ngat
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	2004      	movs	r0, #4
 80023ca:	f7ff ff46 	bl	800225a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, Khoi tao FIFO
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	200a      	movs	r0, #10
 80023d2:	f7ff ff27 	bl	8002224 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 80023d6:	2100      	movs	r1, #0
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff fed5 	bl	8002188 <Write_MFRC522>

	// Ghi du lieu vao FIFO
    for (i=0; i<sendLen; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e00a      	b.n	80023fa <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	2009      	movs	r0, #9
 80023f0:	f7ff feca 	bl	8002188 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	3301      	adds	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3f0      	bcc.n	80023e4 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	4619      	mov	r1, r3
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff febe 	bl	8002188 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d103      	bne.n	800241a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	200d      	movs	r0, #13
 8002416:	f7ff ff05 	bl	8002224 <SetBitMask>
	}

	//Cho doi de nhan duoc du lieu day du
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 800241a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800241e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002420:	2004      	movs	r0, #4
 8002422:	f7ff fed7 	bl	80021d4 <Read_MFRC522>
 8002426:	4603      	mov	r3, r0
 8002428:	773b      	strb	r3, [r7, #28]
        i--;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	3b01      	subs	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <MFRC522_ToCard+0xd4>
 8002436:	7f3b      	ldrb	r3, [r7, #28]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <MFRC522_ToCard+0xd4>
 8002440:	7f3a      	ldrb	r2, [r7, #28]
 8002442:	7f7b      	ldrb	r3, [r7, #29]
 8002444:	4013      	ands	r3, r2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0e9      	beq.n	8002420 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	200d      	movs	r0, #13
 8002450:	f7ff ff03 	bl	800225a <ClearBitMask>

    if (i != 0)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d052      	beq.n	8002500 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800245a:	2006      	movs	r0, #6
 800245c:	f7ff feba 	bl	80021d4 <Read_MFRC522>
 8002460:	4603      	mov	r3, r0
 8002462:	f003 031b 	and.w	r3, r3, #27
 8002466:	2b00      	cmp	r3, #0
 8002468:	d148      	bne.n	80024fc <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800246e:	7f3a      	ldrb	r2, [r7, #28]
 8002470:	7fbb      	ldrb	r3, [r7, #30]
 8002472:	4013      	ands	r3, r2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;			//??
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d13b      	bne.n	8002500 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002488:	200a      	movs	r0, #10
 800248a:	f7ff fea3 	bl	80021d4 <Read_MFRC522>
 800248e:	4603      	mov	r3, r0
 8002490:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002492:	200c      	movs	r0, #12
 8002494:	f7ff fe9e 	bl	80021d4 <Read_MFRC522>
 8002498:	4603      	mov	r3, r0
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80024a6:	7f3b      	ldrb	r3, [r7, #28]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	4413      	add	r3, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e004      	b.n	80024c2 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80024b8:	7f3b      	ldrb	r3, [r7, #28]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	461a      	mov	r2, r3
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80024c2:	7f3b      	ldrb	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <MFRC522_ToCard+0x154>
                {
					n = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80024cc:	7f3b      	ldrb	r3, [r7, #28]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d901      	bls.n	80024d6 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80024d2:	2310      	movs	r3, #16
 80024d4:	773b      	strb	r3, [r7, #28]
				}

				//Doc FIFO trong cac du lieu nhan duoc
                for (i=0; i<n; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e00a      	b.n	80024f2 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	18d4      	adds	r4, r2, r3
 80024e2:	2009      	movs	r0, #9
 80024e4:	f7ff fe76 	bl	80021d4 <Read_MFRC522>
 80024e8:	4603      	mov	r3, r0
 80024ea:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	7f3b      	ldrb	r3, [r7, #28]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3f0      	bcc.n	80024dc <MFRC522_ToCard+0x164>
 80024fa:	e001      	b.n	8002500 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80024fc:	2302      	movs	r3, #2
 80024fe:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8002500:	7ffb      	ldrb	r3, [r7, #31]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}

0800250a <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK neu thanh cong
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af02      	add	r7, sp, #8
 8002510:	4603      	mov	r3, r0
 8002512:	6039      	str	r1, [r7, #0]
 8002514:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			//cac bit du lieu nhan duoc

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8002516:	2107      	movs	r1, #7
 8002518:	200d      	movs	r0, #13
 800251a:	f7ff fe35 	bl	8002188 <Write_MFRC522>

	TagType[0] = reqMode;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	200c      	movs	r0, #12
 8002532:	f7ff ff21 	bl	8002378 <MFRC522_ToCard>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <MFRC522_Request+0x3c>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d001      	beq.n	800254a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8002546:	2302      	movs	r3, #2
 8002548:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <MFRC522_Anticoll>:
 * Chuc nang:Phat hien chong va cham, chon the va doc so serial the
 * Input:serNum--Tra ve serial the 4 byte, byte 5 la ma checksum
 * Tra ve: MI_OK neu thanh cong
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800255c:	2300      	movs	r3, #0
 800255e:	737b      	strb	r3, [r7, #13]
    uint unLen;


    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002560:	2100      	movs	r1, #0
 8002562:	200d      	movs	r0, #13
 8002564:	f7ff fe10 	bl	8002188 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2293      	movs	r2, #147	; 0x93
 800256c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3301      	adds	r3, #1
 8002572:	2220      	movs	r2, #32
 8002574:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	200c      	movs	r0, #12
 8002584:	f7ff fef8 	bl	8002378 <MFRC522_ToCard>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <MFRC522_Anticoll+0x70>
	{
		//Kiem tra so serial the
		for (i=0; i<4; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	73bb      	strb	r3, [r7, #14]
 8002596:	e009      	b.n	80025ac <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	7b7b      	ldrb	r3, [r7, #13]
 80025a2:	4053      	eors	r3, r2
 80025a4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	3301      	adds	r3, #1
 80025aa:	73bb      	strb	r3, [r7, #14]
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d9f2      	bls.n	8002598 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	7b7a      	ldrb	r2, [r7, #13]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80025c0:	2302      	movs	r3, #2
 80025c2:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <RCC_PillSystem>:
uint8_t PLLMUL[16] = {2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14, 15, 16, 16};

volatile uint32_t	tick;

uint32_t RCC_PillSystem()
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
	uint8_t temp,PillStatus,PLLXTPRE,pllmul;
	uint32_t PillClk,PillSrc;

	PillStatus = ( RCC->CFGR >> 16 ) & 0x01 ;
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <RCC_PillSystem+0x64>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	72fb      	strb	r3, [r7, #11]
	if(PillStatus == 0)
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <RCC_PillSystem+0x20>
	{
		// HSI oscillator clock / 2 selected
		PillSrc = 4000000;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <RCC_PillSystem+0x68>)
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e00e      	b.n	800260e <RCC_PillSystem+0x3e>
	}
	else
	{
		// HSE oscillator clock selected as PLL input clock
		PLLXTPRE = ( RCC->CFGR >> 17 ) & 0x01 ;
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <RCC_PillSystem+0x64>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c5b      	lsrs	r3, r3, #17
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	72bb      	strb	r3, [r7, #10]
		if(PLLXTPRE == 1)
 80025fe:	7abb      	ldrb	r3, [r7, #10]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <RCC_PillSystem+0x3a>
		{
			//HSE clock divided by 2
			PillSrc = 4000000;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <RCC_PillSystem+0x68>)
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e001      	b.n	800260e <RCC_PillSystem+0x3e>
		}
		else
		{
			//HSE clock divided by 2
			PillSrc = 8000000;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <RCC_PillSystem+0x6c>)
 800260c:	60fb      	str	r3, [r7, #12]
		}
	}
	temp = ( RCC->CFGR >> 18 ) & 0xFF;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <RCC_PillSystem+0x64>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	727b      	strb	r3, [r7, #9]
	pllmul = PLLMUL[temp];
 8002616:	7a7b      	ldrb	r3, [r7, #9]
 8002618:	4a09      	ldr	r2, [pc, #36]	; (8002640 <RCC_PillSystem+0x70>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	723b      	strb	r3, [r7, #8]

	PillClk = PillSrc * pllmul;
 800261e:	7a3a      	ldrb	r2, [r7, #8]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	607b      	str	r3, [r7, #4]

	return PillClk;
 8002628:	687b      	ldr	r3, [r7, #4]

}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000
 8002638:	003d0900 	.word	0x003d0900
 800263c:	007a1200 	.word	0x007a1200
 8002640:	20000040 	.word	0x20000040

08002644 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value()
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemCLK;
	uint8_t clkStatus,temp,ahb,apb1;

	clkStatus = ( RCC->CFGR >> 2 ) & 0x03 ;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <RCC_GetPCLK1Value+0x9c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	727b      	strb	r3, [r7, #9]


	if(clkStatus == 0)
 8002658:	7a7b      	ldrb	r3, [r7, #9]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <RCC_GetPCLK1Value+0x20>
	{
		//  HSI oscillator used as system clock
		SystemCLK = 8000000;
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <RCC_GetPCLK1Value+0xa0>)
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e00a      	b.n	800267a <RCC_GetPCLK1Value+0x36>
	}
	else if (clkStatus == 1)
 8002664:	7a7b      	ldrb	r3, [r7, #9]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <RCC_GetPCLK1Value+0x2c>
	{
		//HSE oscillator used as system clock
		SystemCLK = 8000000;
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <RCC_GetPCLK1Value+0xa0>)
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e004      	b.n	800267a <RCC_GetPCLK1Value+0x36>
	}
	else if (clkStatus == 2)
 8002670:	7a7b      	ldrb	r3, [r7, #9]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d101      	bne.n	800267a <RCC_GetPCLK1Value+0x36>
	{
		RCC_PillSystem();
 8002676:	f7ff ffab 	bl	80025d0 <RCC_PillSystem>
	}

	temp = (RCC->CFGR >> 4) & 0x0F;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <RCC_GetPCLK1Value+0x9c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8002688:	7a3b      	ldrb	r3, [r7, #8]
 800268a:	2b07      	cmp	r3, #7
 800268c:	d802      	bhi.n	8002694 <RCC_GetPCLK1Value+0x50>
	{
		ahb = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	72fb      	strb	r3, [r7, #11]
 8002692:	e005      	b.n	80026a0 <RCC_GetPCLK1Value+0x5c>
	}
	else
	{
		ahb = AHB_Prescaler[temp - 8];
 8002694:	7a3b      	ldrb	r3, [r7, #8]
 8002696:	3b08      	subs	r3, #8
 8002698:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <RCC_GetPCLK1Value+0xa4>)
 800269a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800269e:	72fb      	strb	r3, [r7, #11]
	}
	temp = (RCC->CFGR >> 8) & 0x07;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <RCC_GetPCLK1Value+0x9c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80026ae:	7a3b      	ldrb	r3, [r7, #8]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d802      	bhi.n	80026ba <RCC_GetPCLK1Value+0x76>
	{
		apb1 = 1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	72bb      	strb	r3, [r7, #10]
 80026b8:	e004      	b.n	80026c4 <RCC_GetPCLK1Value+0x80>
	}
	else
	{
		apb1 = APB1_Prescaler[temp - 4];
 80026ba:	7a3b      	ldrb	r3, [r7, #8]
 80026bc:	3b04      	subs	r3, #4
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <RCC_GetPCLK1Value+0xa8>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	72bb      	strb	r3, [r7, #10]
	}


	pclk1 = (SystemCLK/ahb)/apb1;
 80026c4:	7afb      	ldrb	r3, [r7, #11]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026cc:	7abb      	ldrb	r3, [r7, #10]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	607b      	str	r3, [r7, #4]

	return pclk1;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	2000002c 	.word	0x2000002c
 80026ec:	2000003c 	.word	0x2000003c

080026f0 <RCC_GetPCLK2Value>:
uint32_t RCC_GetPCLK2Value()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
	{
		uint32_t pclk2,SystemCLK;
		uint8_t clkStatus,temp,ahb,apb2;

		clkStatus = ( RCC->CFGR >> 2 ) & 0x03 ;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <RCC_GetPCLK2Value+0x9c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	727b      	strb	r3, [r7, #9]


		if(clkStatus == 0)
 8002704:	7a7b      	ldrb	r3, [r7, #9]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <RCC_GetPCLK2Value+0x20>
		{
			//  HSI oscillator used as system clock
			SystemCLK = 8000000;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <RCC_GetPCLK2Value+0xa0>)
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e00a      	b.n	8002726 <RCC_GetPCLK2Value+0x36>
		}
		else if (clkStatus == 1)
 8002710:	7a7b      	ldrb	r3, [r7, #9]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <RCC_GetPCLK2Value+0x2c>
		{
			//HSE oscillator used as system clock
			SystemCLK = 8000000;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <RCC_GetPCLK2Value+0xa0>)
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e004      	b.n	8002726 <RCC_GetPCLK2Value+0x36>
		}
		else if (clkStatus == 2)
 800271c:	7a7b      	ldrb	r3, [r7, #9]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d101      	bne.n	8002726 <RCC_GetPCLK2Value+0x36>
		{
			// PLL used as system clock
			RCC_PillSystem();
 8002722:	f7ff ff55 	bl	80025d0 <RCC_PillSystem>
		}

		temp = (RCC->CFGR >> 4) & 0x0F;
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <RCC_GetPCLK2Value+0x9c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	723b      	strb	r3, [r7, #8]
		if(temp < 8)
 8002734:	7a3b      	ldrb	r3, [r7, #8]
 8002736:	2b07      	cmp	r3, #7
 8002738:	d802      	bhi.n	8002740 <RCC_GetPCLK2Value+0x50>
		{
			ahb = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	72fb      	strb	r3, [r7, #11]
 800273e:	e005      	b.n	800274c <RCC_GetPCLK2Value+0x5c>
		}
		else
		{
			ahb = AHB_Prescaler[temp - 8];
 8002740:	7a3b      	ldrb	r3, [r7, #8]
 8002742:	3b08      	subs	r3, #8
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <RCC_GetPCLK2Value+0xa4>)
 8002746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800274a:	72fb      	strb	r3, [r7, #11]
		}
		temp = (RCC->CFGR >> 11) & 0x07;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <RCC_GetPCLK2Value+0x9c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0adb      	lsrs	r3, r3, #11
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	723b      	strb	r3, [r7, #8]
		if(temp < 4)
 800275a:	7a3b      	ldrb	r3, [r7, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d802      	bhi.n	8002766 <RCC_GetPCLK2Value+0x76>
		{
			apb2 = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	72bb      	strb	r3, [r7, #10]
 8002764:	e004      	b.n	8002770 <RCC_GetPCLK2Value+0x80>
		}
		else
		{
			apb2 = APB1_Prescaler[temp - 4];
 8002766:	7a3b      	ldrb	r3, [r7, #8]
 8002768:	3b04      	subs	r3, #4
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <RCC_GetPCLK2Value+0xa8>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	72bb      	strb	r3, [r7, #10]
		}


		pclk2 = (SystemCLK/ahb)/apb2;
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	7abb      	ldrb	r3, [r7, #10]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	607b      	str	r3, [r7, #4]

		return pclk2;
 8002780:	687b      	ldr	r3, [r7, #4]
	}
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200
 8002794:	2000002c 	.word	0x2000002c
 8002798:	2000003c 	.word	0x2000003c

0800279c <SysTickInit>:
void SysTickInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
	SYSTICK->LOAD = 8U*1000U - 1U;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <SysTickInit+0x40>)
 80027a2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80027a6:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0U;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <SysTickInit+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
	SYSTICK->CTRL |= (1 << SYSTICK_CSR_TICKINT);
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <SysTickInit+0x40>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTickInit+0x40>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6013      	str	r3, [r2, #0]
	SYSTICK->CTRL |= (1 << SYSTICK_CSR_CLKSOURCE);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SysTickInit+0x40>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <SysTickInit+0x40>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6013      	str	r3, [r2, #0]
	SYSTICK->CTRL |= (1 << SYSTICK_CSR_ENABLE);
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTickInit+0x40>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <SysTickInit+0x40>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <GetTick>:
uint32_t GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	return tick;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <GetTick+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	20000228 	.word	0x20000228

080027f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	tick++;
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Handler+0x18>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a03      	ldr	r2, [pc, #12]	; (800280c <SysTick_Handler+0x18>)
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000228 	.word	0x20000228

08002810 <SPI_PeriClockControl>:
 * Input:*pSPIx-> địa chỉ của SPI , EnorDi-> Enable hay Diable
 * Trả về: Không
 *******************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx,bool EnorDi);
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx,bool EnorDi)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi) {
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <SPI_PeriClockControl+0x54>
	        if (pSPIx == SPI1) SPI1_PCLK_EN();
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <SPI_PeriClockControl+0xa0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d106      	bne.n	8002838 <SPI_PeriClockControl+0x28>
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002834:	6193      	str	r3, [r2, #24]
	    {
	    	if (pSPIx == SPI1) SPI1_PCLK_DI();
			else if (pSPIx == SPI2) SPI2_PCLK_DI();
			else if (pSPIx == SPI3) SPI3_PCLK_DI();
	    }
}
 8002836:	e035      	b.n	80028a4 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI2) SPI2_PCLK_EN();
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <SPI_PeriClockControl+0xa8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d106      	bne.n	800284e <SPI_PeriClockControl+0x3e>
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284a:	61d3      	str	r3, [r2, #28]
}
 800284c:	e02a      	b.n	80028a4 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI3) SPI3_PCLK_EN();
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <SPI_PeriClockControl+0xac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d126      	bne.n	80028a4 <SPI_PeriClockControl+0x94>
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 800285c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002860:	61d3      	str	r3, [r2, #28]
}
 8002862:	e01f      	b.n	80028a4 <SPI_PeriClockControl+0x94>
	    	if (pSPIx == SPI1) SPI1_PCLK_DI();
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <SPI_PeriClockControl+0xa0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d106      	bne.n	800287a <SPI_PeriClockControl+0x6a>
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002876:	6193      	str	r3, [r2, #24]
}
 8002878:	e014      	b.n	80028a4 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI2) SPI2_PCLK_DI();
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <SPI_PeriClockControl+0xa8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d106      	bne.n	8002890 <SPI_PeriClockControl+0x80>
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 8002888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288c:	61d3      	str	r3, [r2, #28]
}
 800288e:	e009      	b.n	80028a4 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3) SPI3_PCLK_DI();
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <SPI_PeriClockControl+0xac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d105      	bne.n	80028a4 <SPI_PeriClockControl+0x94>
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <SPI_PeriClockControl+0xa4>)
 800289e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028a2:	61d3      	str	r3, [r2, #28]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40003800 	.word	0x40003800
 80028bc:	40003c00 	.word	0x40003c00

080028c0 <SPI_Init>:
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

	// Bật sung clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff9e 	bl	8002810 <SPI_PeriClockControl>

// đầu tiên cấu hình cho thanh ghi SPI_CR1

	uint32_t tempreg = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
	// bổ xung ssi
	tempreg |= (1 << SPI_CR1_SSI);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	60fb      	str	r3, [r7, #12]
	//1. cấu hình mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
	//2. cấu hình DFF
	tempreg |=	(pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	789b      	ldrb	r3, [r3, #2]
 80028f2:	02db      	lsls	r3, r3, #11
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
	//3. cấu hình CPHA
	tempreg	|=	(pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
	//4. cấu hình CPOL
	tempreg	|=	(pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	791b      	ldrb	r3, [r3, #4]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
	//5. cấu hình SPEED
	tempreg |= 	(pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	799b      	ldrb	r3, [r3, #6]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	461a      	mov	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
	//6. cấu hình NSS
	if(pSPIHandle->SPIConfig.SPI_SSM == SPI_SSM_EN)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	795b      	ldrb	r3, [r3, #5]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d107      	bne.n	800293c <SPI_Init+0x7c>
	{
		tempreg	|=	(pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	795b      	ldrb	r3, [r3, #5]
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e00b      	b.n	8002954 <SPI_Init+0x94>
	}else
	{
		tempreg	&=	~(pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	795b      	ldrb	r3, [r3, #5]
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	43db      	mvns	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
		SPI_SSOEConfig(SPI2, ENABLE);
 800294c:	2101      	movs	r1, #1
 800294e:	4818      	ldr	r0, [pc, #96]	; (80029b0 <SPI_Init+0xf0>)
 8002950:	f000 f879 	bl	8002a46 <SPI_SSOEConfig>
	}


	//7. cấu hình BUS
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <SPI_Init+0xae>
	{
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002962:	60fb      	str	r3, [r7, #12]
		tempreg	&= ~(1 << SPI_CR1_RXONLY);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e014      	b.n	8002998 <SPI_Init+0xd8>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d104      	bne.n	8002980 <SPI_Init+0xc0>
	{
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e00b      	b.n	8002998 <SPI_Init+0xd8>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d107      	bne.n	8002998 <SPI_Init+0xd8>
	{
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800298e:	60fb      	str	r3, [r7, #12]
		tempreg	|= (1 << SPI_CR1_RXONLY);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002996:	60fb      	str	r3, [r7, #12]
	}

	// nhét hết vào thanh ghi CR1
	pSPIHandle->pSPIx->CR1	|= tempreg;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

	//pSPIHandle->pSPIx->CRCPR = pSPIHandle->SPIConfig.SPI_CRCPolynomial;
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40003800 	.word	0x40003800

080029b4 <SPI_GetFlagStatus>:
 * 			FlagName ->	tên của cờ
 * Trả về: 	FLAG_SET => cờ lên 1
 * 			FLAG_RESET => cờ xuống 0
 *******************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <SPI_PeriControl>:
 * Input:	*pSPIx-> địa chỉ của SPI loại (SPI1,SPI2,SPI3)
 * 			EnorDi -> enable hay disable
 * Trả về: Không
 *******************************************************************/
void SPI_PeriControl(SPI_RegDef_t *pSPIx,bool EnorDi)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == 1)
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <SPI_PeriControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 80029f8:	e005      	b.n	8002a06 <SPI_PeriControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <SPI_SSIConfig>:
 * Input:	*pSPIx-> địa chỉ của SPI loại (SPI1,SPI2,SPI3)
 * 			EnorDi -> enable hay disable
 * Trả về: Không
 *******************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx,bool EnorDi)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == 1)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SSI);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
	}
}
 8002a2e:	e005      	b.n	8002a3c <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <SPI_SSOEConfig>:
 * Input:	*pSPIx-> địa chỉ của SPI loại (SPI1,SPI2,SPI3)
 * 			EnorDi -> enable hay disable
 * Trả về: Không
 *******************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,bool EnorDi)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == 1)
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<< SPI_CR2_SSOE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8002a64:	e005      	b.n	8002a72 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 0204 	bic.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <SPI_SendData>:
 * 			pTxBuffer -> địa chỉ của Txbuffer
 * 			len -> độ dài của dữ liệu
 * Trả về: Không
 *******************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx ,uint8_t *pTxBuffer,uint32_t len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	SPI_PeriControl(SPI2, ENABLE);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	481c      	ldr	r0, [pc, #112]	; (8002afc <SPI_SendData+0x80>)
 8002a8c:	f7ff ffa5 	bl	80029da <SPI_PeriControl>
	while(len > 0)
 8002a90:	e025      	b.n	8002ade <SPI_SendData+0x62>
	{
		// 1. chờ cờ TXE set (chờ cho thanh txbuffer trống)
		while (SPI_GetFlagStatus(pSPIx, SPI_FLAG_TXE) == FLAG_RESET);
 8002a92:	bf00      	nop
 8002a94:	2102      	movs	r1, #2
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff ff8c 	bl	80029b4 <SPI_GetFlagStatus>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f8      	beq.n	8002a94 <SPI_SendData+0x18>
		//2. kiểm tra DFF

		if(((pSPIx->CR1 >> SPI_CR1_DFF) & 1) == SPI_DFF_16BIT)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0adb      	lsrs	r3, r3, #11
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10b      	bne.n	8002ac8 <SPI_SendData+0x4c>
		{
			// 16 bit
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	60da      	str	r2, [r3, #12]
			(uint16_t*) pTxBuffer++;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
			len--;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e007      	b.n	8002ad8 <SPI_SendData+0x5c>

		}else
		{
			pSPIx->DR = *pTxBuffer;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
		}

		 len--;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1d6      	bne.n	8002a92 <SPI_SendData+0x16>
	}
	while( SPI_GetFlagStatus(SPI2, SPI_FLAG_BUSY) );
 8002ae4:	bf00      	nop
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <SPI_SendData+0x80>)
 8002aea:	f7ff ff63 	bl	80029b4 <SPI_GetFlagStatus>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f8      	bne.n	8002ae6 <SPI_SendData+0x6a>
	//SPI_PeriControl(SPI2, DISABLE);
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40003800 	.word	0x40003800

08002b00 <SPI_ReceiveData>:
 * 			pRxBuffer ->địa chỉ của RX buffer
 * 			len -> độ dài của dữ liệu
 * Trả về: Không
 *******************************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx ,uint8_t *pRxBuffer,uint32_t len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8002b0c:	e025      	b.n	8002b5a <SPI_ReceiveData+0x5a>
	{
		// 1. chờ cờ RXXE set ( chờ cho thanh rxbuffer đầy)
		while (SPI_GetFlagStatus(pSPIx, SPI_FLAG_RXNE) == FLAG_RESET);
 8002b0e:	bf00      	nop
 8002b10:	2101      	movs	r1, #1
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff4e 	bl	80029b4 <SPI_GetFlagStatus>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f8      	beq.n	8002b10 <SPI_ReceiveData+0x10>
		//2. kiểm tra DFF

		if(((pSPIx->CR1 >> SPI_CR1_DFF) & 1) == SPI_DFF_16BIT)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0adb      	lsrs	r3, r3, #11
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10b      	bne.n	8002b44 <SPI_ReceiveData+0x44>
		{
			// 16 bit
			*((uint16_t *) pRxBuffer) = pSPIx->DR ;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	801a      	strh	r2, [r3, #0]
			len--;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]
			(uint16_t *) pRxBuffer++;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	e007      	b.n	8002b54 <SPI_ReceiveData+0x54>

		}else
		{
			 *pRxBuffer = pSPIx->DR ;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	701a      	strb	r2, [r3, #0]
			 pRxBuffer++;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
		}

		 len--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1d6      	bne.n	8002b0e <SPI_ReceiveData+0xe>
	}
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <USART_PeriClockControl>:
 * Input:*pUSARTx-> địa chỉ của SPI , EnorDi-> Enable hay Diable
 * Trả về: Không
 *******************************************************************/
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(USART_Handle_t *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout);
void USART_PeriClockControl(USART_RegDef_t *pUSART,bool EnorDi)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
	if (EnorDi) {
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <USART_PeriClockControl+0x54>
	        if (pUSART == USART1) USART1_PCLK_EN();
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <USART_PeriClockControl+0xa0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d106      	bne.n	8002b90 <USART_PeriClockControl+0x28>
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8c:	6193      	str	r3, [r2, #24]
	    } else {
	    	if (pUSART == USART1) USART1_PCLK_DI();
			else if (pUSART == USART2) USART2_PCLK_DI();
			else if (pUSART == USART3) USART3_PCLK_DI();
	    }
}
 8002b8e:	e035      	b.n	8002bfc <USART_PeriClockControl+0x94>
	        else if (pUSART == USART2) USART2_PCLK_EN();
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <USART_PeriClockControl+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d106      	bne.n	8002ba6 <USART_PeriClockControl+0x3e>
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba2:	61d3      	str	r3, [r2, #28]
}
 8002ba4:	e02a      	b.n	8002bfc <USART_PeriClockControl+0x94>
	        else if (pUSART == USART3) USART3_PCLK_EN();
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <USART_PeriClockControl+0xac>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d126      	bne.n	8002bfc <USART_PeriClockControl+0x94>
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	61d3      	str	r3, [r2, #28]
}
 8002bba:	e01f      	b.n	8002bfc <USART_PeriClockControl+0x94>
	    	if (pUSART == USART1) USART1_PCLK_DI();
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <USART_PeriClockControl+0xa0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d106      	bne.n	8002bd2 <USART_PeriClockControl+0x6a>
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bce:	6193      	str	r3, [r2, #24]
}
 8002bd0:	e014      	b.n	8002bfc <USART_PeriClockControl+0x94>
			else if (pUSART == USART2) USART2_PCLK_DI();
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <USART_PeriClockControl+0xa8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d106      	bne.n	8002be8 <USART_PeriClockControl+0x80>
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002be0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002be4:	61d3      	str	r3, [r2, #28]
}
 8002be6:	e009      	b.n	8002bfc <USART_PeriClockControl+0x94>
			else if (pUSART == USART3) USART3_PCLK_DI();
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <USART_PeriClockControl+0xac>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d105      	bne.n	8002bfc <USART_PeriClockControl+0x94>
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <USART_PeriClockControl+0xa4>)
 8002bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfa:	61d3      	str	r3, [r2, #28]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40004400 	.word	0x40004400
 8002c14:	40004800 	.word	0x40004800

08002c18 <USART_BaudRateConfigure>:

void USART_BaudRateConfigure(USART_RegDef_t *pUSARTx , uint32_t BaudRate)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	uint32_t Mantissa_part;
	uint32_t Fraction_part;

	uint32_t tempreg = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]

	if(pUSARTx == USART1 )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <USART_BaudRateConfigure+0x7c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d103      	bne.n	8002c36 <USART_BaudRateConfigure+0x1e>
	{
		//APB2
		PCLKx = RCC_GetPCLK2Value();
 8002c2e:	f7ff fd5f 	bl	80026f0 <RCC_GetPCLK2Value>
 8002c32:	61f8      	str	r0, [r7, #28]
 8002c34:	e002      	b.n	8002c3c <USART_BaudRateConfigure+0x24>
	}
	else
	{
		PCLKx = RCC_GetPCLK1Value();
 8002c36:	f7ff fd05 	bl	8002644 <RCC_GetPCLK1Value>
 8002c3a:	61f8      	str	r0, [r7, #28]
	}

	usartdiv = (PCLKx * 100) / (16 * BaudRate);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2264      	movs	r2, #100	; 0x64
 8002c40:	fb02 f203 	mul.w	r2, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]

	Mantissa_part = usartdiv/100;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <USART_BaudRateConfigure+0x80>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	613b      	str	r3, [r7, #16]
	tempreg |= 	(Mantissa_part << 4);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]

	Fraction_part = ((usartdiv - Mantissa_part * 100)*16 +50) /100;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2264      	movs	r2, #100	; 0x64
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	3332      	adds	r3, #50	; 0x32
 8002c74:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <USART_BaudRateConfigure+0x80>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	60fb      	str	r3, [r7, #12]

	tempreg |= Fraction_part;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]

	pUSARTx->BRR = tempreg;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40013800 	.word	0x40013800
 8002c98:	51eb851f 	.word	0x51eb851f

08002c9c <USART_PeriControl>:
/*
 *
 */
void USART_PeriControl(USART_RegDef_t *pUSARTx,bool EnorDi)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <USART_PeriControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]
	}
	else pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
}
 8002cba:	e005      	b.n	8002cc8 <USART_PeriControl+0x2c>
	else pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <USART_Init>:
/*
 * Init and De-init
 */

uint8_t USART_Init(USART_Handle_t *pUSARTHandle)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	if(pUSARTHandle == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <USART_Init+0x12>
	{
		return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e06e      	b.n	8002dc2 <USART_Init+0xf0>
	}
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff3c 	bl	8002b68 <USART_PeriClockControl>
	uint32_t tempregcr1 = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
	uint32_t tempregcr2 = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
//	uint32_t tempregcr3 = 0

	//1. cấu hình MODE
		if(pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_TX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	791b      	ldrb	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <USART_Init+0x38>
		{
			tempregcr1 |= (1 << USART_CR1_TE);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e014      	b.n	8002d34 <USART_Init+0x62>
		}else if(pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_TX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	791b      	ldrb	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <USART_Init+0x4a>
		{
			tempregcr1 |= (1 << USART_CR1_RE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f043 0304 	orr.w	r3, r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e00b      	b.n	8002d34 <USART_Init+0x62>
		}else if (pUSARTHandle->USARTConfig.Mode == USART_MODE_TXRX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d107      	bne.n	8002d34 <USART_Init+0x62>
		{
			tempregcr1 |= (1 << USART_CR1_TE);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f043 0308 	orr.w	r3, r3, #8
 8002d2a:	60fb      	str	r3, [r7, #12]
			tempregcr1 |= (1 << USART_CR1_RE);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
		}

	//2. cấu hình độ dài bit 8 or 9 (9 bit mà không phải parity thì là truyền 1 byte and 1 bit )
			tempregcr1 |= (pUSARTHandle->USARTConfig.WordLength << USART_CR1_M);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7b5b      	ldrb	r3, [r3, #13]
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
	//3. cấu hình bit parity ( chẵn or lẻ )
			if(pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_EVEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7b9b      	ldrb	r3, [r3, #14]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <USART_Init+0x8a>
			{
				tempregcr1 |= (1 << USART_CR1_PCE);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d50:	60fb      	str	r3, [r7, #12]
				tempregcr1 &= ~(1 <<USART_CR1_PS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e014      	b.n	8002d86 <USART_Init+0xb4>
			}else if (pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_ODD)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7b9b      	ldrb	r3, [r3, #14]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <USART_Init+0xa4>
			{
				tempregcr1 |= (1 << USART_CR1_PCE);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6a:	60fb      	str	r3, [r7, #12]
				tempregcr1 |= (1 <<USART_CR1_PS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e007      	b.n	8002d86 <USART_Init+0xb4>
			}else if (pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_DI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7b9b      	ldrb	r3, [r3, #14]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <USART_Init+0xb4>
			{
				tempregcr1 &= ~(1 << USART_CR1_PCE);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d84:	60fb      	str	r3, [r7, #12]
			}

	//4. cấu hình STOP bits
		tempregcr2 |= (pUSARTHandle->USARTConfig.NuOfStopBits << USART_CR2_STOP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7b1b      	ldrb	r3, [r3, #12]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]




	//5. cấu hình tốc độ Baud
		USART_BaudRateConfigure(pUSARTHandle->pUSARTx, pUSARTHandle->USARTConfig.Baudrate);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f7ff ff3a 	bl	8002c18 <USART_BaudRateConfigure>
	//6. cấu hình USART hardware flow control

		pUSARTHandle->pUSARTx->CR1 = tempregcr1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR2 = tempregcr2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	611a      	str	r2, [r3, #16]
//		pUSARTHandle->pUSARTx->CR3 = tempregcr3
//		USART_PeriControl(pUSARTHandle->pUSARTx, ENABLE);
		pUSARTHandle->gState = USART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	769a      	strb	r2, [r3, #26]
		pUSARTHandle->RxState = USART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	76da      	strb	r2, [r3, #27]

		return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <USART_GetFlagStatus>:
 * 			FlagName ->	tên của cờ
 * Trả về: 	FLAG_SET => cờ lên 1
 * 			FLAG_RESET => cờ xuống 0
 *******************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <USART_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <USART_ReceiveDataIT>:

	}
	return state;
}
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle ,uint8_t *pRxBuffer,uint32_t len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	uint8_t state = pUSARTHandle->RxState;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	7edb      	ldrb	r3, [r3, #27]
 8002e00:	75fb      	strb	r3, [r7, #23]
	USART_PeriControl(pUSARTHandle->pUSARTx, ENABLE);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff47 	bl	8002c9c <USART_PeriControl>
	if(state != USART_STATE_BUSY_IN_RX)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b22      	cmp	r3, #34	; 0x22
 8002e12:	d011      	beq.n	8002e38 <USART_ReceiveDataIT+0x48>
	{
		//1. Lưu địa chỉ Tx Bufer và chiều dài vào biến toàn cục
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxLen = len;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	765a      	strb	r2, [r3, #25]

			//2. Đánh dấu là SPI đang bận trong quá tình truyền
		pUSARTHandle->RxState = USART_STATE_BUSY_IN_RX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2222      	movs	r2, #34	; 0x22
 8002e26:	76da      	strb	r2, [r3, #27]
			//3. Set bit TXEIE để nhận Interrupt bất cứ khi nào nào cờ TXE set
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	60da      	str	r2, [r3, #12]

	}
	return state;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <USART_IRQConfig>:
void USART_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71bb      	strb	r3, [r7, #6]
    uint8_t regx = IRQNumber / 32;
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	73fb      	strb	r3, [r7, #15]
    if (EnorDi == ENABLE)
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d110      	bne.n	8002e82 <USART_IRQConfig+0x3e>
        NVIC_ISER->REG_NU[regx] |= (1 << (IRQNumber % 32));
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <USART_IRQConfig+0x68>)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	490d      	ldr	r1, [pc, #52]	; (8002eac <USART_IRQConfig+0x68>)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	4302      	orrs	r2, r0
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    else
        NVIC_ICER->REG_NUM[regx] |= (1 << (IRQNumber % 32));
}
 8002e80:	e00f      	b.n	8002ea2 <USART_IRQConfig+0x5e>
        NVIC_ICER->REG_NUM[regx] |= (1 << (IRQNumber % 32));
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <USART_IRQConfig+0x6c>)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	4905      	ldr	r1, [pc, #20]	; (8002eb0 <USART_IRQConfig+0x6c>)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4302      	orrs	r2, r0
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000e180 	.word	0xe000e180

08002eb4 <USART_IRQHandling>:
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01f      	beq.n	8002f1a <USART_IRQHandling+0x66>
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <USART_IRQHandling+0x66>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->gState == USART_STATE_BUSY_IN_TX)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7e9b      	ldrb	r3, [r3, #26]
 8002ee4:	2b21      	cmp	r3, #33	; 0x21
 8002ee6:	d118      	bne.n	8002f1a <USART_IRQHandling+0x66>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <USART_IRQHandling+0x66>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->gState = USART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	769a      	strb	r2, [r3, #26]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	761a      	strb	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8002f12:	2101      	movs	r1, #1
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fd fcb9 	bl	800088c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d057      	beq.n	8002fe8 <USART_IRQHandling+0x134>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d054      	beq.n	8002fe8 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->gState == USART_STATE_BUSY_IN_TX)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7e9b      	ldrb	r3, [r3, #26]
 8002f42:	2b21      	cmp	r3, #33	; 0x21
 8002f44:	d150      	bne.n	8002fe8 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7e1b      	ldrb	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d040      	beq.n	8002fd0 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USARTConfig.WordLength == USART_WORD_LENGTH_9)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7b5b      	ldrb	r3, [r3, #13]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d12b      	bne.n	8002fae <USART_IRQHandling+0xfa>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6a:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_DI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7b9b      	ldrb	r3, [r3, #14]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d110      	bne.n	8002f96 <USART_IRQHandling+0xe2>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7e1b      	ldrb	r3, [r3, #24]
 8002f8c:	3b02      	subs	r3, #2
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	761a      	strb	r2, [r3, #24]
 8002f94:	e01c      	b.n	8002fd0 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7e1b      	ldrb	r3, [r3, #24]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	761a      	strb	r2, [r3, #24]
 8002fac:	e010      	b.n	8002fd0 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e1b      	ldrb	r3, [r3, #24]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	761a      	strb	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7e1b      	ldrb	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe6:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d074      	beq.n	80030f0 <USART_IRQHandling+0x23c>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d071      	beq.n	80030f0 <USART_IRQHandling+0x23c>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxState == USART_STATE_BUSY_IN_RX)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7edb      	ldrb	r3, [r3, #27]
 8003010:	2b22      	cmp	r3, #34	; 0x22
 8003012:	d16d      	bne.n	80030f0 <USART_IRQHandling+0x23c>
		{
			if(pUSARTHandle->RxLen > 0)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7e5b      	ldrb	r3, [r3, #25]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d056      	beq.n	80030ca <USART_IRQHandling+0x216>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USARTConfig.WordLength == USART_WORD_LENGTH_9)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7b5b      	ldrb	r3, [r3, #13]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d131      	bne.n	8003088 <USART_IRQHandling+0x1d4>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_DI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7b9b      	ldrb	r3, [r3, #14]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11a      	bne.n	8003062 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	b292      	uxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e5b      	ldrb	r3, [r3, #25]
 8003058:	3b02      	subs	r3, #2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	765a      	strb	r2, [r3, #25]
 8003060:	e033      	b.n	80030ca <USART_IRQHandling+0x216>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7e5b      	ldrb	r3, [r3, #25]
 800307e:	3b01      	subs	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	765a      	strb	r2, [r3, #25]
 8003086:	e020      	b.n	80030ca <USART_IRQHandling+0x216>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USARTConfig.ParityControl == USART_PARITY_DI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7b9b      	ldrb	r3, [r3, #14]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d107      	bne.n	80030a0 <USART_IRQHandling+0x1ec>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e009      	b.n	80030b4 <USART_IRQHandling+0x200>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7e5b      	ldrb	r3, [r3, #25]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	765a      	strb	r2, [r3, #25]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7e5b      	ldrb	r3, [r3, #25]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10e      	bne.n	80030f0 <USART_IRQHandling+0x23c>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0220 	bic.w	r2, r2, #32
 80030e0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxState = USART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	76da      	strb	r2, [r3, #27]
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80030e8:	2102      	movs	r1, #2
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fbce 	bl	800088c <USART_ApplicationEventCallback>
//			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
//		}
//	}


}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_UART_Transmit>:
__attribute__((weak)) void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{

}
HAL_StatusTypeDef HAL_UART_Transmit(USART_Handle_t *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == USART_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	7e9b      	ldrb	r3, [r3, #26]
 8003110:	2b20      	cmp	r3, #32
 8003112:	d16a      	bne.n	80031ea <HAL_UART_Transmit+0xf2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Transmit+0x28>
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e063      	b.n	80031ec <HAL_UART_Transmit+0xf4>
    }

    /* Process Locked */
  //  __HAL_LOCK(huart);

    huart->ErrorCode = USART_STATE_ERROR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22e0      	movs	r2, #224	; 0xe0
 8003128:	61da      	str	r2, [r3, #28]
    huart->gState = USART_STATE_BUSY_IN_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2221      	movs	r2, #33	; 0x21
 800312e:	769a      	strb	r2, [r3, #26]

    /* Init tickstart for timeout managment */
    tickstart = GetTick();
 8003130:	f7ff fb56 	bl	80027e0 <GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->TxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->USARTConfig.WordLength == USART_WORD_LENGTH_9) && (huart->USARTConfig.ParityControl == USART_PARITY_DI))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	7b5b      	ldrb	r3, [r3, #13]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_UART_Transmit+0x64>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	7b9b      	ldrb	r3, [r3, #14]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d104      	bne.n	800315c <HAL_UART_Transmit+0x64>
    {
      pdata8bits  = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e003      	b.n	8003164 <HAL_UART_Transmit+0x6c>
    }
    else
    {
      pdata8bits  = pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
  //  __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8003164:	e02a      	b.n	80031bc <HAL_UART_Transmit+0xc4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f83f 	bl	80031f4 <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0x88>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e035      	b.n	80031ec <HAL_UART_Transmit+0xf4>
      }
      if (pdata8bits == NULL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_UART_Transmit+0xa6>
      {
        huart->pUSARTx->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e007      	b.n	80031ae <HAL_UART_Transmit+0xb6>
      }
      else
      {
        huart->pUSARTx->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
    while (huart->TxXferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1cf      	bne.n	8003166 <HAL_UART_Transmit+0x6e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f80f 	bl	80031f4 <UART_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_Transmit+0xe8>
    {
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e005      	b.n	80031ec <HAL_UART_Transmit+0xf4>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = USART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	769a      	strb	r2, [r3, #26]

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Transmit+0xf4>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_WaitOnFlagUntilTimeout>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(USART_Handle_t *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (USART_GetFlagStatus(huart->pUSARTx, Flag) == Status)
 8003204:	e016      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x40>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d012      	beq.n	8003234 <UART_WaitOnFlagUntilTimeout+0x40>
    {
      if ((Timeout == 0U) || ((GetTick() - Tickstart) > Timeout))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0x30>
 8003214:	f7ff fae4 	bl	80027e0 <GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <UART_WaitOnFlagUntilTimeout+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
     //   CLEAR_BIT(huart->pUSARTx->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
      //  CLEAR_BIT(huart->pUSARTx->CR3, USART_CR3_EIE);

        huart->gState  = USART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	769a      	strb	r2, [r3, #26]
        huart->RxState = USART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	76da      	strb	r2, [r3, #27]

        /* Process Unlocked */
       // __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e00b      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0x58>
  while (USART_GetFlagStatus(huart->pUSARTx, Flag) == Status)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fdc5 	bl	8002dca <USART_GetFlagStatus>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	4293      	cmp	r3, r2
 8003248:	d0dd      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Receive>:
HAL_StatusTypeDef HAL_UART_Receive(USART_Handle_t *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == USART_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	7edb      	ldrb	r3, [r3, #27]
 800326c:	2b20      	cmp	r3, #32
 800326e:	d175      	bne.n	800335c <HAL_UART_Receive+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Receive+0x28>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e06e      	b.n	800335e <HAL_UART_Receive+0x10a>
    }

    /* Process Locked */
//    __HAL_LOCK(huart);

    huart->ErrorCode = USART_STATE_ERROR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	22e0      	movs	r2, #224	; 0xe0
 8003284:	61da      	str	r2, [r3, #28]
    huart->RxState = USART_STATE_BUSY_IN_RX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2222      	movs	r2, #34	; 0x22
 800328a:	76da      	strb	r2, [r3, #27]
 //   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Init tickstart for timeout management */
    tickstart = GetTick();
 800328c:	f7ff faa8 	bl	80027e0 <GetTick>
 8003290:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	841a      	strh	r2, [r3, #32]
    huart->RxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->USARTConfig.WordLength == USART_WORD_LENGTH_9) && (huart->USARTConfig.ParityControl == USART_PARITY_DI))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	7b5b      	ldrb	r3, [r3, #13]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Receive+0x64>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	7b9b      	ldrb	r3, [r3, #14]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Receive+0x64>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Receive+0x6c>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]

    /* Process Unlocked */
 //   __HAL_UNLOCK(huart);

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032c0:	e042      	b.n	8003348 <HAL_UART_Receive+0xf4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2120      	movs	r1, #32
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff ff91 	bl	80031f4 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Receive+0x88>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e040      	b.n	800335e <HAL_UART_Receive+0x10a>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_UART_Receive+0xa8>
      {
        *pdata16bits = (uint16_t)(huart->pUSARTx->DR & 0x01FF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	3302      	adds	r3, #2
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e01e      	b.n	800333a <HAL_UART_Receive+0xe6>
      }
      else
      {
        if ((huart->USARTConfig.WordLength == USART_WORD_LENGTH_9) || ((huart->USARTConfig.WordLength == USART_WORD_LENGTH_8) && (huart->USARTConfig.ParityControl == USART_PARITY_DI)))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	7b5b      	ldrb	r3, [r3, #13]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d007      	beq.n	8003314 <HAL_UART_Receive+0xc0>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	7b5b      	ldrb	r3, [r3, #13]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_UART_Receive+0xce>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	7b9b      	ldrb	r3, [r3, #14]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d106      	bne.n	8003322 <HAL_UART_Receive+0xce>
        {
          *pdata8bits = (uint8_t)(huart->pUSARTx->DR & (uint8_t)0x00FF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e008      	b.n	8003334 <HAL_UART_Receive+0xe0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->pUSARTx->DR & (uint8_t)0x007F);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332e:	b2da      	uxtb	r2, r3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3301      	adds	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (huart->RxXferCount > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1b7      	bne.n	80032c2 <HAL_UART_Receive+0x6e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = USART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	76da      	strb	r2, [r3, #27]

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_UART_Receive+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <SendFPHeader>:
	 char* RegistryDone =    "Registry Finger Done  \r\n";
	 char* deletealldone =   "delete all done \r\n";
		uint8_t IDFromFinger;
		uint8_t CurrentNumberFinger;
void SendFPHeader(USART_Handle_t Usart1)
{
 8003368:	b084      	sub	sp, #16
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
 800336e:	f107 0c08 	add.w	ip, r7, #8
 8003372:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1, FPHeader, 6,1000);
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	2206      	movs	r2, #6
 800337c:	4905      	ldr	r1, [pc, #20]	; (8003394 <SendFPHeader+0x2c>)
 800337e:	f107 0008 	add.w	r0, r7, #8
 8003382:	f7ff feb9 	bl	80030f8 <HAL_UART_Transmit>
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800338e:	b004      	add	sp, #16
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000050 	.word	0x20000050

08003398 <SendFPGetImage>:

void SendFPGetImage(USART_Handle_t Usart1)
{
 8003398:	b084      	sub	sp, #16
 800339a:	b580      	push	{r7, lr}
 800339c:	af00      	add	r7, sp, #0
 800339e:	f107 0c08 	add.w	ip, r7, #8
 80033a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_UART_Transmit(&Usart1,FPGetImage,6,1000);
 80033a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033aa:	2206      	movs	r2, #6
 80033ac:	4905      	ldr	r1, [pc, #20]	; (80033c4 <SendFPGetImage+0x2c>)
 80033ae:	f107 0008 	add.w	r0, r7, #8
 80033b2:	f7ff fea1 	bl	80030f8 <HAL_UART_Transmit>
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033be:	b004      	add	sp, #16
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000058 	.word	0x20000058

080033c8 <SendFPCreateCharFile1>:

void SendFPCreateCharFile1(USART_Handle_t Usart1)
{
 80033c8:	b084      	sub	sp, #16
 80033ca:	b580      	push	{r7, lr}
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	f107 0c08 	add.w	ip, r7, #8
 80033d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPCreateCharFile1,7,1000);
 80033d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033da:	2207      	movs	r2, #7
 80033dc:	4905      	ldr	r1, [pc, #20]	; (80033f4 <SendFPCreateCharFile1+0x2c>)
 80033de:	f107 0008 	add.w	r0, r7, #8
 80033e2:	f7ff fe89 	bl	80030f8 <HAL_UART_Transmit>
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ee:	b004      	add	sp, #16
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000060 	.word	0x20000060

080033f8 <SendFPCreateCharFile2>:

void SendFPCreateCharFile2(USART_Handle_t Usart1)
{
 80033f8:	b084      	sub	sp, #16
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	f107 0c08 	add.w	ip, r7, #8
 8003402:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPCreateCharFile2,7,1000);
 8003406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340a:	2207      	movs	r2, #7
 800340c:	4905      	ldr	r1, [pc, #20]	; (8003424 <SendFPCreateCharFile2+0x2c>)
 800340e:	f107 0008 	add.w	r0, r7, #8
 8003412:	f7ff fe71 	bl	80030f8 <HAL_UART_Transmit>
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800341e:	b004      	add	sp, #16
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000068 	.word	0x20000068

08003428 <SendFPCreateTemplate>:

void SendFPCreateTemplate(USART_Handle_t Usart1)
{
 8003428:	b084      	sub	sp, #16
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
 800342e:	f107 0c08 	add.w	ip, r7, #8
 8003432:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPCreateTemplate,6,1000);
 8003436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343a:	2206      	movs	r2, #6
 800343c:	4905      	ldr	r1, [pc, #20]	; (8003454 <SendFPCreateTemplate+0x2c>)
 800343e:	f107 0008 	add.w	r0, r7, #8
 8003442:	f7ff fe59 	bl	80030f8 <HAL_UART_Transmit>
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800344e:	b004      	add	sp, #16
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000070 	.word	0x20000070

08003458 <SendFPDeleteAllFinger>:

void SendFPDeleteAllFinger(USART_Handle_t Usart1)
{
 8003458:	b084      	sub	sp, #16
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
 800345e:	f107 0c08 	add.w	ip, r7, #8
 8003462:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPDeleteAllFinger,6,1000);
 8003466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346a:	2206      	movs	r2, #6
 800346c:	4905      	ldr	r1, [pc, #20]	; (8003484 <SendFPDeleteAllFinger+0x2c>)
 800346e:	f107 0008 	add.w	r0, r7, #8
 8003472:	f7ff fe41 	bl	80030f8 <HAL_UART_Transmit>
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800347e:	b004      	add	sp, #16
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000078 	.word	0x20000078

08003488 <SendFPDSearchFinger>:

void SendFPDSearchFinger(USART_Handle_t Usart1)
{
 8003488:	b084      	sub	sp, #16
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
 800348e:	f107 0c08 	add.w	ip, r7, #8
 8003492:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPSearchFinger,11,1000);
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	220b      	movs	r2, #11
 800349c:	4905      	ldr	r1, [pc, #20]	; (80034b4 <SendFPDSearchFinger+0x2c>)
 800349e:	f107 0008 	add.w	r0, r7, #8
 80034a2:	f7ff fe29 	bl	80030f8 <HAL_UART_Transmit>
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ae:	b004      	add	sp, #16
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000080 	.word	0x20000080

080034b8 <SendFGetNumberOfFinger>:

void SendFGetNumberOfFinger(USART_Handle_t Usart1)
{
 80034b8:	b084      	sub	sp, #16
 80034ba:	b580      	push	{r7, lr}
 80034bc:	af00      	add	r7, sp, #0
 80034be:	f107 0c08 	add.w	ip, r7, #8
 80034c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&Usart1,FPGetNumberOfFinger,6,1000);
 80034c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ca:	2206      	movs	r2, #6
 80034cc:	4905      	ldr	r1, [pc, #20]	; (80034e4 <SendFGetNumberOfFinger+0x2c>)
 80034ce:	f107 0008 	add.w	r0, r7, #8
 80034d2:	f7ff fe11 	bl	80030f8 <HAL_UART_Transmit>
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034de:	b004      	add	sp, #16
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000008c 	.word	0x2000008c

080034e8 <SendStoreFinger>:
void SendStoreFinger(USART_Handle_t Usart1, uint16_t IDStore)
{
 80034e8:	b084      	sub	sp, #16
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	f107 0c18 	add.w	ip, r7, #24
 80034f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Sum=0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	81fb      	strh	r3, [r7, #14]
	uint8_t DataSend[9]={0};
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	721a      	strb	r2, [r3, #8]

	DataSend[0]=0x01;
 8003506:	2301      	movs	r3, #1
 8003508:	713b      	strb	r3, [r7, #4]
	Sum=Sum+DataSend[0];
 800350a:	793b      	ldrb	r3, [r7, #4]
 800350c:	b29a      	uxth	r2, r3
 800350e:	89fb      	ldrh	r3, [r7, #14]
 8003510:	4413      	add	r3, r2
 8003512:	81fb      	strh	r3, [r7, #14]
	DataSend[1]=0x00;
 8003514:	2300      	movs	r3, #0
 8003516:	717b      	strb	r3, [r7, #5]
	Sum=Sum+DataSend[1];
 8003518:	797b      	ldrb	r3, [r7, #5]
 800351a:	b29a      	uxth	r2, r3
 800351c:	89fb      	ldrh	r3, [r7, #14]
 800351e:	4413      	add	r3, r2
 8003520:	81fb      	strh	r3, [r7, #14]
	DataSend[2]=0x06;
 8003522:	2306      	movs	r3, #6
 8003524:	71bb      	strb	r3, [r7, #6]
	Sum=Sum+DataSend[2];
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	b29a      	uxth	r2, r3
 800352a:	89fb      	ldrh	r3, [r7, #14]
 800352c:	4413      	add	r3, r2
 800352e:	81fb      	strh	r3, [r7, #14]
	DataSend[3]=0x06;
 8003530:	2306      	movs	r3, #6
 8003532:	71fb      	strb	r3, [r7, #7]
	Sum=Sum+DataSend[3];
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	b29a      	uxth	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	4413      	add	r3, r2
 800353c:	81fb      	strh	r3, [r7, #14]
	DataSend[4]=0x01;
 800353e:	2301      	movs	r3, #1
 8003540:	723b      	strb	r3, [r7, #8]
	Sum=Sum+DataSend[4];
 8003542:	7a3b      	ldrb	r3, [r7, #8]
 8003544:	b29a      	uxth	r2, r3
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	4413      	add	r3, r2
 800354a:	81fb      	strh	r3, [r7, #14]
	DataSend[5]= (uint8_t)(IDStore>> 8);
 800354c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	b29b      	uxth	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	727b      	strb	r3, [r7, #9]
	Sum=Sum+DataSend[5];
 8003558:	7a7b      	ldrb	r3, [r7, #9]
 800355a:	b29a      	uxth	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4413      	add	r3, r2
 8003560:	81fb      	strh	r3, [r7, #14]
	DataSend[6]=(uint8_t) (IDStore&0xFF);
 8003562:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003566:	b2db      	uxtb	r3, r3
 8003568:	72bb      	strb	r3, [r7, #10]
	Sum=Sum+DataSend[6];
 800356a:	7abb      	ldrb	r3, [r7, #10]
 800356c:	b29a      	uxth	r2, r3
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	4413      	add	r3, r2
 8003572:	81fb      	strh	r3, [r7, #14]
	DataSend[7]=(uint8_t)(Sum>> 8);
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	72fb      	strb	r3, [r7, #11]
	DataSend[8]=(uint8_t)(Sum&0xFF);
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&Usart1,DataSend,9,1000);
 8003584:	1d39      	adds	r1, r7, #4
 8003586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358a:	2209      	movs	r2, #9
 800358c:	f107 0018 	add.w	r0, r7, #24
 8003590:	f7ff fdb2 	bl	80030f8 <HAL_UART_Transmit>
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800359e:	b004      	add	sp, #16
 80035a0:	4770      	bx	lr
	...

080035a4 <CheckFPRespsone>:
	DataSend[8]=(uint8_t)(Sum>> 8);
	DataSend[9]=(uint8_t)(Sum&0xFF);
	HAL_UART_Transmit(&Usart1,DataSend,10,1000);
}
uint8_t CheckFPRespsone(USART_Handle_t Usart1, uint8_t MaxRead)
{
 80035a4:	b084      	sub	sp, #16
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b08a      	sub	sp, #40	; 0x28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 80035b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t ByteCount=0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t FPRXData[20]={0xFE};
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	23fe      	movs	r3, #254	; 0xfe
 80035cc:	723b      	strb	r3, [r7, #8]
	uint8_t UARTData[1]={0};
 80035ce:	2300      	movs	r3, #0
 80035d0:	713b      	strb	r3, [r7, #4]

	uint32_t TimeOut = GetTick();
 80035d2:	f7ff f905 	bl	80027e0 <GetTick>
 80035d6:	6238      	str	r0, [r7, #32]

	uint8_t Result;
	IDFromFinger=0xFF;
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <CheckFPRespsone+0xc8>)
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	701a      	strb	r2, [r3, #0]

	while((GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 80035de:	e017      	b.n	8003610 <CheckFPRespsone+0x6c>
	{
	    	if(HAL_UART_Receive(&Usart1, (uint8_t *)UARTData, 1,1000) == HAL_OK)
 80035e0:	1d39      	adds	r1, r7, #4
 80035e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e6:	2201      	movs	r2, #1
 80035e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80035ec:	f7ff fe32 	bl	8003254 <HAL_UART_Receive>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <CheckFPRespsone+0x6c>
			{
				FPRXData[ByteCount] = UARTData[0];
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fa:	793a      	ldrb	r2, [r7, #4]
 80035fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003600:	440b      	add	r3, r1
 8003602:	f803 2c20 	strb.w	r2, [r3, #-32]
				ByteCount++;
 8003606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800360a:	3301      	adds	r3, #1
 800360c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while((GetTick() - TimeOut < 1000) && ByteCount<MaxRead) // time out is 1000 ms
 8003610:	f7ff f8e6 	bl	80027e0 <GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800361e:	d205      	bcs.n	800362c <CheckFPRespsone+0x88>
 8003620:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003624:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003628:	429a      	cmp	r2, r3
 800362a:	d3d9      	bcc.n	80035e0 <CheckFPRespsone+0x3c>
			}

	}


	if(ByteCount==0)
 800362c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <CheckFPRespsone+0x98>
	{
		Result=FP_ERROR;
 8003634:	23fe      	movs	r3, #254	; 0xfe
 8003636:	77fb      	strb	r3, [r7, #31]
		return Result;
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	e00f      	b.n	800365c <CheckFPRespsone+0xb8>
	}
	else if(ByteCount<MaxRead)
 800363c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003640:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003644:	429a      	cmp	r2, r3
 8003646:	d203      	bcs.n	8003650 <CheckFPRespsone+0xac>
	{
		Result=FP_ERROR;
 8003648:	23fe      	movs	r3, #254	; 0xfe
 800364a:	77fb      	strb	r3, [r7, #31]
		return Result;
 800364c:	7ffb      	ldrb	r3, [r7, #31]
 800364e:	e005      	b.n	800365c <CheckFPRespsone+0xb8>
	}
	  else // vailue data return
	{

		 Result=FPRXData[9];
 8003650:	7c7b      	ldrb	r3, [r7, #17]
 8003652:	77fb      	strb	r3, [r7, #31]
		 IDFromFinger=FPRXData[11];
 8003654:	7cfa      	ldrb	r2, [r7, #19]
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <CheckFPRespsone+0xc8>)
 8003658:	701a      	strb	r2, [r3, #0]
		 return Result;
 800365a:	7ffb      	ldrb	r3, [r7, #31]

	}
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003666:	b004      	add	sp, #16
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200001fd 	.word	0x200001fd

08003670 <GetNumberOfFinger>:
uint8_t GetNumberOfFinger(USART_Handle_t Usart1)
{
 8003670:	b084      	sub	sp, #16
 8003672:	b5b0      	push	{r4, r5, r7, lr}
 8003674:	b08c      	sub	sp, #48	; 0x30
 8003676:	af0a      	add	r7, sp, #40	; 0x28
 8003678:	f107 0418 	add.w	r4, r7, #24
 800367c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Result;
	SendFPHeader(Usart1);
 8003680:	466d      	mov	r5, sp
 8003682:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	f107 0318 	add.w	r3, r7, #24
 8003696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003698:	f7ff fe66 	bl	8003368 <SendFPHeader>
	SendFGetNumberOfFinger(Usart1);
 800369c:	466d      	mov	r5, sp
 800369e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80036a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b4:	f7ff ff00 	bl	80034b8 <SendFGetNumberOfFinger>
	Result=CheckFPRespsone(Usart1,14);
 80036b8:	230e      	movs	r3, #14
 80036ba:	9309      	str	r3, [sp, #36]	; 0x24
 80036bc:	466d      	mov	r5, sp
 80036be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80036c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	f107 0318 	add.w	r3, r7, #24
 80036d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d4:	f7ff ff66 	bl	80035a4 <CheckFPRespsone>
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return 0xFF;
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <GetNumberOfFinger+0x76>
 80036e2:	23ff      	movs	r3, #255	; 0xff
 80036e4:	e001      	b.n	80036ea <GetNumberOfFinger+0x7a>

	return IDFromFinger;
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <GetNumberOfFinger+0x88>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80036f4:	b004      	add	sp, #16
 80036f6:	4770      	bx	lr
 80036f8:	200001fd 	.word	0x200001fd

080036fc <RegistryNewFinger>:
uint8_t RegistryNewFinger(USART_Handle_t Usart1, uint16_t LocationID,I2C_LCD_Handle_t LCD)
{
 80036fc:	b084      	sub	sp, #16
 80036fe:	b5b0      	push	{r4, r5, r7, lr}
 8003700:	b08c      	sub	sp, #48	; 0x30
 8003702:	af0a      	add	r7, sp, #40	; 0x28
 8003704:	f107 0418 	add.w	r4, r7, #24
 8003708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t Result=FP_NOFINGER;
 800370c:	2302      	movs	r3, #2
 800370e:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = GetTick();
 8003710:	f7ff f866 	bl	80027e0 <GetTick>
 8003714:	6038      	str	r0, [r7, #0]

	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 3000)) // time out is 5000 ms
 8003716:	e02d      	b.n	8003774 <RegistryNewFinger+0x78>
	{
		SendFPHeader(Usart1);
 8003718:	466d      	mov	r5, sp
 800371a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800371e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	f107 0318 	add.w	r3, r7, #24
 800372e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003730:	f7ff fe1a 	bl	8003368 <SendFPHeader>
		SendFPGetImage(Usart1);
 8003734:	466d      	mov	r5, sp
 8003736:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800373a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	602b      	str	r3, [r5, #0]
 8003746:	f107 0318 	add.w	r3, r7, #24
 800374a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374c:	f7ff fe24 	bl	8003398 <SendFPGetImage>
		Result=CheckFPRespsone(Usart1,12);
 8003750:	230c      	movs	r3, #12
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	466d      	mov	r5, sp
 8003756:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800375a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	f107 0318 	add.w	r3, r7, #24
 800376a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800376c:	f7ff ff1a 	bl	80035a4 <CheckFPRespsone>
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 3000)) // time out is 5000 ms
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d108      	bne.n	800378c <RegistryNewFinger+0x90>
 800377a:	f7ff f831 	bl	80027e0 <GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003788:	4293      	cmp	r3, r2
 800378a:	d9c5      	bls.n	8003718 <RegistryNewFinger+0x1c>
	}
	if(Result == FP_NOFINGER) return FP_NOFINGER;
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d101      	bne.n	8003796 <RegistryNewFinger+0x9a>
 8003792:	2302      	movs	r3, #2
 8003794:	e130      	b.n	80039f8 <RegistryNewFinger+0x2fc>
	if (Result!=FP_OK) return FP_ERROR;
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <RegistryNewFinger+0xa4>
 800379c:	23fe      	movs	r3, #254	; 0xfe
 800379e:	e12b      	b.n	80039f8 <RegistryNewFinger+0x2fc>
	// continue if detect finger;
	SendFPHeader(Usart1);
 80037a0:	466d      	mov	r5, sp
 80037a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80037a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	f107 0318 	add.w	r3, r7, #24
 80037b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037b8:	f7ff fdd6 	bl	8003368 <SendFPHeader>
	SendFPCreateCharFile1(Usart1);
 80037bc:	466d      	mov	r5, sp
 80037be:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80037c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	f107 0318 	add.w	r3, r7, #24
 80037d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d4:	f7ff fdf8 	bl	80033c8 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(Usart1,12);
 80037d8:	230c      	movs	r3, #12
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
 80037dc:	466d      	mov	r5, sp
 80037de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80037e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	602b      	str	r3, [r5, #0]
 80037ee:	f107 0318 	add.w	r3, r7, #24
 80037f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f4:	f7ff fed6 	bl	80035a4 <CheckFPRespsone>
 80037f8:	4603      	mov	r3, r0
 80037fa:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <RegistryNewFinger+0x10a>
 8003802:	23fe      	movs	r3, #254	; 0xfe
 8003804:	e0f8      	b.n	80039f8 <RegistryNewFinger+0x2fc>

//		Delayms(2000);
	Result=FP_NOFINGER;
 8003806:	2302      	movs	r3, #2
 8003808:	71fb      	strb	r3, [r7, #7]
	TimeOut = GetTick();
 800380a:	f7fe ffe9 	bl	80027e0 <GetTick>
 800380e:	6038      	str	r0, [r7, #0]

	I2C_LCD_display_clear(&LCD);
 8003810:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fbc9 	bl	8001fac <I2C_LCD_display_clear>
	I2C_LCD_print_string(&LCD, ReputFinger);
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <RegistryNewFinger+0x30c>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fbce 	bl	8001fc6 <I2C_LCD_print_string>

	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 3000))
 800382a:	e02d      	b.n	8003888 <RegistryNewFinger+0x18c>
	{
		SendFPHeader(Usart1);
 800382c:	466d      	mov	r5, sp
 800382e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003844:	f7ff fd90 	bl	8003368 <SendFPHeader>
		SendFPGetImage(Usart1);
 8003848:	466d      	mov	r5, sp
 800384a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003860:	f7ff fd9a 	bl	8003398 <SendFPGetImage>
		Result=CheckFPRespsone(Usart1,12);
 8003864:	230c      	movs	r3, #12
 8003866:	9309      	str	r3, [sp, #36]	; 0x24
 8003868:	466d      	mov	r5, sp
 800386a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800386e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003880:	f7ff fe90 	bl	80035a4 <CheckFPRespsone>
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 3000))
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d108      	bne.n	80038a0 <RegistryNewFinger+0x1a4>
 800388e:	f7fe ffa7 	bl	80027e0 <GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800389c:	4293      	cmp	r3, r2
 800389e:	d9c5      	bls.n	800382c <RegistryNewFinger+0x130>
	}
	if(Result == FP_NOFINGER) return FP_NOFINGER;
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d101      	bne.n	80038aa <RegistryNewFinger+0x1ae>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0a6      	b.n	80039f8 <RegistryNewFinger+0x2fc>
	if (Result!=FP_OK) return FP_ERROR;
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <RegistryNewFinger+0x1b8>
 80038b0:	23fe      	movs	r3, #254	; 0xfe
 80038b2:	e0a1      	b.n	80039f8 <RegistryNewFinger+0x2fc>

	// continue if detect finger;
	SendFPHeader(Usart1);
 80038b4:	466d      	mov	r5, sp
 80038b6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80038ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	f107 0318 	add.w	r3, r7, #24
 80038ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038cc:	f7ff fd4c 	bl	8003368 <SendFPHeader>
	SendFPCreateCharFile2(Usart1);
 80038d0:	466d      	mov	r5, sp
 80038d2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80038d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	f107 0318 	add.w	r3, r7, #24
 80038e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e8:	f7ff fd86 	bl	80033f8 <SendFPCreateCharFile2>
	Result=CheckFPRespsone(Usart1,12);
 80038ec:	230c      	movs	r3, #12
 80038ee:	9309      	str	r3, [sp, #36]	; 0x24
 80038f0:	466d      	mov	r5, sp
 80038f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80038f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003908:	f7ff fe4c 	bl	80035a4 <CheckFPRespsone>
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <RegistryNewFinger+0x21e>
 8003916:	23fe      	movs	r3, #254	; 0xfe
 8003918:	e06e      	b.n	80039f8 <RegistryNewFinger+0x2fc>

	// Compare finger, create template
	SendFPHeader(Usart1);
 800391a:	466d      	mov	r5, sp
 800391c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f107 0318 	add.w	r3, r7, #24
 8003930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003932:	f7ff fd19 	bl	8003368 <SendFPHeader>
	SendFPCreateTemplate(Usart1);
 8003936:	466d      	mov	r5, sp
 8003938:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800393c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	602b      	str	r3, [r5, #0]
 8003948:	f107 0318 	add.w	r3, r7, #24
 800394c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800394e:	f7ff fd6b 	bl	8003428 <SendFPCreateTemplate>
	Result=CheckFPRespsone(Usart1,12);
 8003952:	230c      	movs	r3, #12
 8003954:	9309      	str	r3, [sp, #36]	; 0x24
 8003956:	466d      	mov	r5, sp
 8003958:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800395c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800395e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	f107 0318 	add.w	r3, r7, #24
 800396c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396e:	f7ff fe19 	bl	80035a4 <CheckFPRespsone>
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
	if(Result==FP_FINGER_NOTMATCH)
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b0a      	cmp	r3, #10
 800397a:	d101      	bne.n	8003980 <RegistryNewFinger+0x284>
	{

		return FP_FINGER_NOTMATCH;
 800397c:	230a      	movs	r3, #10
 800397e:	e03b      	b.n	80039f8 <RegistryNewFinger+0x2fc>
	}
	else if(Result!=FP_OK) return FP_ERROR;
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <RegistryNewFinger+0x28e>
 8003986:	23fe      	movs	r3, #254	; 0xfe
 8003988:	e036      	b.n	80039f8 <RegistryNewFinger+0x2fc>

	// save finger
	SendFPHeader(Usart1);
 800398a:	466d      	mov	r5, sp
 800398c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f107 0318 	add.w	r3, r7, #24
 80039a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039a2:	f7ff fce1 	bl	8003368 <SendFPHeader>
	SendStoreFinger(Usart1,LocationID);
 80039a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039aa:	9309      	str	r3, [sp, #36]	; 0x24
 80039ac:	466d      	mov	r5, sp
 80039ae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80039b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	f107 0318 	add.w	r3, r7, #24
 80039c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c4:	f7ff fd90 	bl	80034e8 <SendStoreFinger>
	Result=CheckFPRespsone(Usart1,12);
 80039c8:	230c      	movs	r3, #12
 80039ca:	9309      	str	r3, [sp, #36]	; 0x24
 80039cc:	466d      	mov	r5, sp
 80039ce:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	f107 0318 	add.w	r3, r7, #24
 80039e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e4:	f7ff fdde 	bl	80035a4 <CheckFPRespsone>
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <RegistryNewFinger+0x2fa>
 80039f2:	23fe      	movs	r3, #254	; 0xfe
 80039f4:	e000      	b.n	80039f8 <RegistryNewFinger+0x2fc>
	else
	{
		return FP_OK;
 80039f6:	2300      	movs	r3, #0
	}

}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003a02:	b004      	add	sp, #16
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000094 	.word	0x20000094

08003a0c <CheckFinger>:
uint8_t CheckFinger(USART_Handle_t Usart1,I2C_LCD_Handle_t LCD)
{
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	b5b0      	push	{r4, r5, r7, lr}
 8003a10:	b08c      	sub	sp, #48	; 0x30
 8003a12:	af0a      	add	r7, sp, #40	; 0x28
 8003a14:	f107 0418 	add.w	r4, r7, #24
 8003a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Result=FP_NOFINGER;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	71fb      	strb	r3, [r7, #7]
	uint32_t TimeOut = GetTick();
 8003a20:	f7fe fede 	bl	80027e0 <GetTick>
 8003a24:	6038      	str	r0, [r7, #0]

	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 2000))
 8003a26:	e02d      	b.n	8003a84 <CheckFinger+0x78>
	{
		SendFPHeader(Usart1);
 8003a28:	466d      	mov	r5, sp
 8003a2a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	602b      	str	r3, [r5, #0]
 8003a3a:	f107 0318 	add.w	r3, r7, #24
 8003a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a40:	f7ff fc92 	bl	8003368 <SendFPHeader>
		SendFPGetImage(Usart1);
 8003a44:	466d      	mov	r5, sp
 8003a46:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	f107 0318 	add.w	r3, r7, #24
 8003a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a5c:	f7ff fc9c 	bl	8003398 <SendFPGetImage>
		Result=CheckFPRespsone(Usart1,12);
 8003a60:	230c      	movs	r3, #12
 8003a62:	9309      	str	r3, [sp, #36]	; 0x24
 8003a64:	466d      	mov	r5, sp
 8003a66:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	602b      	str	r3, [r5, #0]
 8003a76:	f107 0318 	add.w	r3, r7, #24
 8003a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a7c:	f7ff fd92 	bl	80035a4 <CheckFPRespsone>
 8003a80:	4603      	mov	r3, r0
 8003a82:	71fb      	strb	r3, [r7, #7]
	while(Result==FP_NOFINGER&&(GetTick() - TimeOut < 2000))
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <CheckFinger+0x8e>
 8003a8a:	f7fe fea9 	bl	80027e0 <GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a98:	d3c6      	bcc.n	8003a28 <CheckFinger+0x1c>
	}
	if(Result == FP_NOFINGER) return FP_NOFINGER;
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d101      	bne.n	8003aa4 <CheckFinger+0x98>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e066      	b.n	8003b72 <CheckFinger+0x166>
	if (Result!=FP_OK) return FP_ERROR;
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <CheckFinger+0xa2>
 8003aaa:	23fe      	movs	r3, #254	; 0xfe
 8003aac:	e061      	b.n	8003b72 <CheckFinger+0x166>
	// continue if detect finger;
	SendFPHeader(Usart1);
 8003aae:	466d      	mov	r5, sp
 8003ab0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	602b      	str	r3, [r5, #0]
 8003ac0:	f107 0318 	add.w	r3, r7, #24
 8003ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ac6:	f7ff fc4f 	bl	8003368 <SendFPHeader>
	SendFPCreateCharFile1(Usart1);
 8003aca:	466d      	mov	r5, sp
 8003acc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	f107 0318 	add.w	r3, r7, #24
 8003ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ae2:	f7ff fc71 	bl	80033c8 <SendFPCreateCharFile1>
	Result=CheckFPRespsone(Usart1,12);
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	466d      	mov	r5, sp
 8003aec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f107 0318 	add.w	r3, r7, #24
 8003b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b02:	f7ff fd4f 	bl	80035a4 <CheckFPRespsone>
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR;
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <CheckFinger+0x108>
 8003b10:	23fe      	movs	r3, #254	; 0xfe
 8003b12:	e02e      	b.n	8003b72 <CheckFinger+0x166>

	// Search Fingger
	SendFPHeader(Usart1);
 8003b14:	466d      	mov	r5, sp
 8003b16:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	f107 0318 	add.w	r3, r7, #24
 8003b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b2c:	f7ff fc1c 	bl	8003368 <SendFPHeader>
	SendFPDSearchFinger(Usart1);
 8003b30:	466d      	mov	r5, sp
 8003b32:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	f107 0318 	add.w	r3, r7, #24
 8003b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b48:	f7ff fc9e 	bl	8003488 <SendFPDSearchFinger>
	Result=CheckFPRespsone(Usart1,16);
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b50:	466d      	mov	r5, sp
 8003b52:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	f107 0318 	add.w	r3, r7, #24
 8003b66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b68:	f7ff fd1c 	bl	80035a4 <CheckFPRespsone>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	71fb      	strb	r3, [r7, #7]
	return Result;
 8003b70:	79fb      	ldrb	r3, [r7, #7]


}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr

08003b80 <deleteallfinger>:


uint8_t deleteallfinger(USART_Handle_t Usart1){
 8003b80:	b084      	sub	sp, #16
 8003b82:	b5b0      	push	{r4, r5, r7, lr}
 8003b84:	b08c      	sub	sp, #48	; 0x30
 8003b86:	af0a      	add	r7, sp, #40	; 0x28
 8003b88:	f107 0418 	add.w	r4, r7, #24
 8003b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Result;
	SendFPHeader(Usart1);
 8003b90:	466d      	mov	r5, sp
 8003b92:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	602b      	str	r3, [r5, #0]
 8003ba2:	f107 0318 	add.w	r3, r7, #24
 8003ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ba8:	f7ff fbde 	bl	8003368 <SendFPHeader>
	SendFPDeleteAllFinger(Usart1);
 8003bac:	466d      	mov	r5, sp
 8003bae:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	602b      	str	r3, [r5, #0]
 8003bbe:	f107 0318 	add.w	r3, r7, #24
 8003bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc4:	f7ff fc48 	bl	8003458 <SendFPDeleteAllFinger>
	Result=CheckFPRespsone(Usart1,12);
 8003bc8:	230c      	movs	r3, #12
 8003bca:	9309      	str	r3, [sp, #36]	; 0x24
 8003bcc:	466d      	mov	r5, sp
 8003bce:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	f107 0318 	add.w	r3, r7, #24
 8003be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be4:	f7ff fcde 	bl	80035a4 <CheckFPRespsone>
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
	if(Result!=FP_OK) return FP_ERROR ;
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <deleteallfinger+0x76>
 8003bf2:	23fe      	movs	r3, #254	; 0xfe
 8003bf4:	e000      	b.n	8003bf8 <deleteallfinger+0x78>
	else return Result;
 8003bf6:	79fb      	ldrb	r3, [r7, #7]


}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003c02:	b004      	add	sp, #16
 8003c04:	4770      	bx	lr
	...

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000098 	.word	0x20000098

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	2500      	movs	r5, #0
 8003c18:	4e0c      	ldr	r6, [pc, #48]	; (8003c4c <__libc_init_array+0x38>)
 8003c1a:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1c:	1ba4      	subs	r4, r4, r6
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	42a5      	cmp	r5, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	f000 fc2c 	bl	8004480 <_init>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	4e0a      	ldr	r6, [pc, #40]	; (8003c54 <__libc_init_array+0x40>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <__libc_init_array+0x44>)
 8003c2e:	1ba4      	subs	r4, r4, r6
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	42a5      	cmp	r5, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3c:	4798      	blx	r3
 8003c3e:	3501      	adds	r5, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c46:	4798      	blx	r3
 8003c48:	3501      	adds	r5, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	080047e8 	.word	0x080047e8
 8003c50:	080047e8 	.word	0x080047e8
 8003c54:	080047e8 	.word	0x080047e8
 8003c58:	080047ec 	.word	0x080047ec

08003c5c <siprintf>:
 8003c5c:	b40e      	push	{r1, r2, r3}
 8003c5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c62:	b500      	push	{lr}
 8003c64:	b09c      	sub	sp, #112	; 0x70
 8003c66:	ab1d      	add	r3, sp, #116	; 0x74
 8003c68:	9002      	str	r0, [sp, #8]
 8003c6a:	9006      	str	r0, [sp, #24]
 8003c6c:	9107      	str	r1, [sp, #28]
 8003c6e:	9104      	str	r1, [sp, #16]
 8003c70:	4808      	ldr	r0, [pc, #32]	; (8003c94 <siprintf+0x38>)
 8003c72:	4909      	ldr	r1, [pc, #36]	; (8003c98 <siprintf+0x3c>)
 8003c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c78:	9105      	str	r1, [sp, #20]
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	a902      	add	r1, sp, #8
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	f000 f866 	bl	8003d50 <_svfiprintf_r>
 8003c84:	2200      	movs	r2, #0
 8003c86:	9b02      	ldr	r3, [sp, #8]
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	b01c      	add	sp, #112	; 0x70
 8003c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c90:	b003      	add	sp, #12
 8003c92:	4770      	bx	lr
 8003c94:	20000098 	.word	0x20000098
 8003c98:	ffff0208 	.word	0xffff0208

08003c9c <__ssputs_r>:
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	688e      	ldr	r6, [r1, #8]
 8003ca2:	4682      	mov	sl, r0
 8003ca4:	429e      	cmp	r6, r3
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4690      	mov	r8, r2
 8003caa:	4699      	mov	r9, r3
 8003cac:	d837      	bhi.n	8003d1e <__ssputs_r+0x82>
 8003cae:	898a      	ldrh	r2, [r1, #12]
 8003cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cb4:	d031      	beq.n	8003d1a <__ssputs_r+0x7e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	6825      	ldr	r5, [r4, #0]
 8003cba:	6909      	ldr	r1, [r1, #16]
 8003cbc:	1a6f      	subs	r7, r5, r1
 8003cbe:	6965      	ldr	r5, [r4, #20]
 8003cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cc8:	f109 0301 	add.w	r3, r9, #1
 8003ccc:	443b      	add	r3, r7
 8003cce:	429d      	cmp	r5, r3
 8003cd0:	bf38      	it	cc
 8003cd2:	461d      	movcc	r5, r3
 8003cd4:	0553      	lsls	r3, r2, #21
 8003cd6:	d530      	bpl.n	8003d3a <__ssputs_r+0x9e>
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f000 fb37 	bl	800434c <_malloc_r>
 8003cde:	4606      	mov	r6, r0
 8003ce0:	b950      	cbnz	r0, 8003cf8 <__ssputs_r+0x5c>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	6921      	ldr	r1, [r4, #16]
 8003cfc:	f000 fab6 	bl	800426c <memcpy>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	6126      	str	r6, [r4, #16]
 8003d0e:	443e      	add	r6, r7
 8003d10:	6026      	str	r6, [r4, #0]
 8003d12:	464e      	mov	r6, r9
 8003d14:	6165      	str	r5, [r4, #20]
 8003d16:	1bed      	subs	r5, r5, r7
 8003d18:	60a5      	str	r5, [r4, #8]
 8003d1a:	454e      	cmp	r6, r9
 8003d1c:	d900      	bls.n	8003d20 <__ssputs_r+0x84>
 8003d1e:	464e      	mov	r6, r9
 8003d20:	4632      	mov	r2, r6
 8003d22:	4641      	mov	r1, r8
 8003d24:	6820      	ldr	r0, [r4, #0]
 8003d26:	f000 faac 	bl	8004282 <memmove>
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	1b9b      	subs	r3, r3, r6
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	441e      	add	r6, r3
 8003d36:	6026      	str	r6, [r4, #0]
 8003d38:	e7dc      	b.n	8003cf4 <__ssputs_r+0x58>
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	f000 fb60 	bl	8004400 <_realloc_r>
 8003d40:	4606      	mov	r6, r0
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d1e2      	bne.n	8003d0c <__ssputs_r+0x70>
 8003d46:	6921      	ldr	r1, [r4, #16]
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f000 fab3 	bl	80042b4 <_free_r>
 8003d4e:	e7c8      	b.n	8003ce2 <__ssputs_r+0x46>

08003d50 <_svfiprintf_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	461d      	mov	r5, r3
 8003d56:	898b      	ldrh	r3, [r1, #12]
 8003d58:	b09d      	sub	sp, #116	; 0x74
 8003d5a:	061f      	lsls	r7, r3, #24
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4616      	mov	r6, r2
 8003d62:	d50f      	bpl.n	8003d84 <_svfiprintf_r+0x34>
 8003d64:	690b      	ldr	r3, [r1, #16]
 8003d66:	b96b      	cbnz	r3, 8003d84 <_svfiprintf_r+0x34>
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	f000 faef 	bl	800434c <_malloc_r>
 8003d6e:	6020      	str	r0, [r4, #0]
 8003d70:	6120      	str	r0, [r4, #16]
 8003d72:	b928      	cbnz	r0, 8003d80 <_svfiprintf_r+0x30>
 8003d74:	230c      	movs	r3, #12
 8003d76:	f8c8 3000 	str.w	r3, [r8]
 8003d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7e:	e0c8      	b.n	8003f12 <_svfiprintf_r+0x1c2>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	6163      	str	r3, [r4, #20]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9309      	str	r3, [sp, #36]	; 0x24
 8003d88:	2320      	movs	r3, #32
 8003d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d8e:	2330      	movs	r3, #48	; 0x30
 8003d90:	f04f 0b01 	mov.w	fp, #1
 8003d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d98:	9503      	str	r5, [sp, #12]
 8003d9a:	4637      	mov	r7, r6
 8003d9c:	463d      	mov	r5, r7
 8003d9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003da2:	b10b      	cbz	r3, 8003da8 <_svfiprintf_r+0x58>
 8003da4:	2b25      	cmp	r3, #37	; 0x25
 8003da6:	d13e      	bne.n	8003e26 <_svfiprintf_r+0xd6>
 8003da8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003dac:	d00b      	beq.n	8003dc6 <_svfiprintf_r+0x76>
 8003dae:	4653      	mov	r3, sl
 8003db0:	4632      	mov	r2, r6
 8003db2:	4621      	mov	r1, r4
 8003db4:	4640      	mov	r0, r8
 8003db6:	f7ff ff71 	bl	8003c9c <__ssputs_r>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f000 80a4 	beq.w	8003f08 <_svfiprintf_r+0x1b8>
 8003dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc2:	4453      	add	r3, sl
 8003dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc6:	783b      	ldrb	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 809d 	beq.w	8003f08 <_svfiprintf_r+0x1b8>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd8:	9304      	str	r3, [sp, #16]
 8003dda:	9307      	str	r3, [sp, #28]
 8003ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003de0:	931a      	str	r3, [sp, #104]	; 0x68
 8003de2:	462f      	mov	r7, r5
 8003de4:	2205      	movs	r2, #5
 8003de6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dea:	4850      	ldr	r0, [pc, #320]	; (8003f2c <_svfiprintf_r+0x1dc>)
 8003dec:	f000 fa30 	bl	8004250 <memchr>
 8003df0:	9b04      	ldr	r3, [sp, #16]
 8003df2:	b9d0      	cbnz	r0, 8003e2a <_svfiprintf_r+0xda>
 8003df4:	06d9      	lsls	r1, r3, #27
 8003df6:	bf44      	itt	mi
 8003df8:	2220      	movmi	r2, #32
 8003dfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dfe:	071a      	lsls	r2, r3, #28
 8003e00:	bf44      	itt	mi
 8003e02:	222b      	movmi	r2, #43	; 0x2b
 8003e04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e08:	782a      	ldrb	r2, [r5, #0]
 8003e0a:	2a2a      	cmp	r2, #42	; 0x2a
 8003e0c:	d015      	beq.n	8003e3a <_svfiprintf_r+0xea>
 8003e0e:	462f      	mov	r7, r5
 8003e10:	2000      	movs	r0, #0
 8003e12:	250a      	movs	r5, #10
 8003e14:	9a07      	ldr	r2, [sp, #28]
 8003e16:	4639      	mov	r1, r7
 8003e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1c:	3b30      	subs	r3, #48	; 0x30
 8003e1e:	2b09      	cmp	r3, #9
 8003e20:	d94d      	bls.n	8003ebe <_svfiprintf_r+0x16e>
 8003e22:	b1b8      	cbz	r0, 8003e54 <_svfiprintf_r+0x104>
 8003e24:	e00f      	b.n	8003e46 <_svfiprintf_r+0xf6>
 8003e26:	462f      	mov	r7, r5
 8003e28:	e7b8      	b.n	8003d9c <_svfiprintf_r+0x4c>
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <_svfiprintf_r+0x1dc>)
 8003e2c:	463d      	mov	r5, r7
 8003e2e:	1a80      	subs	r0, r0, r2
 8003e30:	fa0b f000 	lsl.w	r0, fp, r0
 8003e34:	4318      	orrs	r0, r3
 8003e36:	9004      	str	r0, [sp, #16]
 8003e38:	e7d3      	b.n	8003de2 <_svfiprintf_r+0x92>
 8003e3a:	9a03      	ldr	r2, [sp, #12]
 8003e3c:	1d11      	adds	r1, r2, #4
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	9103      	str	r1, [sp, #12]
 8003e42:	2a00      	cmp	r2, #0
 8003e44:	db01      	blt.n	8003e4a <_svfiprintf_r+0xfa>
 8003e46:	9207      	str	r2, [sp, #28]
 8003e48:	e004      	b.n	8003e54 <_svfiprintf_r+0x104>
 8003e4a:	4252      	negs	r2, r2
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	9207      	str	r2, [sp, #28]
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	783b      	ldrb	r3, [r7, #0]
 8003e56:	2b2e      	cmp	r3, #46	; 0x2e
 8003e58:	d10c      	bne.n	8003e74 <_svfiprintf_r+0x124>
 8003e5a:	787b      	ldrb	r3, [r7, #1]
 8003e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5e:	d133      	bne.n	8003ec8 <_svfiprintf_r+0x178>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	3702      	adds	r7, #2
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9203      	str	r2, [sp, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfb8      	it	lt
 8003e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	4d2e      	ldr	r5, [pc, #184]	; (8003f30 <_svfiprintf_r+0x1e0>)
 8003e76:	2203      	movs	r2, #3
 8003e78:	7839      	ldrb	r1, [r7, #0]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 f9e8 	bl	8004250 <memchr>
 8003e80:	b138      	cbz	r0, 8003e92 <_svfiprintf_r+0x142>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	1b40      	subs	r0, r0, r5
 8003e86:	fa03 f000 	lsl.w	r0, r3, r0
 8003e8a:	9b04      	ldr	r3, [sp, #16]
 8003e8c:	3701      	adds	r7, #1
 8003e8e:	4303      	orrs	r3, r0
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	7839      	ldrb	r1, [r7, #0]
 8003e94:	2206      	movs	r2, #6
 8003e96:	4827      	ldr	r0, [pc, #156]	; (8003f34 <_svfiprintf_r+0x1e4>)
 8003e98:	1c7e      	adds	r6, r7, #1
 8003e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e9e:	f000 f9d7 	bl	8004250 <memchr>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d038      	beq.n	8003f18 <_svfiprintf_r+0x1c8>
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <_svfiprintf_r+0x1e8>)
 8003ea8:	bb13      	cbnz	r3, 8003ef0 <_svfiprintf_r+0x1a0>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	3307      	adds	r3, #7
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb8:	444b      	add	r3, r9
 8003eba:	9309      	str	r3, [sp, #36]	; 0x24
 8003ebc:	e76d      	b.n	8003d9a <_svfiprintf_r+0x4a>
 8003ebe:	fb05 3202 	mla	r2, r5, r2, r3
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	e7a6      	b.n	8003e16 <_svfiprintf_r+0xc6>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	250a      	movs	r5, #10
 8003ecc:	4619      	mov	r1, r3
 8003ece:	3701      	adds	r7, #1
 8003ed0:	9305      	str	r3, [sp, #20]
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed8:	3a30      	subs	r2, #48	; 0x30
 8003eda:	2a09      	cmp	r2, #9
 8003edc:	d903      	bls.n	8003ee6 <_svfiprintf_r+0x196>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0c8      	beq.n	8003e74 <_svfiprintf_r+0x124>
 8003ee2:	9105      	str	r1, [sp, #20]
 8003ee4:	e7c6      	b.n	8003e74 <_svfiprintf_r+0x124>
 8003ee6:	fb05 2101 	mla	r1, r5, r1, r2
 8003eea:	2301      	movs	r3, #1
 8003eec:	4607      	mov	r7, r0
 8003eee:	e7f0      	b.n	8003ed2 <_svfiprintf_r+0x182>
 8003ef0:	ab03      	add	r3, sp, #12
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <_svfiprintf_r+0x1ec>)
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	4640      	mov	r0, r8
 8003efc:	f3af 8000 	nop.w
 8003f00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f04:	4681      	mov	r9, r0
 8003f06:	d1d6      	bne.n	8003eb6 <_svfiprintf_r+0x166>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	065b      	lsls	r3, r3, #25
 8003f0c:	f53f af35 	bmi.w	8003d7a <_svfiprintf_r+0x2a>
 8003f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f12:	b01d      	add	sp, #116	; 0x74
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f18:	ab03      	add	r3, sp, #12
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <_svfiprintf_r+0x1ec>)
 8003f20:	a904      	add	r1, sp, #16
 8003f22:	4640      	mov	r0, r8
 8003f24:	f000 f882 	bl	800402c <_printf_i>
 8003f28:	e7ea      	b.n	8003f00 <_svfiprintf_r+0x1b0>
 8003f2a:	bf00      	nop
 8003f2c:	080047b3 	.word	0x080047b3
 8003f30:	080047b9 	.word	0x080047b9
 8003f34:	080047bd 	.word	0x080047bd
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	08003c9d 	.word	0x08003c9d

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4691      	mov	r9, r2
 8003f46:	461f      	mov	r7, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bfb8      	it	lt
 8003f52:	4613      	movlt	r3, r2
 8003f54:	f8c9 3000 	str.w	r3, [r9]
 8003f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f62:	b112      	cbz	r2, 8003f6a <_printf_common+0x2a>
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c9 3000 	str.w	r3, [r9]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f74:	3302      	addmi	r3, #2
 8003f76:	f8c9 3000 	strmi.w	r3, [r9]
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	f015 0506 	ands.w	r5, r5, #6
 8003f80:	d107      	bne.n	8003f92 <_printf_common+0x52>
 8003f82:	f104 0a19 	add.w	sl, r4, #25
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	f8d9 2000 	ldr.w	r2, [r9]
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	dc29      	bgt.n	8003fe6 <_printf_common+0xa6>
 8003f92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	3300      	adds	r3, #0
 8003f9a:	bf18      	it	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	0692      	lsls	r2, r2, #26
 8003fa0:	d42e      	bmi.n	8004000 <_printf_common+0xc0>
 8003fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	4630      	mov	r0, r6
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d021      	beq.n	8003ff4 <_printf_common+0xb4>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	68e5      	ldr	r5, [r4, #12]
 8003fb4:	f003 0306 	and.w	r3, r3, #6
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	bf18      	it	ne
 8003fbc:	2500      	movne	r5, #0
 8003fbe:	f8d9 2000 	ldr.w	r2, [r9]
 8003fc2:	f04f 0900 	mov.w	r9, #0
 8003fc6:	bf08      	it	eq
 8003fc8:	1aad      	subeq	r5, r5, r2
 8003fca:	68a3      	ldr	r3, [r4, #8]
 8003fcc:	6922      	ldr	r2, [r4, #16]
 8003fce:	bf08      	it	eq
 8003fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bfc4      	itt	gt
 8003fd8:	1a9b      	subgt	r3, r3, r2
 8003fda:	18ed      	addgt	r5, r5, r3
 8003fdc:	341a      	adds	r4, #26
 8003fde:	454d      	cmp	r5, r9
 8003fe0:	d11a      	bne.n	8004018 <_printf_common+0xd8>
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	e008      	b.n	8003ff8 <_printf_common+0xb8>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4652      	mov	r2, sl
 8003fea:	4639      	mov	r1, r7
 8003fec:	4630      	mov	r0, r6
 8003fee:	47c0      	blx	r8
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d103      	bne.n	8003ffc <_printf_common+0xbc>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	e7c2      	b.n	8003f86 <_printf_common+0x46>
 8004000:	2030      	movs	r0, #48	; 0x30
 8004002:	18e1      	adds	r1, r4, r3
 8004004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800400e:	4422      	add	r2, r4
 8004010:	3302      	adds	r3, #2
 8004012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004016:	e7c4      	b.n	8003fa2 <_printf_common+0x62>
 8004018:	2301      	movs	r3, #1
 800401a:	4622      	mov	r2, r4
 800401c:	4639      	mov	r1, r7
 800401e:	4630      	mov	r0, r6
 8004020:	47c0      	blx	r8
 8004022:	3001      	adds	r0, #1
 8004024:	d0e6      	beq.n	8003ff4 <_printf_common+0xb4>
 8004026:	f109 0901 	add.w	r9, r9, #1
 800402a:	e7d8      	b.n	8003fde <_printf_common+0x9e>

0800402c <_printf_i>:
 800402c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004034:	460c      	mov	r4, r1
 8004036:	7e09      	ldrb	r1, [r1, #24]
 8004038:	b085      	sub	sp, #20
 800403a:	296e      	cmp	r1, #110	; 0x6e
 800403c:	4617      	mov	r7, r2
 800403e:	4606      	mov	r6, r0
 8004040:	4698      	mov	r8, r3
 8004042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004044:	f000 80b3 	beq.w	80041ae <_printf_i+0x182>
 8004048:	d822      	bhi.n	8004090 <_printf_i+0x64>
 800404a:	2963      	cmp	r1, #99	; 0x63
 800404c:	d036      	beq.n	80040bc <_printf_i+0x90>
 800404e:	d80a      	bhi.n	8004066 <_printf_i+0x3a>
 8004050:	2900      	cmp	r1, #0
 8004052:	f000 80b9 	beq.w	80041c8 <_printf_i+0x19c>
 8004056:	2958      	cmp	r1, #88	; 0x58
 8004058:	f000 8083 	beq.w	8004162 <_printf_i+0x136>
 800405c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004064:	e032      	b.n	80040cc <_printf_i+0xa0>
 8004066:	2964      	cmp	r1, #100	; 0x64
 8004068:	d001      	beq.n	800406e <_printf_i+0x42>
 800406a:	2969      	cmp	r1, #105	; 0x69
 800406c:	d1f6      	bne.n	800405c <_printf_i+0x30>
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	0605      	lsls	r5, r0, #24
 8004074:	f103 0104 	add.w	r1, r3, #4
 8004078:	d52a      	bpl.n	80040d0 <_printf_i+0xa4>
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6011      	str	r1, [r2, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da03      	bge.n	800408a <_printf_i+0x5e>
 8004082:	222d      	movs	r2, #45	; 0x2d
 8004084:	425b      	negs	r3, r3
 8004086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800408a:	486f      	ldr	r0, [pc, #444]	; (8004248 <_printf_i+0x21c>)
 800408c:	220a      	movs	r2, #10
 800408e:	e039      	b.n	8004104 <_printf_i+0xd8>
 8004090:	2973      	cmp	r1, #115	; 0x73
 8004092:	f000 809d 	beq.w	80041d0 <_printf_i+0x1a4>
 8004096:	d808      	bhi.n	80040aa <_printf_i+0x7e>
 8004098:	296f      	cmp	r1, #111	; 0x6f
 800409a:	d020      	beq.n	80040de <_printf_i+0xb2>
 800409c:	2970      	cmp	r1, #112	; 0x70
 800409e:	d1dd      	bne.n	800405c <_printf_i+0x30>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f043 0320 	orr.w	r3, r3, #32
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	e003      	b.n	80040b2 <_printf_i+0x86>
 80040aa:	2975      	cmp	r1, #117	; 0x75
 80040ac:	d017      	beq.n	80040de <_printf_i+0xb2>
 80040ae:	2978      	cmp	r1, #120	; 0x78
 80040b0:	d1d4      	bne.n	800405c <_printf_i+0x30>
 80040b2:	2378      	movs	r3, #120	; 0x78
 80040b4:	4865      	ldr	r0, [pc, #404]	; (800424c <_printf_i+0x220>)
 80040b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ba:	e055      	b.n	8004168 <_printf_i+0x13c>
 80040bc:	6813      	ldr	r3, [r2, #0]
 80040be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6011      	str	r1, [r2, #0]
 80040c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040cc:	2301      	movs	r3, #1
 80040ce:	e08c      	b.n	80041ea <_printf_i+0x1be>
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040d6:	6011      	str	r1, [r2, #0]
 80040d8:	bf18      	it	ne
 80040da:	b21b      	sxthne	r3, r3
 80040dc:	e7cf      	b.n	800407e <_printf_i+0x52>
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6010      	str	r0, [r2, #0]
 80040e6:	0628      	lsls	r0, r5, #24
 80040e8:	d501      	bpl.n	80040ee <_printf_i+0xc2>
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e002      	b.n	80040f4 <_printf_i+0xc8>
 80040ee:	0668      	lsls	r0, r5, #25
 80040f0:	d5fb      	bpl.n	80040ea <_printf_i+0xbe>
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	296f      	cmp	r1, #111	; 0x6f
 80040f6:	bf14      	ite	ne
 80040f8:	220a      	movne	r2, #10
 80040fa:	2208      	moveq	r2, #8
 80040fc:	4852      	ldr	r0, [pc, #328]	; (8004248 <_printf_i+0x21c>)
 80040fe:	2100      	movs	r1, #0
 8004100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004104:	6865      	ldr	r5, [r4, #4]
 8004106:	2d00      	cmp	r5, #0
 8004108:	60a5      	str	r5, [r4, #8]
 800410a:	f2c0 8095 	blt.w	8004238 <_printf_i+0x20c>
 800410e:	6821      	ldr	r1, [r4, #0]
 8004110:	f021 0104 	bic.w	r1, r1, #4
 8004114:	6021      	str	r1, [r4, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13d      	bne.n	8004196 <_printf_i+0x16a>
 800411a:	2d00      	cmp	r5, #0
 800411c:	f040 808e 	bne.w	800423c <_printf_i+0x210>
 8004120:	4665      	mov	r5, ip
 8004122:	2a08      	cmp	r2, #8
 8004124:	d10b      	bne.n	800413e <_printf_i+0x112>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	07db      	lsls	r3, r3, #31
 800412a:	d508      	bpl.n	800413e <_printf_i+0x112>
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	6862      	ldr	r2, [r4, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	bfde      	ittt	le
 8004134:	2330      	movle	r3, #48	; 0x30
 8004136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800413a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800413e:	ebac 0305 	sub.w	r3, ip, r5
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	f8cd 8000 	str.w	r8, [sp]
 8004148:	463b      	mov	r3, r7
 800414a:	aa03      	add	r2, sp, #12
 800414c:	4621      	mov	r1, r4
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff fef6 	bl	8003f40 <_printf_common>
 8004154:	3001      	adds	r0, #1
 8004156:	d14d      	bne.n	80041f4 <_printf_i+0x1c8>
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	b005      	add	sp, #20
 800415e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004162:	4839      	ldr	r0, [pc, #228]	; (8004248 <_printf_i+0x21c>)
 8004164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	1d1d      	adds	r5, r3, #4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6015      	str	r5, [r2, #0]
 8004172:	060a      	lsls	r2, r1, #24
 8004174:	d50b      	bpl.n	800418e <_printf_i+0x162>
 8004176:	07ca      	lsls	r2, r1, #31
 8004178:	bf44      	itt	mi
 800417a:	f041 0120 	orrmi.w	r1, r1, #32
 800417e:	6021      	strmi	r1, [r4, #0]
 8004180:	b91b      	cbnz	r3, 800418a <_printf_i+0x15e>
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	f022 0220 	bic.w	r2, r2, #32
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	e7b7      	b.n	80040fe <_printf_i+0xd2>
 800418e:	064d      	lsls	r5, r1, #25
 8004190:	bf48      	it	mi
 8004192:	b29b      	uxthmi	r3, r3
 8004194:	e7ef      	b.n	8004176 <_printf_i+0x14a>
 8004196:	4665      	mov	r5, ip
 8004198:	fbb3 f1f2 	udiv	r1, r3, r2
 800419c:	fb02 3311 	mls	r3, r2, r1, r3
 80041a0:	5cc3      	ldrb	r3, [r0, r3]
 80041a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041a6:	460b      	mov	r3, r1
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d1f5      	bne.n	8004198 <_printf_i+0x16c>
 80041ac:	e7b9      	b.n	8004122 <_printf_i+0xf6>
 80041ae:	6813      	ldr	r3, [r2, #0]
 80041b0:	6825      	ldr	r5, [r4, #0]
 80041b2:	1d18      	adds	r0, r3, #4
 80041b4:	6961      	ldr	r1, [r4, #20]
 80041b6:	6010      	str	r0, [r2, #0]
 80041b8:	0628      	lsls	r0, r5, #24
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	d501      	bpl.n	80041c2 <_printf_i+0x196>
 80041be:	6019      	str	r1, [r3, #0]
 80041c0:	e002      	b.n	80041c8 <_printf_i+0x19c>
 80041c2:	066a      	lsls	r2, r5, #25
 80041c4:	d5fb      	bpl.n	80041be <_printf_i+0x192>
 80041c6:	8019      	strh	r1, [r3, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	4665      	mov	r5, ip
 80041cc:	6123      	str	r3, [r4, #16]
 80041ce:	e7b9      	b.n	8004144 <_printf_i+0x118>
 80041d0:	6813      	ldr	r3, [r2, #0]
 80041d2:	1d19      	adds	r1, r3, #4
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	681d      	ldr	r5, [r3, #0]
 80041d8:	6862      	ldr	r2, [r4, #4]
 80041da:	2100      	movs	r1, #0
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f837 	bl	8004250 <memchr>
 80041e2:	b108      	cbz	r0, 80041e8 <_printf_i+0x1bc>
 80041e4:	1b40      	subs	r0, r0, r5
 80041e6:	6060      	str	r0, [r4, #4]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	2300      	movs	r3, #0
 80041ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f2:	e7a7      	b.n	8004144 <_printf_i+0x118>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	462a      	mov	r2, r5
 80041f8:	4639      	mov	r1, r7
 80041fa:	4630      	mov	r0, r6
 80041fc:	47c0      	blx	r8
 80041fe:	3001      	adds	r0, #1
 8004200:	d0aa      	beq.n	8004158 <_printf_i+0x12c>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	079b      	lsls	r3, r3, #30
 8004206:	d413      	bmi.n	8004230 <_printf_i+0x204>
 8004208:	68e0      	ldr	r0, [r4, #12]
 800420a:	9b03      	ldr	r3, [sp, #12]
 800420c:	4298      	cmp	r0, r3
 800420e:	bfb8      	it	lt
 8004210:	4618      	movlt	r0, r3
 8004212:	e7a3      	b.n	800415c <_printf_i+0x130>
 8004214:	2301      	movs	r3, #1
 8004216:	464a      	mov	r2, r9
 8004218:	4639      	mov	r1, r7
 800421a:	4630      	mov	r0, r6
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d09a      	beq.n	8004158 <_printf_i+0x12c>
 8004222:	3501      	adds	r5, #1
 8004224:	68e3      	ldr	r3, [r4, #12]
 8004226:	9a03      	ldr	r2, [sp, #12]
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	42ab      	cmp	r3, r5
 800422c:	dcf2      	bgt.n	8004214 <_printf_i+0x1e8>
 800422e:	e7eb      	b.n	8004208 <_printf_i+0x1dc>
 8004230:	2500      	movs	r5, #0
 8004232:	f104 0919 	add.w	r9, r4, #25
 8004236:	e7f5      	b.n	8004224 <_printf_i+0x1f8>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ac      	bne.n	8004196 <_printf_i+0x16a>
 800423c:	7803      	ldrb	r3, [r0, #0]
 800423e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004246:	e76c      	b.n	8004122 <_printf_i+0xf6>
 8004248:	080047c4 	.word	0x080047c4
 800424c:	080047d5 	.word	0x080047d5

08004250 <memchr>:
 8004250:	b510      	push	{r4, lr}
 8004252:	b2c9      	uxtb	r1, r1
 8004254:	4402      	add	r2, r0
 8004256:	4290      	cmp	r0, r2
 8004258:	4603      	mov	r3, r0
 800425a:	d101      	bne.n	8004260 <memchr+0x10>
 800425c:	2300      	movs	r3, #0
 800425e:	e003      	b.n	8004268 <memchr+0x18>
 8004260:	781c      	ldrb	r4, [r3, #0]
 8004262:	3001      	adds	r0, #1
 8004264:	428c      	cmp	r4, r1
 8004266:	d1f6      	bne.n	8004256 <memchr+0x6>
 8004268:	4618      	mov	r0, r3
 800426a:	bd10      	pop	{r4, pc}

0800426c <memcpy>:
 800426c:	b510      	push	{r4, lr}
 800426e:	1e43      	subs	r3, r0, #1
 8004270:	440a      	add	r2, r1
 8004272:	4291      	cmp	r1, r2
 8004274:	d100      	bne.n	8004278 <memcpy+0xc>
 8004276:	bd10      	pop	{r4, pc}
 8004278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800427c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004280:	e7f7      	b.n	8004272 <memcpy+0x6>

08004282 <memmove>:
 8004282:	4288      	cmp	r0, r1
 8004284:	b510      	push	{r4, lr}
 8004286:	eb01 0302 	add.w	r3, r1, r2
 800428a:	d807      	bhi.n	800429c <memmove+0x1a>
 800428c:	1e42      	subs	r2, r0, #1
 800428e:	4299      	cmp	r1, r3
 8004290:	d00a      	beq.n	80042a8 <memmove+0x26>
 8004292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004296:	f802 4f01 	strb.w	r4, [r2, #1]!
 800429a:	e7f8      	b.n	800428e <memmove+0xc>
 800429c:	4283      	cmp	r3, r0
 800429e:	d9f5      	bls.n	800428c <memmove+0xa>
 80042a0:	1881      	adds	r1, r0, r2
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	42d3      	cmn	r3, r2
 80042a6:	d100      	bne.n	80042aa <memmove+0x28>
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042b2:	e7f7      	b.n	80042a4 <memmove+0x22>

080042b4 <_free_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4605      	mov	r5, r0
 80042b8:	2900      	cmp	r1, #0
 80042ba:	d043      	beq.n	8004344 <_free_r+0x90>
 80042bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c0:	1f0c      	subs	r4, r1, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	18e4      	addlt	r4, r4, r3
 80042c8:	f000 f8d0 	bl	800446c <__malloc_lock>
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <_free_r+0x94>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	4610      	mov	r0, r2
 80042d2:	b933      	cbnz	r3, 80042e2 <_free_r+0x2e>
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6014      	str	r4, [r2, #0]
 80042d8:	4628      	mov	r0, r5
 80042da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042de:	f000 b8c6 	b.w	800446e <__malloc_unlock>
 80042e2:	42a3      	cmp	r3, r4
 80042e4:	d90b      	bls.n	80042fe <_free_r+0x4a>
 80042e6:	6821      	ldr	r1, [r4, #0]
 80042e8:	1862      	adds	r2, r4, r1
 80042ea:	4293      	cmp	r3, r2
 80042ec:	bf01      	itttt	eq
 80042ee:	681a      	ldreq	r2, [r3, #0]
 80042f0:	685b      	ldreq	r3, [r3, #4]
 80042f2:	1852      	addeq	r2, r2, r1
 80042f4:	6022      	streq	r2, [r4, #0]
 80042f6:	6063      	str	r3, [r4, #4]
 80042f8:	6004      	str	r4, [r0, #0]
 80042fa:	e7ed      	b.n	80042d8 <_free_r+0x24>
 80042fc:	4613      	mov	r3, r2
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	b10a      	cbz	r2, 8004306 <_free_r+0x52>
 8004302:	42a2      	cmp	r2, r4
 8004304:	d9fa      	bls.n	80042fc <_free_r+0x48>
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	1858      	adds	r0, r3, r1
 800430a:	42a0      	cmp	r0, r4
 800430c:	d10b      	bne.n	8004326 <_free_r+0x72>
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	4401      	add	r1, r0
 8004312:	1858      	adds	r0, r3, r1
 8004314:	4282      	cmp	r2, r0
 8004316:	6019      	str	r1, [r3, #0]
 8004318:	d1de      	bne.n	80042d8 <_free_r+0x24>
 800431a:	6810      	ldr	r0, [r2, #0]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	4401      	add	r1, r0
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	e7d8      	b.n	80042d8 <_free_r+0x24>
 8004326:	d902      	bls.n	800432e <_free_r+0x7a>
 8004328:	230c      	movs	r3, #12
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	e7d4      	b.n	80042d8 <_free_r+0x24>
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	1821      	adds	r1, r4, r0
 8004332:	428a      	cmp	r2, r1
 8004334:	bf01      	itttt	eq
 8004336:	6811      	ldreq	r1, [r2, #0]
 8004338:	6852      	ldreq	r2, [r2, #4]
 800433a:	1809      	addeq	r1, r1, r0
 800433c:	6021      	streq	r1, [r4, #0]
 800433e:	6062      	str	r2, [r4, #4]
 8004340:	605c      	str	r4, [r3, #4]
 8004342:	e7c9      	b.n	80042d8 <_free_r+0x24>
 8004344:	bd38      	pop	{r3, r4, r5, pc}
 8004346:	bf00      	nop
 8004348:	2000015c 	.word	0x2000015c

0800434c <_malloc_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	1ccd      	adds	r5, r1, #3
 8004350:	f025 0503 	bic.w	r5, r5, #3
 8004354:	3508      	adds	r5, #8
 8004356:	2d0c      	cmp	r5, #12
 8004358:	bf38      	it	cc
 800435a:	250c      	movcc	r5, #12
 800435c:	2d00      	cmp	r5, #0
 800435e:	4606      	mov	r6, r0
 8004360:	db01      	blt.n	8004366 <_malloc_r+0x1a>
 8004362:	42a9      	cmp	r1, r5
 8004364:	d903      	bls.n	800436e <_malloc_r+0x22>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	f000 f87d 	bl	800446c <__malloc_lock>
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <_malloc_r+0xac>)
 8004374:	6814      	ldr	r4, [r2, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	b991      	cbnz	r1, 80043a0 <_malloc_r+0x54>
 800437a:	4c20      	ldr	r4, [pc, #128]	; (80043fc <_malloc_r+0xb0>)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b91b      	cbnz	r3, 8004388 <_malloc_r+0x3c>
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f863 	bl	800444c <_sbrk_r>
 8004386:	6020      	str	r0, [r4, #0]
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f85e 	bl	800444c <_sbrk_r>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d124      	bne.n	80043de <_malloc_r+0x92>
 8004394:	230c      	movs	r3, #12
 8004396:	4630      	mov	r0, r6
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	f000 f868 	bl	800446e <__malloc_unlock>
 800439e:	e7e4      	b.n	800436a <_malloc_r+0x1e>
 80043a0:	680b      	ldr	r3, [r1, #0]
 80043a2:	1b5b      	subs	r3, r3, r5
 80043a4:	d418      	bmi.n	80043d8 <_malloc_r+0x8c>
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d90f      	bls.n	80043ca <_malloc_r+0x7e>
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	18cc      	adds	r4, r1, r3
 80043ae:	50cd      	str	r5, [r1, r3]
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 f85c 	bl	800446e <__malloc_unlock>
 80043b6:	f104 000b 	add.w	r0, r4, #11
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	f020 0007 	bic.w	r0, r0, #7
 80043c0:	1ac3      	subs	r3, r0, r3
 80043c2:	d0d3      	beq.n	800436c <_malloc_r+0x20>
 80043c4:	425a      	negs	r2, r3
 80043c6:	50e2      	str	r2, [r4, r3]
 80043c8:	e7d0      	b.n	800436c <_malloc_r+0x20>
 80043ca:	684b      	ldr	r3, [r1, #4]
 80043cc:	428c      	cmp	r4, r1
 80043ce:	bf16      	itet	ne
 80043d0:	6063      	strne	r3, [r4, #4]
 80043d2:	6013      	streq	r3, [r2, #0]
 80043d4:	460c      	movne	r4, r1
 80043d6:	e7eb      	b.n	80043b0 <_malloc_r+0x64>
 80043d8:	460c      	mov	r4, r1
 80043da:	6849      	ldr	r1, [r1, #4]
 80043dc:	e7cc      	b.n	8004378 <_malloc_r+0x2c>
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d005      	beq.n	80043f4 <_malloc_r+0xa8>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 f82e 	bl	800444c <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d0cf      	beq.n	8004394 <_malloc_r+0x48>
 80043f4:	6025      	str	r5, [r4, #0]
 80043f6:	e7db      	b.n	80043b0 <_malloc_r+0x64>
 80043f8:	2000015c 	.word	0x2000015c
 80043fc:	20000160 	.word	0x20000160

08004400 <_realloc_r>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	4607      	mov	r7, r0
 8004404:	4614      	mov	r4, r2
 8004406:	460e      	mov	r6, r1
 8004408:	b921      	cbnz	r1, 8004414 <_realloc_r+0x14>
 800440a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800440e:	4611      	mov	r1, r2
 8004410:	f7ff bf9c 	b.w	800434c <_malloc_r>
 8004414:	b922      	cbnz	r2, 8004420 <_realloc_r+0x20>
 8004416:	f7ff ff4d 	bl	80042b4 <_free_r>
 800441a:	4625      	mov	r5, r4
 800441c:	4628      	mov	r0, r5
 800441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004420:	f000 f826 	bl	8004470 <_malloc_usable_size_r>
 8004424:	42a0      	cmp	r0, r4
 8004426:	d20f      	bcs.n	8004448 <_realloc_r+0x48>
 8004428:	4621      	mov	r1, r4
 800442a:	4638      	mov	r0, r7
 800442c:	f7ff ff8e 	bl	800434c <_malloc_r>
 8004430:	4605      	mov	r5, r0
 8004432:	2800      	cmp	r0, #0
 8004434:	d0f2      	beq.n	800441c <_realloc_r+0x1c>
 8004436:	4631      	mov	r1, r6
 8004438:	4622      	mov	r2, r4
 800443a:	f7ff ff17 	bl	800426c <memcpy>
 800443e:	4631      	mov	r1, r6
 8004440:	4638      	mov	r0, r7
 8004442:	f7ff ff37 	bl	80042b4 <_free_r>
 8004446:	e7e9      	b.n	800441c <_realloc_r+0x1c>
 8004448:	4635      	mov	r5, r6
 800444a:	e7e7      	b.n	800441c <_realloc_r+0x1c>

0800444c <_sbrk_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	2300      	movs	r3, #0
 8004450:	4c05      	ldr	r4, [pc, #20]	; (8004468 <_sbrk_r+0x1c>)
 8004452:	4605      	mov	r5, r0
 8004454:	4608      	mov	r0, r1
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	f7fb fe8a 	bl	8000170 <_sbrk>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_sbrk_r+0x1a>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	b103      	cbz	r3, 8004466 <_sbrk_r+0x1a>
 8004464:	602b      	str	r3, [r5, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	2000022c 	.word	0x2000022c

0800446c <__malloc_lock>:
 800446c:	4770      	bx	lr

0800446e <__malloc_unlock>:
 800446e:	4770      	bx	lr

08004470 <_malloc_usable_size_r>:
 8004470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004474:	1f18      	subs	r0, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfbc      	itt	lt
 800447a:	580b      	ldrlt	r3, [r1, r0]
 800447c:	18c0      	addlt	r0, r0, r3
 800447e:	4770      	bx	lr

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
